<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Linq" #>
<#

    var methods = new List<APIMethod>(10);

    var manifests = new string[] { 
        "BloggerAPI.json",
        "MetaWeblogAPI.json",
    };

    foreach(var manifest in manifests)
    {
        string absolutePath = Host.ResolvePath(manifest);
        string contents = File.ReadAllText(absolutePath);

        var lines = contents.Split(new string[] { "\r\n", "\n" }, StringSplitOptions.RemoveEmptyEntries);
        lines = lines.Where(l => !l.StartsWith("//")).ToArray(); // <-- Ignore comments

        foreach(var line in lines)
        {
            var method = new APIMethod(line);
            methods.Add(method);
        }
    }	
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using CookComputing.XmlRpc;

namespace MarkPad.Metaweblog
{
    partial class MetaWeblog : XmlRpcClientProtocol
    {
<# foreach(APIMethod method in methods) { #>
        [XmlRpcMethod("<#= method.Name #>")]
        public <#= method.Type #> <#= method.MethodName #>(<#= method.ParametersAsDeclaration #>)
        {
            return (<#= method.Type #>)Invoke("<#= method.MethodName #>", new object[] { <#= method.ParametersAsUsed #> });
        }

        public IAsyncResult Begin<#= method.MethodName #>(<#= method.ParametersAsDeclaration #>, AsyncCallback callback, object asyncState) 
        { 
            return BeginInvoke("<#= method.MethodName #>", new object[] { <#= method.ParametersAsUsed #> }, this, callback, asyncState);    
        } 

        public <#= method.Type #> End<#= method.MethodName #>(IAsyncResult asr) 
        { 
            return (<#= method.Type #>)EndInvoke(asr); 
        } 

<# } #>
    }
}
<#+
    internal class APIMethod
    {
        public string Type
        {
            get; private set;
        }
        public string Name
        {
            get; private set;
        }
        public string MethodName
        {
            get; private set;
        }
        public List<APIMethodParameter> Parameters
        {
            get; private set;
        }
        public string ParametersAsDeclaration
        {
            get
            {
                return string.Join(", ", Parameters.Select(p => p.Type + " " + p.Name).ToArray());
            }
        }
        public string ParametersAsUsed
        {
            get
            {
                return string.Join(", ", Parameters.Select(p => p.Name).ToArray());
            }
        }

        public APIMethod(string line)
        {
             var parts = line.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);
             Name = parts[0].Trim();

             var nameBits = Name.Split(new string[] { "." }, StringSplitOptions.RemoveEmptyEntries);
             MethodName = char.ToUpperInvariant(nameBits[1][0]) + nameBits[1].Substring(1);

             Type = parts[1].Trim();

             Parameters = new List<APIMethodParameter>();
             for(var i = 2; i < parts.Length; i++)
             {
                var data = parts[i].Split(new string[] { " " }, StringSplitOptions.RemoveEmptyEntries);
                Parameters.Add(new APIMethodParameter() { Type = data[0], Name = data[1] });
             }
        }
    }

    internal class APIMethodParameter
    {
        public string Type
        {
            get; set;
        }
        public string Name
        {
            get; set;
        }
    }
#>