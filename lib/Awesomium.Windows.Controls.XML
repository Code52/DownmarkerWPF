<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Awesomium.Windows.Controls</name>
    </assembly>
    <members>
        <member name="T:Awesomium.Windows.Controls.WebControl">
            <summary>
            Represents a WPF control that wraps an Awesomium web view.
            You can use it to embed Awesomium directly in your WPF application without any additional work.
            </summary>
            <remarks>
            You can create an instance of this class by directly invoking the
            default constructor (either by dropping it in your designer surface, through XAML or from code). 
            You do not need to explicitly create an instance of a web view through <see cref="T:Awesomium.Core.WebCore"/>.
            WebControl takes care of this internally.
            <p/>
            <note>
            Note that it is safe to use this control in a design environment for layout and configuration
            purposes. <see cref="T:Awesomium.Core.WebCore"/> and the underlying web view are only instantiated during runtime.
            </note>
            <p/>
            <h4>The Role of the <see cref="P:System.Windows.UIElement.IsEnabled"/> Property:</h4>
            In addition to its regular meaning, the <see cref="P:System.Windows.UIElement.IsEnabled"/> property indicates
            if internal asynchronous rendering of the underlying web-view, is currently enabled.
            <note>
            All rendering in the underlying web-view is actually done asynchronously in a separate process
            and so the page is usually continuously rendering internally. Setting <see cref="P:System.Windows.UIElement.IsEnabled"/>
            to <c>false</c>, will temporarily pause rendering.
            </note>
            <h4>The Role of the <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/> Property:</h4>
            A <see cref="T:Awesomium.Windows.Controls.WebControl"/> is considered invalid when it is:
            <list type="bullet">
            <item>
            <description>
            Crashed (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsCrashed"/>).
            <note>
            When crashed, this control will attempt to recreate its underlying view.
            For details, see: <see cref="P:Awesomium.Windows.Controls.WebControl.IsCrashed"/>.
            </note>
            </description>
            </item>
            <item>
            <description>
            Prematurely destroyed (see <see cref="M:Awesomium.Windows.Controls.WebControl.Dispose"/> and <see cref="M:Awesomium.Core.WebCore.Shutdown"/>).
            </description>
            </item>
            <item>
            <description>
            Not properly instantiated. This means that something went wrong
            during instantiation of either the <see cref="T:Awesomium.Core.WebCore"/> (if this
            is the first <see cref="T:Awesomium.Windows.Controls.WebControl"/> created) or of the
            underlying web-view.
            </description>
            </item>
            </list>
            <note type="caution">
            Developers should always check this property before calling <see cref="T:Awesomium.Core.IWebView"/>
            members implemented by this <see cref="T:Awesomium.Windows.Controls.WebControl"/>. Trying to access the underlying
            web-view when it is not alive, can throw an <see cref="T:System.InvalidOperationException"/>.
            <p/>
            For more details, refer to the documentation of this control's members.
            </note>
            <note>
            <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/> also returns <c>false</c> when the control is shown in a designer.
            The Awesomium <see cref="T:Awesomium.Core.WebCore"/> and the underlying web-view, are only instantiated
            during runtime.
            </note>
            </remarks>
            <threadsafety static="true" instance="false"/>
            <seealso cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>
            <seealso cref="P:Awesomium.Windows.Controls.WebControl.IsCrashed"/>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.PresenterPart">
            <summary>
            The name of the element representing the <see cref="T:Awesomium.Core.IWebViewPresenter"/>,
            in the control's template.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnCreateSurface(Awesomium.Core.CreateSurfaceEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.CreateSurface"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnSelectionChanged(Awesomium.Core.WebSelectionEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnProcessCreated(Awesomium.Core.WebViewEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.ProcessCreated"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnInitializeView(Awesomium.Core.WebViewEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.InitializeView"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnNativeViewInitialized(Awesomium.Core.WebViewEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.NativeViewInitialized"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnWindowClose(Awesomium.Core.WindowCloseEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.WindowClose"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnShowJavascriptDialog(Awesomium.Core.JavascriptDialogEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.ShowJavascriptDialog"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnPrinting(Awesomium.Core.PrintOperationEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.Printing"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnTitleChanged(Awesomium.Core.TitleChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.TitleChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnAddressChanged(Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.AddressChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnToolTipChanged(Awesomium.Core.ToolTipChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.ToolTipChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnTargetURLChanged(Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.TargetURLChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnCursorChanged(Awesomium.Core.CursorChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.CursorChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnFocusChanged(Awesomium.Core.FocusChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.FocusChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnConsoleMessage(Awesomium.Core.ConsoleMessageEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.ConsoleMessage"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnShowCreatedWebView(Awesomium.Core.ShowCreatedWebViewEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.ShowCreatedWebView"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnDocumentReady(Awesomium.Core.UrlEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.DocumentReady"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnLoadingFrame(Awesomium.Core.LoadingFrameEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.LoadingFrame"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnLoadingFrameFailed(Awesomium.Core.LoadingFrameFailedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.LoadingFrameFailed"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnLoadingFrameComplete(Awesomium.Core.FrameEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.LoadingFrameComplete"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnSelectLocalFiles(Awesomium.Core.FileDialogEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.SelectLocalFiles"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnLoginRequest(Awesomium.Core.LoginRequestEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.LoginRequest"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnCertificateError(Awesomium.Core.CertificateErrorEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.CertificateError"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnPrintRequest(Awesomium.Core.PrintRequestEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.PrintRequest"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnPrintFailed(Awesomium.Core.PrintOperationEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.PrintFailed"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnPrintComplete(Awesomium.Core.PrintCompleteEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.PrintComplete"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnShowPopupMenu(Awesomium.Core.PopupMenuEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.ShowPopupMenu"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnShowContextMenu(Awesomium.Core.ContextMenuEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.ShowContextMenu"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnShowPageInfo(Awesomium.Core.PageInfoEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.ShowPageInfo"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnResponsiveChanged(Awesomium.Core.ResponsiveChangedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.ResponsiveChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnCrashed(Awesomium.Core.CrashedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebControl.Crashed"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.VerifyValid">
            <summary>
            Verifies the view is live. Throws an exception otherwise.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.VerifyValidParent">
            <summary>
            Verifies a windowed IWebView has specified a valid parent window.
            Throws an exception otherwise.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.AddSettingHandler(System.String,System.Action)">
            <summary>
            Adds an action to be performed at <see cref="M:Awesomium.Windows.Controls.WebControl.ApplyDesignTimeSettings"/>.
            </summary>
            <param name="property">The property the action is supposed to set.</param>
            <param name="handler">Delegate of the action.</param>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ApplyDesignTimeSettings">
            <summary>
            Should be called by <see cref="T:Awesomium.Core.IWebView"/> components,
            right after the underlying view has been created.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.InitializeStandard">
            <summary>
            Standard initialization of views.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ClearStandard">
            <summary>
            Performs standard actions when a view closes. 
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.LoginRespond(Awesomium.Core.LoginRequestEventArgs)">
            <summary>
            Login response helper.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.CertificateErrorRespond(Awesomium.Core.CertificateErrorEventArgs)">
            <summary>
            CertificateError response helper.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ChooseFilesRespond(Awesomium.Core.FileDialogEventArgs)">
            <summary>
            Select local files helper.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">
            Specifies the type of service object to get.
            </param>
            <returns>
            A service object of type <paramref name="serviceType"/> or <c>null</c> (<c>Nothing</c> in Visual Basic)
            if there is no service object of type <paramref name="serviceType"/>.
            </returns>
            <remarks>
            Several <see cref="T:Awesomium.Core.IWebView"/> features can be accessed through services. This
            is because the availability of these features depends on the current state or
            the type (see <see cref="T:Awesomium.Core.WebViewType"/>) of the <see cref="T:Awesomium.Core.IWebView"/> instance.
            <p/>
            Here is a list of services currently available:
            <list type="table">
            <listheader>
            <term>Service Type</term>
            <description>Availability</description>
            </listheader>
            <item>
            <term><see cref="T:Awesomium.Core.IWebViewIMEComposition"/></term>
            <description>
            Only available when <see cref="P:Awesomium.Core.IWebView.ViewType"/> is <see cref="F:Awesomium.Core.WebViewType.Offscreen"/>.
            </description>
            </item>
            </list>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.GoToHome">
            <summary>
            Navigates to the Home URL as defined in <see cref="P:Awesomium.Core.WebCore.HomeURL"/>.
            </summary><returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.LoadHTML(System.String)">
            <summary>
            Loads a string of HTML into the view asynchronously.
            </summary><param name="html">
            The HTML string (ASCII) to load.
            </param><returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.GoBack">
            <summary>
            Navigates one step backwards in history.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.GoForward">
            <summary>
            Navigates one step forward in history.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.GoToHistoryOffset(System.Int32)">
            <summary>
            Navigates back/forward in history via a relative offset.
            </summary><param name="offset">
            The relative offset in history to navigate to. (Can be negative)
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Stop">
            <summary>
            Stops the current navigation.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Reload(System.Boolean)">
            <summary>
            Reloads the current page.
            </summary><param name="ignoreCache">
            Indicates if cached resources should be reloaded as well.
            </param><returns>
            <c>true</c> if the command was successfully sent. <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.CanGoBack">
            <summary>
            Gets if we can go back in history.
            </summary><returns>
            <c>true</c> if the view can go back in history. <c>false</c> otherwise.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.CanGoForward">
            <summary>
            Gets if we can go forward in history.
            </summary><returns>
            <c>true</c> if the view can go forward in history. <c>false</c> otherwise.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.GetLastError">
            <summary>
            Check if an error occurred during the last synchronous Javascript interoperation call.
            </summary><returns>
            An <see cref="T:Awesomium.Core.Error"/> value indicating the error that may have occurred
            during the last synchronous Javascript interoperation API call.
            </returns><seealso cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/><seealso cref="M:Awesomium.Core.IWebView.ExecuteJavascriptWithResult(System.String)"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.CreateGlobalJavascriptObject(System.String)">
            <summary>
            Create a global JavaScript object that will persist between all loaded pages, 
            for the lifetime of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><param name="name">
            The name of the object as it will appear in JavaScript.
            </param><returns>
            If this call succeeds, the returned <see cref="T:Awesomium.Core.JSValue"/> will be of type 'Object' 
            (see <see cref="P:Awesomium.Core.JSValue.IsObject"/>). You can check the reason why the call failed by calling
            <see cref="M:Awesomium.Core.IWebView.GetLastError"/> after this method.
            </returns><remarks>
            Global Objects can only contain the following JavaScript types as 
            properties:
            <list type="bullet">
            <item>
            <description>
            <c>Number</c>
            </description>
            </item>
            <item>
            <description>
            <c>String</c>
            </description>
            </item>
            <item>
            <description>
            <c>Array</c>
            </description>
            </item>
            <item>
            <description>
            <c>Null</c>
            </description>
            </item>
            <item>
            <description>
            <c>Other Global Objects</c>
            </description>
            </item>
            <item>
            <description>
            <c>Undefined</c>
            </description>
            </item>
            </list>
            <p/>
            Global Objects will retain any custom methods that are registered
            (see <see cref="M:Awesomium.Core.JSObject.SetCustomMethod(System.String,System.Boolean)"/>).
            <note>
            To create a child global-object, you should specify the full name with dot-notation for example:
            <c>parentObject.childObject</c>.
            <p/>
            The parent object should exist before attempting to make any children.
            </note>
            <note>
            You can create global Javascript objects on a view, as soon as it goes <i>live</i>. (<see cref="P:Awesomium.Core.IWebView.IsLive"/> is
            <c>true</c>). On technology specific <c>WebControls</c>, you should wait for the <see cref="E:Awesomium.Core.IWebView.NativeViewInitialized"/>
            event. <see cref="T:Awesomium.Core.WebView"/> components go live immediately after creation.
            </note>
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><exception cref="T:System.NotSupportedException">
            Javascript calls are not supported when Javascript is disabled (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.InvalidOperationException">
            The member is called from inside a synchronous JS method handler. (See: <see cref="M:Awesomium.Core.JSObject.Bind(System.String,System.Boolean,Awesomium.Core.JavascriptMethodEventHandler)"/>)
            </exception><exception cref="T:System.ArgumentException">
            The specified <paramref name="name"/> is reserved. It either represents an HTML DOM object, 
            or an object variable already available in the page. Use <see cref="M:Awesomium.Core.IWebView.ExecuteJavascriptWithResult(System.String)"/> 
            after <see cref="E:Awesomium.Core.IWebView.DocumentReady"/>, to obtain this object.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ExecuteJavascript(System.String)">
            <summary>
            Executes some JavaScript asynchronously in the main frame of the page.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><exception cref="T:System.NotSupportedException">
            Javascript calls are not supported when Javascript is disabled (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.InvalidOperationException">
            Attempted to execute Javascript on the page, before the DOM is ready. 
            Wait for the <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event before executing your Javascript.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ExecuteJavascript(System.String,System.String)">
            <summary>
            Executes some JavaScript asynchronously on the page.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><param name="frameXpath">
            The xpath of the frame to execute within; leave
            this blank to execute in the main frame.
            </param><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><exception cref="T:System.NotSupportedException">
            Javascript calls are not supported when Javascript is disabled (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.InvalidOperationException">
            Attempted to execute Javascript on the page, before the DOM is ready. 
            Wait for the <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event before executing your Javascript.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ExecuteJavascriptWithResult(System.String)">
            <summary>
            Executes some JavaScript synchronously in the main frame of the page, and returns a result.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><returns>
            Returns the result (if any). Any <see cref="T:Awesomium.Core.JSObject"/> returned from this
            method will be a remote proxy for an object contained within the view's process.
            If this call fails, the returned <see cref="T:Awesomium.Core.JSValue"/> will have an <c>Undefined</c> type.
            (see <see cref="P:Awesomium.Core.JSValue.IsUndefined"/>). You can check <see cref="M:Awesomium.Core.IWebView.GetLastError"/> for more
            information about the failure.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><exception cref="T:System.NotSupportedException">
            Javascript calls are not supported when Javascript is disabled (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.InvalidOperationException">
            The member is called from inside a synchronous JS method handler. (See: <see cref="M:Awesomium.Core.JSObject.Bind(System.String,System.Boolean,Awesomium.Core.JavascriptMethodEventHandler)"/>)
            </exception><exception cref="T:System.InvalidOperationException">
            Attempted to execute Javascript on the page, before the DOM is ready. 
            Wait for the <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event before executing your Javascript.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ExecuteJavascriptWithResult(System.String,System.String)">
            <summary>
            Executes some JavaScript synchronously on the page, and returns a result.
            </summary><param name="script">
            The string of JavaScript to execute.
            </param><param name="frameXPath">
            The xpath of the frame to execute within; leave
            this blank to execute in the main frame.
            </param><returns>
            Returns the result (if any). Any <see cref="T:Awesomium.Core.JSObject"/> returned from this
            method will be a remote proxy for an object contained within the view's process.
            If this call fails, the returned <see cref="T:Awesomium.Core.JSValue"/> will have an <c>Undefined</c> type.
            (see <see cref="P:Awesomium.Core.JSValue.IsUndefined"/>). You can check <see cref="M:Awesomium.Core.IWebView.GetLastError"/> for more
            information about the failure.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><exception cref="T:System.NotSupportedException">
            Javascript calls are not supported when Javascript is disabled (see: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>).
            </exception><exception cref="T:System.InvalidOperationException">
            The member is called from inside a synchronous JS method handler. (See: <see cref="M:Awesomium.Core.JSObject.Bind(System.String,System.Boolean,Awesomium.Core.JavascriptMethodEventHandler)"/>)
            </exception><exception cref="T:System.InvalidOperationException">
            Attempted to execute Javascript on the page, before the DOM is ready. 
            Wait for the <see cref="E:Awesomium.Core.IWebView.DocumentReady"/> event before executing your Javascript.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Undo">
            <summary>
            Undo the last 'edit' operation. (Similar to CTRL+Z).
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Redo">
            <summary>
            Redo the last 'edit' operation. (Similar to CTRL+Y).
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Cut">
            <summary>
            Performs a 'cut' operation using the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Copy">
            <summary>
            Performs a 'copy' operation using the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.CopyHTML">
            <summary>
            Copies the HTML content currently selected in this view, to the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.CopyLinkAddress">
            <summary>
            Copies the target URL of the link currently under the cursor.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.CopyImageAt(System.Int32,System.Int32)">
            <summary>
            Attempt to copy an image on the page, to the system clipboard.
            This is meant to be used with <see cref="E:Awesomium.Core.IWebView.ShowContextMenu"/>.
            </summary><param name="x">The x-coordinate.</param><param name="y">The y-coordinate.</param><remarks>
            All coordinates should be localized to the view. All values are in
            pixels, the origin (0,0) begins at the top-left corner of the view,
            positive <paramref name="y"/> values are "down" and positive <paramref name="x"/> 
            values are "right".
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Paste">
            <summary>
            Performs a 'paste' operation using the system clipboard.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.PasteAndMatchStyle">
            <summary>
            Performs a 'paste' operation using the system clipboard while attempting
            to preserve any styles of the original text.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.SelectAll">
            <summary>
            Performs a 'select all' operation.
            </summary><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.PrintToFile(System.String,Awesomium.Core.PrintConfig)">
            <summary>
            Prints this <see cref="T:Awesomium.Core.IWebView"/> instance to a PDF file, asynchronously.
            You should generally use this method in response to a <see cref="E:Awesomium.Core.IWebView.PrintRequest"/>
            event.
            </summary><param name="outputDirectory">
            A writeable directory to write the file(s) to.
            </param><param name="config">
            The configuration settings to use.
            </param><returns>
            Returns a unique request identifier that you can use later to identify
            this specific request (see <see cref="E:Awesomium.Core.IWebView.PrintFailed"/> and <see cref="E:Awesomium.Core.IWebView.PrintComplete"/>). 
            May return <c>0</c> if this method fails prematurely.
            </returns><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><exception cref="T:System.IO.DirectoryNotFoundException">
            The specified output directory <paramref name="outputDirectory"/>, does not exist.
            </exception><exception cref="T:System.ArgumentException">
            <paramref name="outputDirectory"/> is a zero-length string, contains only white space, or contains one
            or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>. -OR- 
            The system could not retrieve the absolute path.
            </exception><exception cref="T:System.Security.SecurityException">
            The caller does not have the required permissions.
            </exception><exception cref="T:System.ArgumentNullException">
            <paramref name="outputDirectory"/> is <c>null</c> (<c>Nothing</c> in Visual Basic).
            </exception><exception cref="T:System.NotSupportedException">
            <paramref name="outputDirectory"/> contains a colon (":") that is not part of a volume identifier (for example, "c:\").
            </exception><exception cref="T:System.IO.PathTooLongException">
            The acquired full path to the specified <paramref name="outputDirectory"/>, exceeds the system-defined maximum
            length. For example, on Windows-based platforms, paths must be less than 248 characters, 
            and file names must be less than 260 characters.
            </exception><seealso cref="T:Awesomium.Core.PrintConfig"/><seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/><seealso cref="E:Awesomium.Core.IWebView.Printing"/><seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/><seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/><seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ZoomIn">
            <summary>
            Zooms into the page by <c>20%</c>.
            </summary><remarks>
            <note>
            Zoom amount is saved per hostname.
            </note>
            <note>
            This operation is asynchronous: the value may not change for several 
            milliseconds after you call this member.
            </note>
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="M:Awesomium.Core.IWebView.ZoomOut"/><seealso cref="P:Awesomium.Core.IWebView.Zoom"/><seealso cref="M:Awesomium.Core.WebSession.GetZoomForURL(System.Uri)"/><seealso cref="M:Awesomium.Core.IWebView.ResetZoom"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ZoomOut">
            <summary>
            Zooms out the page by <c>20%</c>.
            </summary><remarks>
            <note>
            Zoom amount is saved per hostname.
            </note>
            <note>
            This operation is asynchronous: the value may not change for several 
            milliseconds after you call this member.
            </note>
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="M:Awesomium.Core.IWebView.ZoomIn"/><seealso cref="P:Awesomium.Core.IWebView.Zoom"/><seealso cref="M:Awesomium.Core.WebSession.GetZoomForURL(System.Uri)"/><seealso cref="M:Awesomium.Core.IWebView.ResetZoom"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ResetZoom">
            <summary>
            Resets the zoom level for the currently loaded host.
            </summary><remarks>
            <note>
            Zoom amount is saved per hostname.
            </note>
            <note>
            This operation is asynchronous: the value may not change for several 
            milliseconds after you call this member.
            </note>
            </remarks><exception cref="T:System.InvalidOperationException">
            The member is called on an invalid view. (See: <see cref="P:Awesomium.Core.IWebView.IsLive"/>)
            </exception><seealso cref="P:Awesomium.Core.IWebView.Zoom"/><seealso cref="M:Awesomium.Core.IWebView.ZoomIn"/><seealso cref="M:Awesomium.Core.IWebView.ZoomOut"/><seealso cref="M:Awesomium.Core.WebSession.GetZoomForURL(System.Uri)"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.RequestPageInfo">
            <summary>
            Issues a request for the currently loaded page's security
            info. Information will be retrieved through the 
            <see cref="E:Awesomium.Core.IWebView.ShowPageInfo"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.#ctor">
            <summary>
            Creates and initializes an instance of <see cref="T:Awesomium.Windows.Controls.WebControl"/> and its underlying web view.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Dispose">
            <summary>
            Destroys and removes this web view control. Any call to members of this control
            after calling this method, will cause a <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <remarks>
            To avoid exceptions, do not call this method when the hosting UI of the control (if any)
            is still alive and visible.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnIsEnabledChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Maintains the relationship between the control's enabled status and internal
            asynchronous rendering (see <see cref="P:Awesomium.Core.IWebView.IsRendering"/>).
            </summary>
            <remarks>
            In addition to its regular meaning, the <see cref="P:System.Windows.UIElement.IsEnabled"/> property indicates
            if internal asynchronous rendering of the underlying web-view, is currently active.
            <note>
            All rendering in the underlying web-view is actually done asynchronously in a separate process
            and so the page is usually continuously rendering internally. Setting <see cref="P:System.Windows.UIElement.IsEnabled"/>
            to <c>false</c>, will temporarily pause rendering.
            </note>
            <note type="inherit">
            Inheritors can override <see cref="M:Awesomium.Windows.Controls.WebControl.OnIsEnabledChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>, 
            then set <see cref="P:Awesomium.Core.IWebView.IsRendering"/> manually if they want to <i>disconnect</i> internal asynchronous 
            rendering, from the control's enabled status.
            </note>
            <note>
            Note that this method is provided by the WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/> so that
            you can control the relationship between the control's enabled status
            and internal asynchronous rendering (see <see cref="P:Awesomium.Core.IWebView.IsRendering"/>). It does
            not trigger the <see cref="E:System.Windows.UIElement.IsEnabledChanged"/> event.
            The <see cref="E:System.Windows.UIElement.IsEnabledChanged"/> event is fired by the
            .NET Framework <b>before</b> this method is called.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Controls.WebControl.IsRendering"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnGotFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.FocusView">
            <summary>
            Notifies the current page that it has gained focus.
            </summary>
            <remarks>
            You will need to call this to gain text-box focus, among other things. 
            (If you fail to ever see a blinking caret when typing text, this is why.)
            </remarks>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.UnfocusView">
            <summary>
            Notifies the current page that it has lost focus.
            </summary>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.InjectMouseMove(System.Int32,System.Int32)">
            <summary>
            Injects a mouse-move event in local coordinates.
            </summary>
            <param name="x">
            The absolute x-coordinate of the mouse (relative to the <see cref="T:Awesomium.Windows.Controls.WebControl"/> itself).
            </param>
            <param name="y">
            The absolute y-coordinate of the mouse (relative to the <see cref="T:Awesomium.Windows.Controls.WebControl"/> itself).
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses the setting of the <see cref="P:Awesomium.Windows.Controls.WebControl.ProcessInput"/> property.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.InjectMouseDown(Awesomium.Core.MouseButton)">
            <summary>
            Injects a mouse-down event.
            </summary>
            <param name="button">
            The mouse button that was pressed.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses the setting of the <see cref="P:Awesomium.Windows.Controls.WebControl.ProcessInput"/> property.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.InjectMouseUp(Awesomium.Core.MouseButton)">
            <summary>
            Injects a mouse-up event.
            </summary>
            <param name="button">
            The mouse button that was released.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses the setting of the <see cref="P:Awesomium.Windows.Controls.WebControl.ProcessInput"/> property.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.InjectMouseWheel(System.Int32,System.Int32)">
            <summary>
            Injects a mouse-wheel event.
            </summary>
            <param name="scrollVert">
            The relative amount of pixels to scroll vertically.
            </param>
            <param name="scrollHorz">
            The relative amount of pixels to scroll horizontally.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses the setting of the <see cref="P:Awesomium.Windows.Controls.WebControl.ProcessInput"/> property.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.InjectKeyboardEvent(Awesomium.Core.WebKeyboardEvent)">
            <summary>
            Injects a keyboard event.
            </summary>
            <param name="keyEvent">
            The keyboard event to inject. You'll need to initialize the members of the passed
            <see cref="T:Awesomium.Core.WebKeyboardEvent"/>, yourself.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses the setting of the <see cref="P:Awesomium.Windows.Controls.WebControl.ProcessInput"/> property.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.NativeWindowProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.NativeWindow"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.ParentWindowProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.ParentWindow"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.PresenterProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.Presenter"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsLiveProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsProcessCreatedProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsProcessCreated"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.TitleProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.Title"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.HasTitleProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.HasTitle"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsLoadingProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsLoading"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsNavigatingProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsNavigating"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsCrashedProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsCrashed"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsDocumentReadyProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsDocumentReady"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsResponsiveProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsResponsive"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.TargetURLProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.TargetURL"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.HasTargetURLProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.HasTargetURL"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.SelectionProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.Selection"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.HasSelectionProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.HasSelection"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.FocusedElementTypeProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.FocusedElementType"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.ToolTipTextProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.ToolTipText"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.ParentViewProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.ParentView"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.LatestContextDataProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.LatestContextData"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsRenderingProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsRendering"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.TerminationStatusProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.TerminationStatus"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.ProcessIdProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.ProcessId"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IdentifierProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.Identifier"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.ProcessHandleProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.ProcessHandle"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsJavascriptEnabledProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsJavascriptEnabled"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsPrintingProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsPrinting"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.CurrentCertificateErrorProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.CurrentCertificateError"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.HasCertificateErrorProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.HasCertificateError"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.NativeViewProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.WebSessionProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.WebSession"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.SurfaceProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.Surface"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsTransparentProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsTransparent"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.SourceProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.Source"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.NavigationInfoProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.NavigationInfo"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.ProcessInputProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.ProcessInput"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.ViewTypeProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.ViewType"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.SynchronousMessageTimeoutProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.SynchronousMessageTimeout"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.ZoomProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.Zoom"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsSourceViewProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsSourceView"/> dependency property.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.CreateSurface">
            <summary>
            Occurs when an <see cref="T:Awesomium.Core.ISurface"/> is requested by the view. Usually, 
            every time the size of the view changes. You should return your own 
            <see cref="T:Awesomium.Core.ISurface"/> implementation here.
            </summary><remarks>
            When <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is called,
            <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> reflects the previously assigned 
            <see cref="T:Awesomium.Core.ISurface"/> instance. If your surface is capable of handling resizing, 
            you can keep on using the same <see cref="T:Awesomium.Core.ISurface"/> instance on
            multiple <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> calls.
            <p/>
            When <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is called for the first
            time, <see cref="P:Awesomium.Core.CreateSurfaceEventArgs.Surface"/> returns the <see cref="T:Awesomium.Core.ISurface"/> 
            assigned to the view using <see cref="P:Awesomium.Core.IWebView.Surface"/> or, if no <see cref="T:Awesomium.Core.ISurface"/> 
            instance has been previously specified, the default <see cref="T:Awesomium.Core.ISurface"/> assigned
            to the view by Awesomium.NET. This is either a <see cref="T:Awesomium.Core.BitmapSurface"/>
            (for <see cref="T:Awesomium.Core.WebView"/> instances) or a technology specific <see cref="T:Awesomium.Core.ISurface"/>.
            <note>
            If you are using an <see cref="T:Awesomium.Core.ISurface"/> instance capable of handling changes in
            size, you should better use <see cref="P:Awesomium.Core.IWebView.Surface"/> to assign your surface.
            This surface will be used with multiple calls of <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>
            and it should be able to handle changes in size during <see cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/>.
            In this scenario, you can ignore the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.SelectionChanged">
            <summary>
            Occurs when the selection in the current page, changes.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ProcessCreated">
            <summary>
            Occurs when the child rendering process for this view, has been spawned.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.InitializeView">
            <summary>
            Occurs when the underlying web-view of a <c>WebControl</c>is about to be instantiated and wrapped or, 
            for child views created in response to a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>, the native view assigned to 
            the <c>NativeView</c> property of a <c>WebControl</c>, is about to be wrapped.
            </summary><remarks>
            This is the last moment for setting any of the following properties, on a <c>WebControl</c>:
            <list type="table">
            <listheader>
            <term>
            Technology
            </term>
            <description>
            Properties
            </description>
            </listheader>
            <item>
            <term>
            WPF
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Controls.WebControl.WebSession"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Controls.WebControl.ViewType"/>
            </description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>
            Windows Forms
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Forms.WebControl.WebSession"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Windows.Forms.WebControl.ViewType"/>
            </description>
            </item>
            </list>
            </description>
            </item>
            </list>
            These properties are implemented as read-write properties on <c>WebControls</c> and
            can only be set before the underlying web-view of a <c>WebControl</c> is created,
            or a previously created native view is wrapped (see <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>).
            <p/>
            Right after this event is fired, the <c>WebControl</c> goes live (<see cref="P:Awesomium.Core.IWebView.IsLive"/>
            is set to <c>true</c>) and these properties can no longer be changed.
            <note type="caution">
            Attempting to set some of the above properties after a <c>WebControl</c> is live,
            is usually silently ignored but may also throw an exception. For details, refer to the
            documentation of the properties.
            </note>
            <note>
            This event is not fired on <see cref="T:Awesomium.Core.WebView"/> instances. A <see cref="T:Awesomium.Core.WebView"/>
            component goes live immediately at creation.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.NativeViewInitialized">
            <summary>
            Occurs when the native underlying web-view of a <c>WebControl</c>, has been initialized.
            </summary><remarks>
            This event occurs right after <see cref="P:Awesomium.Core.IWebView.IsLive"/> is set to <c>true</c> and 
            also indicates the moment when global Javascript objects can be created.
            (See: <see cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/>)
            <note>
            This event is not fired on <see cref="T:Awesomium.Core.WebView"/> instances. A <see cref="T:Awesomium.Core.WebView"/>
            component goes live immediately after creation.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.WindowClose">
            <summary>
            Occurs when Javascript in the page calls <c>window.close</c>.
            </summary><remarks>
            You can ignore this event, or respond depending on the current context.
            For example, if the page is open in the main window of an application
            or a tab, browsers display a confirmation dialog asking the user if he
            wants to acknowledge the page's request.
            <p/>
            If the page is open in a popup window, browsers usually respect the
            request and close the popup window, without any confirmation from the user.
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ShowJavascriptDialog">
            <summary>
            Occurs when a JavaScript call that requires the creation of a modal dialog, is called.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.Printing">
            <summary>
            Occurs when a printing operation has started.
            </summary><remarks>
            This event occurs:
            <list type="bullet">
            <item>
            <description>
            On any <see cref="T:Awesomium.Core.IWebView"/> instance, right after a call to <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>.
            </description>
            </item>
            <item>
            <description>
            On technology specific <c>WebControls</c>, right after a <see cref="E:Awesomium.Core.IWebView.PrintRequest"/> 
            event that has not been handled, or canceled (either programmatically or by canceling the 
            <i>Select Folder</i> dialog).
            </description>
            </item>
            </list>
            </remarks><seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/><seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/><seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/><seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.TitleChanged">
            <summary>
            Occurs when the current page title has changed.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.AddressChanged">
            <summary>
            Occurs when the page URL has changed, usually after navigation to a new
            URL has started.
            </summary><seealso cref="P:Awesomium.Core.IWebView.Source"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ToolTipChanged">
            <summary>
            Occurs when the tooltip text has changed.
            </summary><remarks>
            Technology specific <c>WebControls</c>, present their own tooltip.
            Set <see cref="P:Awesomium.Core.ToolTipChangedEventArgs.Handled"/> to <c>true</c>,
            to prevent a <c>WebControl</c> from displaying its predefined tooltip.
            <note>
            When setting <see cref="P:Awesomium.Core.ToolTipChangedEventArgs.Handled"/> to <c>true</c>
            to handle tooltips yourself, you should expect an empty string passed
            to <see cref="P:Awesomium.Core.ToolTipChangedEventArgs.ToolTip"/> and in response to it,
            hide your tooltip (if any).
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.TargetURLChanged">
            <summary>
            Occurs when the target URL has changed. This
            is usually the result of hovering over a link on a page.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.CursorChanged">
            <summary>
            Occurs when the cursor has changed. This is
            is usually the result of hovering over different content.
            </summary><remarks>
            You can set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            to <c>true</c>, to prevent a technology specific <c>WebControl</c>
            from changing the visible cursor.
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.FocusChanged">
            <summary>
            Occurs when the focused element changes on the page.
            This is usually the result of text-box being focused or some other
            user-interaction event.
            </summary><remarks>
            You should generally forward keyboard events to the active <see cref="T:Awesomium.Core.IWebView"/> instance,
            whenever one of the following element types are focused:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Input"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.TextInput"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.EditableContent"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Plugin"/>
            </description>
            </item>
            </list>
            This is done automatically in technology specific <c>WebControl</c>
            instances.
            </remarks><seealso cref="P:Awesomium.Core.IWebView.FocusedElementType"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ConsoleMessage">
            <summary>
            Occurs when a message is added to the console on the page.
            This is usually the result of a JavaScript error being encountered
            on a page.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ShowCreatedWebView">
            <summary>
            Occurs when an <see cref="T:Awesomium.Core.IWebView"/> creates a new child web-view instance
            (usually the result of <c>window.open</c> or an external link).
            </summary><remarks>
            <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> occurs when an <see cref="T:Awesomium.Core.IWebView"/> instance creates a new child view 
            (usually the result of <c>window.open</c>, clicking on a link with <c>target="_blank"</c> or submitting a <c>form</c>
            with <c>target="_blank"</c>). 
            <p/>
            It is your responsibility to wrap and display this new view in your application.
            <note type="caution">
            The <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event must always be handled in your application. Views created by
            Awesomium in response to users clicking a link or JavaScript <c>window.open</c> calls, will remain alive
            and eventually cause a memory leak if this event is not handled.
            <h3>Handling Notes</h3>
            In the simplest scenario, you should at least handle the event and set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c>
            to tell the core to destroy the unused web-view instance.
            </note>
            There are a number of facts you need to take into consideration, before taking the appropriate actions in response 
            to a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event. The following list presents these facts and some general suggestions:
            <list type="bullet">
            <item>
            <description>
            The created child view, has the same type (see <see cref="P:Awesomium.Core.IWebView.ViewType"/>) and is assigned to the same session
            (see <see cref="P:Awesomium.Core.IWebView.WebSession"/>) as its parent (opener) view. Therefore, you should not attempt to set these 
            properties if you are wrapping the new child view with a technology specific <c>WebControl</c>.
            </description>
            </item>
            <item>
            <description>
            In order to maintain the relationship with their parent view, child views execute and render under 
            the same process (<c>awesomium_process</c>) as their parent view. If for any reason the child process crashes,
            all views related to it will be affected.
            </description>
            </item>
            <item>
            <description>
            If <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> is fired as a result of a Javascript <c>window.open</c>,
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> will be <c>true</c>. In this scenario, <b>you should always wrap</b> the created child view instance
            (<see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>), to maintain the parent-child window relationship (the child page can access
            the parent through the <c>window.opener</c> property; the parent can manipulate the child through the
            <c>window</c> object returned from the <c>window.open</c> call, which is why <c>window.open</c> was most
            probably used in the first place).
            </description>
            </item>
            <item>
            <description>
            If <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> is fired as a result of an HTML form with <c>target="_blank"</c> and
            <c>method="post"</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> will be <c>true</c>. In this scenario, <b>you should always wrap</b>
            the created child view instance (<see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/>), to allow <c>POST</c> data be properly passed.
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> or <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> are <c>false</c>, it most possibly indicates that the event is the result of
            a user clicking on a link with <c>target="_blank"</c>. Since maintaining a parent-child relationship is not important
            in this scenario, <b>you should cancel the event</b> by setting <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <c>true</c> (this tells the core 
            to destroy the unused web-view instance), then create a new <see cref="T:Awesomium.Core.WebView"/> (using <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>)
            or <c>WebControl</c> and navigate to the provided <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any. This allows you to take advantage
            of the isolated process architecture of Awesomium and let each view be rendered in a separate process.
            <note type="caution">
            Failing to cancel the event when you are not wrapping the new child view instance, will keep the native instance alive until 
            the <see cref="T:Awesomium.Core.WebCore"/> is shut down. This can result in numerous unused views being spawned, but never actually used.
            </note>
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> or <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> is <c>true</c>, navigation to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any, 
            is already queued on the created child view. Therefore you should not attempt to set the <see cref="P:Awesomium.Core.IWebView.Source"/> when you 
            are wrapping the child view, as this would again break the parent-child relationship (<c>window.opener</c> on the child page and the 
            <c>window</c> object returned from the <c>window.open</c> call on the parent page, will be rendered invalid) or prevent passing
            <c>POST</c> data to the server respectively.
            <note>
            Also note that since navigation to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any, has already started by the moment the child
            view is wrapped, <see cref="E:Awesomium.Core.IWebView.LoadingFrame"/> will not be fired for the main frame of the new <see cref="T:Awesomium.Core.IWebView"/>
            instance.
            </note>
            </description>
            </item>
            <item>
            <description>
            Navigation to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/>, if any, is blocked on the created child view, when <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> and 
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> are <c>false</c>. As applications will generally choose to cancel the event and create a new <see cref="T:Awesomium.Core.IWebView"/> 
            instance to navigate to the target URL (or even choose to navigate to the target URL on the same <see cref="T:Awesomium.Core.IWebView"/> instance that 
            fired the event), Awesomium.NET does this to prevent <i>false hits</i> to the target URL, that would have occurred by the time the 
            event handler returns and the unused child view instance, is destroyed. What's more, users may also implement 
            <see cref="T:Awesomium.Core.IResourceInterceptor"/> and cancel requests to new views that are the result of JavaScript <c>window.open</c>
            (see <see cref="P:Awesomium.Core.ResourceRequest.IsWindowOpen"/>). Therefore, if your application chooses to wrap the created 
            child view even though it is most possibly the result of a user clicking on a link with <c>target="_blank"</c> or navigation
            to the target URL has already been canceled by an <see cref="T:Awesomium.Core.IResourceInterceptor"/> (see <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsNavigationCanceled"/>), 
            you should in this scenario only, after wrapping the child view, set the <see cref="P:Awesomium.Core.IWebView.Source"/> property to 
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/> to resume navigation to the target URL.
            <note>
            Applications can occasionally choose to wrap a child view even when <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> is <c>false</c> or 
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsNavigationCanceled"/> is <c>true</c>, if they want to apply a <i>single process</i> architecture where all new 
            views created will be rendered by the same <c>awesomium_process</c>.
            </note>
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> is <c>true</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/> returns a valid, initialized <see cref="T:Awesomium.Core.JSWindowOpenSpecs"/>
            instance. This may be initialized to default values if <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>false</c>, or reflect the <i>specs</i> 
            specified to the <c>window.open</c> call, if <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>true</c>.
            </description>
            </item>
            <item>
            <description>
            If <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>true</c>, applications should generally wrap and present the native view in a new popup application
            window. This window should have the size and location specified in <see cref="P:Awesomium.Core.JSWindowOpenSpecs.InitialPosition"/>, <b>if this is not
            empty</b>. They should also respect the rest of the specs available through <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/>, when creating
            the new application window that will host the child view.
            <note>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> is <c>true</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> is always also <c>true</c>.
            </note>
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> will only be <c>true</c>, if <i>specs</i> were specified to the <c>window.open</c> call. These can be
            standard specs such as <c>width=400,height=400,menubar=no</c>, only user defined, non-standard specs such as <c>background=black</c>
            or a combination of both. These specs are available through the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/> property.
            </description>
            </item>
            <item>
            <description>
            If only user defined, non-standard <i>specs</i> were specified to the <c>window.open</c> call, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsUserSpecsOnly"/> will
            be <c>true</c>. In this scenario, if your application does not recognize user defined, non-standard specs, it can ignore the 
            value of <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPopup"/> all together and wrap the new child view in a regular new application window, tab or control.
            </description>
            </item>
            <item>
            <description>
            When <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsPost"/> is <c>true</c>, <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.PostData"/> returns an array of <see cref="T:Awesomium.Core.UploadElement"/>,
            representing the <i>upload</i> data passed to the <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.TargetURL"/> using <c>POST</c>.
            </description>
            </item>
            <item>
            <description>
            Finally note that only an empty <i>name</i> parameter or a <c>_blank</c> target attribute specified as the <i>name</i> parameter 
            in a <c>window.open</c> call or in a link or <c>form</c>, will fire a <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event. Other target 
            attributes (such as <c>_top</c>), passed to either a <c>window.open</c> call, a link or a <c>form</c>, are handled by Awesomium internally.
            </description>
            </item>
            </list>
            <note type="caution">
            Several members of <see cref="T:Awesomium.Core.ShowCreatedWebViewEventArgs"/>, may not return valid values if Javascript is disabled.
            For details, read the documentation of: <see cref="P:Awesomium.Core.IWebView.IsJavascriptEnabled"/>.
            </note>
            Given the facts and suggestions presented before, if your application is about to wrap the created child view, the following 
            table shows the methods available, to wrap the created child view using any of the <b>Awesomium.NET</b> web-view components:
            <list type="table">
            <listheader>
            <term>
            Technology
            </term>
            <description>
            Method and Notes
            </description>
            </listheader>
            <item>
            <term>
            Core
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            Pass <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/> to <see cref="M:Awesomium.Core.WebView.#ctor(System.IntPtr)"/>
            to wrap the new view with a <see cref="T:Awesomium.Core.WebView"/>.
            </description>
            </item>
            <item>
            <description>
            For <i>windowed</i> views (see <see cref="P:Awesomium.Core.IWebView.ViewType"/>), you should now assign a <see cref="P:Awesomium.Core.WebView.ParentWindow"/>.
            <i>Offscreen</i> views have a <see cref="T:Awesomium.Core.BitmapSurface"/> assigned by default but depending on your application's design,
            you may have to assign a new <see cref="T:Awesomium.Core.ISurface"/> by either monitoring the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event, 
            or setting the <see cref="P:Awesomium.Core.IWebView.Surface"/> property.
            </description>
            </item>
            <item>
            <description>
            Resize the <see cref="T:Awesomium.Core.WebView"/> to match its container.
            </description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>
            WPF
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            Create a new <see cref="T:Awesomium.Windows.Controls.WebControl"/> and assign <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/> to the
            <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/> property.
            <note>
            Note that you should assign the created child view instance to <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/>,
            before the <see cref="T:Awesomium.Windows.Controls.WebControl"/> goes live (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>),
            or else the <see cref="T:Awesomium.Windows.Controls.WebControl"/> will create and wrap a new, underlying web-view instance.
            The appropriate way to do this, is either by binding the <see cref="P:Awesomium.Windows.Controls.WebControl.NativeView"/> property
            in XAML (see examples in the <b>Awesomium.NET Samples</b> solution available with the SDK), or by monitoring the 
            <see cref="E:Awesomium.Windows.Controls.WebControl.InitializeView"/> event, the last fired before the control goes live.
            </note>
            </description>
            </item>
            <item>
            <description>
            Resize the <see cref="T:Awesomium.Windows.Controls.WebControl"/> or its container.
            </description>
            </item>
            </list>
            </description>
            </item>
            <item>
            <term>
            Windows Forms
            </term>
            <description>
            <list type="bullet">
            <item>
            <description>
            Create a new <see cref="T:Awesomium.Windows.Forms.WebControl"/> and assign <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.NewViewInstance"/> to the
            <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/> property.
            <note>
            Note that you should assign the created child view instance to <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/>,
            before the <see cref="T:Awesomium.Windows.Forms.WebControl"/> goes live (see <see cref="P:Awesomium.Windows.Forms.WebControl.IsLive"/>),
            or else the <see cref="T:Awesomium.Windows.Forms.WebControl"/> will create and wrap a new, underlying web-view instance.
            The appropriate way to do this, is either by assigning the <see cref="P:Awesomium.Windows.Forms.WebControl.NativeView"/> property
            right after the <see cref="T:Awesomium.Windows.Forms.WebControl"/> is created (see examples in the <b>Awesomium.NET Samples</b> solution available 
            with the SDK),or by monitoring the <see cref="E:Awesomium.Windows.Forms.WebControl.InitializeView"/> event, the last fired before the control goes live.
            </note>
            </description>
            </item>
            <item>
            <description>
            Resize the <see cref="T:Awesomium.Windows.Forms.WebControl"/> or its container.
            </description>
            </item>
            </list>
            </description>
            </item>
            </list>
            </remarks><example>
            The following example illustrates handling the <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> event in a WPF application that uses
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> controls. In this example, we create a <i>ChildWindow</i> window
            that hosts a <see cref="T:Awesomium.Windows.Controls.WebControl"/>. This window and its hosted <see cref="T:Awesomium.Windows.Controls.WebControl"/>
            will be used to wrap and present the child view passed to <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>, or navigate to the
            target URL, if <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> is the result of a link with <c>target="_blank"</c>.
            <p/>
            Below is the XAML of our <b>ChildWindow</b>.
            <code lang="XAML">
            <![CDATA[
            <Window 
                x:Class="WebControlSample.ChildWindow" 
                x:Name="childWindow"
                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                xmlns:awe="http://schemas.awesomium.com/winfx"
                Title="{Binding Title, ElementName=webControl}" 
                Height="480" 
                Width="600">
                <Window.Resources>
                    <!-- We do not need to set any WebPreferences or DataSources 
                    on this provider. It uses the same DataPath as the provider in
                    MainWindow, therefore, this provider will provide the same session,
                    already created by the WebSessionProvider in MainWindow. -->
                    <awe:WebSessionProvider x:Key="mySession" DataPath=".\Cache" />
                </Window.Resources>
                <Grid>
                    <!-- Note that the WebSession assigned to this WebControl, will
                         be effectively ignored when this WebControl wraps a created
                         child view. Child views share the same session as their parent
                         (opener) view. -->
                    <awe:WebControl 
                        Name="webControl" 
                        WebSession="{Binding Source={StaticResource mySession}}"
                        Source="{Binding Source, ElementName=childWindow}"
                        NativeView="{Binding NativeView, ElementName=childWindow}" />
                </Grid>
            </Window>
            ]]>
            </code>
            This is the code-behind of the <b>ChildWindow</b>:
            <code>
            <![CDATA[
            using System;
            using System.Linq;
            using System.Windows;
            using Awesomium.Core;
            using System.Collections.Generic;
            
            namespace WebControlSample
            {
                /// <summary>
                /// Interaction logic for ChildWindow.xaml
                /// </summary>
                public partial class ChildWindow : Window
                {
                    public ChildWindow()
                    {
                        InitializeComponent();
            
                        // In this example, ShowCreatedWebView of all WebControls, 
                        // is handled by a common handler.
                        webControl.ShowCreatedWebView += App.OnShowNewView;
                    }
            
                    protected override void OnClosed( EventArgs e )
                    {
                        base.OnClosed( e );
            
                        // Destroy the WebControl and its underlying view.
                        webControl.Dispose();
                    }
            
                    // This will be set to the target URL, when this ChildWindow does not
                    // host a created child view. The WebControl, is bound to this property.
                    public Uri Source
                    {
                        get { return this.GetValue( SourceProperty ) as Uri; }
                        set { SetValue( SourceProperty, value ); }
                    }
            
                    public static readonly DependencyProperty SourceProperty = 
                        DependencyProperty.Register( "Source",
                        typeof( Uri ), typeof( ChildWindow ),
                        new UIPropertyMetadata( null ) );
            
                    // This will be set to the created child view that the WebControl will wrap,
                    // when ShowCreatedWebView is the result of 'window.open'. The WebControl, 
                    // is bound to this property.
                    public IntPtr NativeView
                    {
                        get { return (IntPtr)this.GetValue( ChildWindow.NativeViewProperty ); }
                        internal set { this.SetValue( ChildWindow.NativeViewPropertyKey, value ); }
                    }
            
                    private static readonly DependencyPropertyKey NativeViewPropertyKey = 
                        DependencyProperty.RegisterReadOnly( "NativeView",
                        typeof( IntPtr ), typeof( ChildWindow ),
                        new FrameworkPropertyMetadata( IntPtr.Zero ) );
            
                    public static readonly DependencyProperty NativeViewProperty =
                        NativeViewPropertyKey.DependencyProperty;
            
                }
            }
            ]]>
            </code>
            <code lang="VB.NET">
            <![CDATA[
            Imports System
            Imports System.Linq
            Imports System.Windows
            Imports Awesomium.Core
            Imports System.Collections.Generic
            
            Namespace WebControlSample
                ''' <summary>
                ''' Interaction logic for ChildWindow.xaml
                ''' </summary>
                Partial Public Class ChildWindow
                    Inherits Window
            
                    Public Sub New()
                        InitializeComponent()
            
                        ' In this example, ShowCreatedWebView of all WebControls, 
                        ' is handled by a common handler.
                        AddHandler webControl.ShowCreatedWebView AddressOf App.OnShowNewView
                    End Sub
            
                    Protected Overrides Sub OnClosed(ByVal e As EventArgs)
                        MyBase.OnClosed(e)
            
                        ' Destroy the WebControl and its underlying view.
                        webControl.Dispose()
                    End Sub
            
                    ' This will be set to the target URL, when this ChildWindow does not
                    ' host a created child view. The WebControl, is bound to this property.
                    Public Property Source() As Uri
                        Get
                            Return TryCast(Me.GetValue(SourceProperty), Uri)
                        End Get
                        Set(ByVal value As Uri)
                            SetValue(SourceProperty, value)
                        End Set
                    End Property
            
                    Public Shared ReadOnly SourceProperty As DependencyProperty =
                        DependencyProperty.Register("Source", GetType(Uri),
                        GetType(ChildWindow), New UIPropertyMetadata(Nothing))
            
                    ' This will be set to the created child view that the WebControl will wrap,
                    ' when ShowCreatedWebView is the result of 'window.open'. The WebControl, 
                    ' is bound to this property.
                    Public Property NativeView() As IntPtr
                        Get
                            Return CType(Me.GetValue(ChildWindow.NativeViewProperty), IntPtr)
                        End Get
                        Friend Set(ByVal value As IntPtr)
                            Me.SetValue(ChildWindow.NativeViewPropertyKey, value)
                        End Set
                    End Property
            
                    Private Shared ReadOnly NativeViewPropertyKey As DependencyPropertyKey =
                        DependencyProperty.RegisterReadOnly("NativeView", GetType(IntPtr),
                        GetType(ChildWindow), New FrameworkPropertyMetadata(IntPtr.Zero))
            
                    Public Shared ReadOnly NativeViewProperty As DependencyProperty =
                        NativeViewPropertyKey.DependencyProperty
                End Class
            End Namespace
            ]]>
            </code>
            Below is the common <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/> handler, defined in our <see cref="T:System.Windows.Application"/> object
            code-behind:
            <code>
            <![CDATA[
            using System;
            using System.Linq;
            using System.Windows;
            using Awesomium.Core;
            using System.Collections.Generic;
            using Awesomium.Windows.Controls;
            
            namespace WebControlSample
            {
                /// <summary>
                /// Interaction logic for App.xaml
                /// </summary>
                public partial class App : Application
                {
                    private void Application_Exit( object sender, ExitEventArgs e )
                    {
                        // Shutdown the Core.
                        WebCore.Shutdown();
                    }
            
                    // This static handler, will handle the ShowCreatedWebView event for both the 
                    // WebControl of our main application window, as well as for any other windows
                    // hosting WebControls.
                    internal static void OnShowNewView( object sender, ShowCreatedWebViewEventArgs e )
                    {
                        WebControl webControl = sender as WebControl;
            
                        if ( webControl == null )
                            return;
            
                        if ( !webControl.IsLive )
                            return;
            
                        // Create an instance of our application's child window, that will
                        // host the new view instance, either we wrap the created child view,
                        // or we let the WebControl create a new underlying web-view.
                        ChildWindow newWindow  = new ChildWindow();
            
                        // Treat popups differently. If IsPopup is true, the event is always
                        // the result of 'window.open' (IsWindowOpen is also true, so no need to check it).
                        // Our application does not recognize user defined, non-standard specs. 
                        // Therefore child views opened with non-standard specs, will not be presented as 
                        // popups but as regular new windows (still wrapping the child view however -- se below).
                        if ( e.IsPopup && !e.IsUserSpecsOnly )
                        {
                            // JSWindowOpenSpecs.InitialPosition indicates screen coordinates.
                            Int32Rect screenRect = e.Specs.InitialPosition.GetInt32Rect();
            
                            // Set the created native view as the underlying view of the
                            // WebControl. This will maintain the relationship between
                            // the parent view and the child, usually required when the new view
                            // is the result of 'window.open' (JS can access the parent window through
                            // 'window.opener'; the parent window can manipulate the child through the 'window'
                            // object returned from the 'window.open' call).
                            newWindow.NativeView = e.NewViewInstance;
                            // Do not show in the taskbar.
                            newWindow.ShowInTaskbar = false;
                            // Set a border-style to indicate a popup.
                            newWindow.WindowStyle = System.Windows.WindowStyle.ToolWindow;
                            // Set resizing mode depending on the indicated specs.
                            newWindow.ResizeMode = e.Specs.Resizable ? ResizeMode.CanResizeWithGrip : ResizeMode.NoResize;
            
                            // If the caller has not indicated a valid size for the new popup window,
                            // let it be opened with the default size specified at design time.
                            if ( ( screenRect.Width > 0 ) && ( screenRect.Height > 0 ) )
                            {
                                // Assign the indicated size.
                                newWindow.Width = screenRect.Width;
                                newWindow.Height = screenRect.Height;
                            }
            
                            // Show the window.
                            newWindow.Show();
            
                            // If the caller has not indicated a valid position for the new popup window,
                            // let it be opened in the default position specified at design time.
                            if ( ( screenRect.Y > 0 ) && ( screenRect.X > 0 ) )
                            {
                                // Move it to the indicated coordinates.
                                newWindow.Top = screenRect.Y;
                                newWindow.Left = screenRect.X;
                            }
                        }
                        else if ( e.IsWindowOpen || e.IsPost )
                        {
                            // No specs or only non-standard specs were specified, but the event is still 
                            // the result of 'window.open', or of an HTML form with tagret="_blank" and method="post". 
                            // We will open a normal window but we will still wrap the new native child view, 
                            // maintaining its relationship with the parent window.
                            newWindow.NativeView = e.NewViewInstance;
                            // Show the window.
                            newWindow.Show();
                        }
                        else
                        {
                            // The event is not the result of 'window.open' or of an HTML form with tagret="_blank" 
                            // and method="post"., therefore it's most probably the result of a link with target='_blank'.
                            // We will not be wrapping the created view; we let the WebControl hosted in ChildWindow 
                            // create its own underlying view. Setting Cancel to true tells the core to destroy the 
                            // created child view.
                            //
                            // Why don't we always wrap the native view passed to ShowCreatedWebView?
                            //
                            // - In order to maintain the relationship with their parent view,
                            // child views execute and render under the same process (awesomium_process)
                            // as their parent view. If for any reason this child process crashes,
                            // all views related to it will be affected. When maintaining a parent-child 
                            // relationship is not important, we prefer taking advantage of the isolated process 
                            // architecture of Awesomium and let each view be rendered in a separate process.
                            e.Cancel = true;
                            // Note that we only explicitly navigate to the target URL, when a new view is 
                            // about to be created, not when we wrap the created child view. This is because 
                            // navigation to the target URL (if any), is already queued on created child views. 
                            // We must not interrupt this navigation as we would still be breaking the parent-child
                            // relationship.
                            newWindow.Source = e.TargetURL;
                            // Show the window.
                            newWindow.Show();
                        }
                    }
                }
            }
            ]]>
            </code>
            <code lang="VB">
            <![CDATA[
            Imports System
            Imports System.Linq
            Imports System.Windows
            Imports Awesomium.Core
            Imports System.Collections.Generic
            Imports Awesomium.Windows.Controls
            
            Namespace WebControlSample
            	''' <summary>
            	''' Interaction logic for App.xaml
            	''' </summary>
            	Partial Public Class App
            		Inherits Application
            
            		Private Sub Application_Exit(ByVal sender As Object, ByVal e As ExitEventArgs)
            			' Shutdown the Core.
            			WebCore.Shutdown()
            		End Sub
            
            		' This static handler, will handle the ShowCreatedWebView event for both the 
            		' WebControl of our main application window, as well as for any other windows
            		' hosting WebControls.
            		Friend Shared Sub OnShowNewView(ByVal sender As Object, ByVal e As ShowCreatedWebViewEventArgs)
            			Dim webControl As WebControl = TryCast(sender, WebControl)
            
            			If webControl Is Nothing Then Return
            
            			If Not webControl.IsLive Then Return
            
            			' Create an instance of our application's child window, that will
            			' host the new view instance, either we wrap the created child view,
            			' or we let the WebControl create a new underlying web-view.
            			Dim newWindow As New ChildWindow()
            
            			' Treat popups differently. If IsPopup is true, the event is always
            			' the result of 'window.open' (IsWindowOpen is also true, so no need to check it).
            			' Our application does not recognize user defined, non-standard specs. 
            			' Therefore child views opened with non-standard specs, will not be presented as 
            			' popups but as regular new windows (still wrapping the child view however -- se below).
            			If e.IsPopup AndAlso (Not e.IsUserSpecsOnly) Then
            				' JSWindowOpenSpecs.InitialPosition indicates screen coordinates.
            				Dim screenRect As Int32Rect = e.Specs.InitialPosition.GetInt32Rect()
            
            				' Set the created native view as the underlying view of the
            				' WebControl. This will maintain the relationship between
            				' the parent view and the child, usually required when the new view
            				' is the result of 'window.open' (JS can access the parent window through
            				' 'window.opener'; the parent window can manipulate the child through the 'window'
            				' object returned from the 'window.open' call).
            				newWindow.NativeView = e.NewViewInstance
            				' Do not show in the taskbar.
            				newWindow.ShowInTaskbar = False
            				' Set a border-style to indicate a popup.
            				newWindow.WindowStyle = System.Windows.WindowStyle.ToolWindow
            				' Set resizing mode depending on the indicated specs.
            				newWindow.ResizeMode = If(e.Specs.Resizable, ResizeMode.CanResizeWithGrip, ResizeMode.NoResize)
            
            				' If the caller has not indicated a valid size for the new popup window,
            				' let it be opened with the default size specified at design time.
            				If (screenRect.Width > 0) AndAlso (screenRect.Height > 0) Then
            					' Assign the indicated size.
            					newWindow.Width = screenRect.Width
            					newWindow.Height = screenRect.Height
            				End If
            
            				' Show the window.
            				newWindow.Show()
            
            				' If the caller has not indicated a valid position for the new popup window,
            				' let it be opened in the default position specified at design time.
            				If (screenRect.Y > 0) AndAlso (screenRect.X > 0) Then
            					' Move it to the indicated coordinates.
            					newWindow.Top = screenRect.Y
            					newWindow.Left = screenRect.X
            				End If
            			ElseIf (e.IsWindowOpen OrElse e.IsPost) Then
            				' No specs or only non-standard specs were specified, but the event is still 
            				' the result of 'window.open' or of an HTML form with tagret="_blank" and method="post".
            				' We will open a normal window but we will still wrap the new native child view, 
            				' maintaining its relationship with the parent window.
            				newWindow.NativeView = e.NewViewInstance
            				' Show the window.
            				newWindow.Show()
            			Else
            				' The event is not the result of 'window.open' or of an HTML form with tagret="_blank" 
            				' and method="post"., therefore it's most probably the result of a link with target='_blank'.
            				' We will not be wrapping the created view; we let the WebControl hosted in ChildWindow 
            				' create its own underlying view. Setting Cancel to true tells the core to destroy the 
            				' created child view.
            				'
            				' Why don't we always wrap the native view passed to ShowCreatedWebView?
            				'
            				' - In order to maintain the relationship with their parent view,
            				' child views execute and render under the same process (awesomium_process)
            				' as their parent view. If for any reason this child process crashes,
            				' all views related to it will be affected. When maintaining a parent-child 
            				' relationship is not important, we prefer taking advantage of the isolated process 
            				' architecture of Awesomium and let each view be rendered in a separate process.
            				e.Cancel = True
            				' Note that we only explicitly navigate to the target URL, when a new view is 
            				' about to be created, not when we wrap the created child view. This is because 
            				' navigation to the target URL (if any), is already queued on created child views. 
            				' We must not interrupt this navigation as we would still be breaking the parent-child
            				' relationship.
            				newWindow.Source = e.TargetURL
            				' Show the window.
            				newWindow.Show()
            			End If
            		End Sub
            	End Class
            End Namespace
            ]]>
            </code>
            For the complete sample, see the <b>C# WebControlSample</b> of the <b>Awesomium.NET Samples</b> solution, available with the SDK.
            </example><seealso cref="T:Awesomium.Core.ShowCreatedWebViewEventArgs"/><seealso cref="T:Awesomium.Core.JSWindowOpenSpecs"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.DocumentReady">
            <summary>
            Occurs when the DOM has finished parsing and the
            <c>window</c> object is available for JavaScript execution.
            </summary><seealso cref="E:Awesomium.Core.IWebView.ProcessCreated"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.LoadingFrame">
            <summary>
            Occurs when the page begins loading a frame.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.LoadingFrameFailed">
            <summary>
            Occurs when a frame fails to load. See <see cref="P:Awesomium.Core.LoadingFrameFailedEventArgs.ErrorDescription"/>
            for additional information.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.LoadingFrameComplete">
            <summary>
            Occurs when the page finishes loading a frame.
            </summary><remarks>
            The main frame usually finishes loading last for a given page load.
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.SelectLocalFiles">
            <summary>
            Occurs when the page requests to display a file chooser
            dialog. This is usually the result of a user clicking on an HTML
            input element with <c>type='file'</c>.
            </summary><remarks>
            <h4>Default Handling</h4>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event is handled, 
            when <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            No default handling is provided for the <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/>. If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> 
            is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default), the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined dialog.
            </description>
            </item>
            </list>
            <h4>Application Handling</h4>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event either <b>modally</b> or <b>non-modally</b>. 
            <b>Only default or modal handling is officially supported by Awesomium.NET</b>.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFiles"/> or 
            <see cref="P:Awesomium.Core.FileDialogEventArgs.SelectedFile"/> property, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported by Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/>.
            <note type="caution">
            This technique is not officially supported by Awesomium.NET. Therefore, the above <see cref="T:Awesomium.Core.IWebView"/>
            member, is not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            </note>
            <note type="caution">
            If you set <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> to <see cref="F:Awesomium.Core.EventHandling.NotModal"/>, 
            you should make sure that you always call <see cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/> providing a response to the event.
            No new <see cref="E:Awesomium.Core.IWebView.SelectLocalFiles"/> events will occur, until a response has been provided for the last one.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.FileDialogEventArgs.Handled"/> (or of any other member), is ignored.
            </note>
            </remarks><seealso cref="M:Awesomium.Core.IWebView.DidChooseFiles(System.String[],System.Boolean)"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.LoginRequest">
            <summary>
            Occurs when the page needs authentication from the user (for
            example, Basic HTTP Auth, NTLM Auth, etc.).
            </summary><remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event is handled, 
            when <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
             No default handling is provided for the <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/>. If <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>
            is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default), the event is immediately canceled.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined UI.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event either
            modally or non-modally. <b>Only default or modal handling is officially supported in Awesomium.NET</b>.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.LoginRequest"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.LoginRequestEventArgs.Username"/> and
            <see cref="P:Awesomium.Core.LoginRequestEventArgs.Password"/> properties, before the event handler exits.
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported in Awesomium.NET)
            </term>
            <description>
            No response will be provided for the request. Developers should later provide
            a response themselves using any of the following methods:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.Login(System.Int32,System.String,System.String)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CancelLogin(System.Int32)"/>
            </description>
            </item>
            </list>
            <note type="caution">
            This technique is not officially supported in Awesomium.NET. Therefore, the members
            above are not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            </note>
            </description>
            </item>
            </list>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.LoginRequestEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks><seealso cref="M:Awesomium.Core.IWebView.Login(System.Int32,System.String,System.String)"/><seealso cref="M:Awesomium.Core.IWebView.CancelLogin(System.Int32)"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.CertificateError">
            <summary>
            Occurs when an SSL certificate error is encountered while attempting to navigate
            to a new address.
            </summary><remarks>
            The table below presents the way the <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event is handled, 
            when <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default):
            <list type="table">
            <listheader>
            <term>
            Wrapper
            </term>
            <description>
            Behavior
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            No default handling is provided for the <i>windowless</i> <see cref="T:Awesomium.Core.WebView"/>. If <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/>
            is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default), navigation to the <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Url"/> will be canceled
            due to the SLL certificate error.
            </description>
            </item>
            <item>
            <term>
            Technology specific <c>WebControls</c>.
            </term>
            <description>
            If <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/> is set to <see cref="F:Awesomium.Core.EventHandling.Default"/> (default),
            controls will display their predefined UI.
            </description>
            </item>
            </list>
            Applications can handle the <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event either
            modally or non-modally. <b>Only default or modal handling is officially supported in Awesomium.NET</b>.
            <p/>
            The table below shows the methods of handling the <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event:
            <list type="table">
            <listheader>
            <term>
            Setting
            </term>
            <description>
            Handling
            </description>
            </listheader>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.Modal"/>
            </term>
            <description>
            Developers should provide a response through the <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Ignore"/> property, 
            <b>before</b> the event handler exits.
            <note type="caution">
            The error should only be ignored, if <see cref="P:Awesomium.Core.CertificateErrorEventArgs.IsOverridable"/> is <c>true</c>.
            </note>
            </description>
            </item>
            <item>
            <term>
            <see cref="F:Awesomium.Core.EventHandling.NotModal"/> (Not officially supported in Awesomium.NET)
            </term>
            <description>
            No response will be provided for the error and navigation to <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Url"/>
            will be canceled, unless you call <see cref="M:Awesomium.Core.IWebView.DidOverrideCertificateError"/>.
            <note type="caution">
            This technique is not officially supported in Awesomium.NET. Therefore, the member
            above is not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access this method.
            </note>
            <note type="caution">
            The error should only be ignored, if <see cref="P:Awesomium.Core.CertificateErrorEventArgs.IsOverridable"/> is <c>true</c>.
            </note>
            </description>
            </item>
            </list>
            </remarks><seealso cref="M:Awesomium.Core.IWebView.DidOverrideCertificateError"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.PrintRequest">
            <summary>
            Occurs when the page requests to print itself. (Usually
            the result of <c>window.print()</c> being called from JavaScript.) It is
            your responsibility to print the view to a file and handle the
            actual device printing.
            </summary><seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/><seealso cref="E:Awesomium.Core.IWebView.Printing"/><seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/><seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/><seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.PrintFailed">
            <summary>
            Occurs when <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/> fails. Typically because of
            bad printer configuration or invalid output path (see <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/>).
            </summary><seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/><seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/><seealso cref="E:Awesomium.Core.IWebView.Printing"/><seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/><seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.PrintComplete">
            <summary>
            Occurs when a <see cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/> operation, completes successfully.
            </summary><seealso cref="M:Awesomium.Core.IWebView.PrintToFile(System.String,Awesomium.Core.PrintConfig)"/><seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/><seealso cref="P:Awesomium.Core.IWebView.IsPrinting"/><seealso cref="E:Awesomium.Core.IWebView.Printing"/><seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ShowPopupMenu">
            <summary>
            Occurs when the page requests to display a drop-down
            (popup) menu. This is usually the result of a user clicking on
            a <c>select</c> HTML input element.
            </summary><remarks>
            By default, technology specific <c>WebControls</c> provide
            their own drop-down (popup) menus. If you wish to prevent the
            control from displaying its own menu and handle the event yourself,
            set <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> to <c>true</c> and then
            use any of the following methods to respond to the view:
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.SelectPopupMenuItem(System.Int32)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CancelPopupMenu"/>
            </description>
            </item>
            </list>
            These members are not directly available through the predefined <see cref="T:Awesomium.Core.IWebView"/> wrappers.
            You will have to cast the wrapper to <see cref="T:Awesomium.Core.IWebView"/>, to access these members.
            <p/>
            Optionally, you can easily cancel or select an item by using:
            <see cref="M:Awesomium.Core.WebPopupMenuInfo.Cancel"/> or
            <see cref="M:Awesomium.Core.WebPopupMenuInfo.Select(System.Int32)"/>.
            <note>
            The windowless <see cref="T:Awesomium.Core.WebView"/>, does not provide any internal implementation for drop-down (popup) menus.
            If you are using a <see cref="T:Awesomium.Core.WebView"/> instance with your UI application, you will have to handle
            the <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/> event yourself. Technology specific Awesomium.NET assemblies,
            provide predefined drop-down (popup) menu controls that you can use with your WPF or Windows Forms application.
            </note>
            <note>
            Note that <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> always takes precedence over <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/>.
            If <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <c>true</c>, the request will be canceled immediately and the
            value of <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> (or any other member), is ignored.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ShowContextMenu">
            <summary>
            Occurs when the page requests to display a context menu. 
            This is usually the result of a user right-clicking on
            an element or plugin in the page.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ShowPageInfo">
            <summary>
            Occurs in response to a <see cref="M:Awesomium.Core.IWebView.RequestPageInfo"/>
            call, requesting for the page's security related information.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ResponsiveChanged">
            <summary>
            Occurs when this view's process hangs, or becomes responsive after
            a hang. Use <see cref="P:Awesomium.Core.ResponsiveChangedEventArgs.IsResponsive"/> or
            <see cref="P:Awesomium.Core.IWebView.IsResponsive"/> to check the current state of the process.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.Crashed">
            <summary>
            Occurs when this view's process crashes.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.Disposed">
            <summary>
            Occurs when an instance of this class has been disposed.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.InternalCoercion">
            <summary>
            Set to <c>true</c> when a Coercer is fired internally in response
            to a <see cref="M:Awesomium.Windows.Controls.WebControl.RaisePropertyChanged(System.String,System.Int32)"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.CanRecreateView">
            <summary>
            Gets if this control wraps a previously crashed
            view that can be recreated.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.NativeWindow">
            <summary>
            Gets the actual window handle that was created by this <see cref="T:Awesomium.Core.IWebView"/> instance.
            This is only valid for windowed <see cref="T:Awesomium.Core.IWebView"/> instances (see <see cref="F:Awesomium.Core.WebViewType.Window"/>).
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ParentWindow">
            <summary>
            Gets or sets the parent window for this <see cref="T:Awesomium.Core.IWebView"/> instance. This is only valid
            for windowed <see cref="T:Awesomium.Core.IWebView"/> instances (see <see cref="F:Awesomium.Core.WebViewType.Window"/>),
            on the Windows platform.
            </summary><remarks>
            <note type="caution">
            When you use a <see cref="T:Awesomium.Core.WebView"/>, you should call this method immediately after calling 
            <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession,Awesomium.Core.WebViewType)"/>. The window for this <see cref="T:Awesomium.Core.IWebView"/> instance
            will not be created until you set <see cref="P:Awesomium.Core.IWebView.ParentWindow"/>, on the Windows platform.
            </note>
            <note>
            Technology specific <c>WebControls</c>, take care of this internally. Once set and the underlying
            window for this <see cref="T:Awesomium.Core.IWebView"/> instance has been created, this property cannot be changed.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.Presenter">
            <summary>
            Gets or sets an <see cref="T:Awesomium.Core.IWebView"/> presentation control that will receive
            requests for UI related events.
            </summary><remarks>
            Members of the <see cref="T:Awesomium.Core.IWebViewPresenter"/> interface are used by views to propagate
            UI related requests that they cannot handle by themselves. For example, the <i>windowless</i>
            <see cref="T:Awesomium.Core.WebView"/> does not handle any UI related events itself. If an <see cref="T:Awesomium.Core.IWebViewPresenter"/>
            has been assigned to the <see cref="P:Awesomium.Core.IWebView.Presenter"/> property, those requests will be propagated to
            the presentation control, unless previously handled by a relative event handler.
            <note>
            When used with an <i>offscreen</i> <see cref="T:Awesomium.Core.WebView"/>, an instance of <see cref="T:Awesomium.Core.IWebViewPresenter"/> that also
            implements <see cref="T:Awesomium.Core.ISurface"/>, will be used as the view's default surface, as long as it has
            been assigned to <see cref="P:Awesomium.Core.WebView.Presenter"/> immediately after the creation of the <see cref="T:Awesomium.Core.WebView"/>.
            </note>
            <h4>Usage in WPF</h4>
            The <see cref="T:Awesomium.Core.IWebViewPresenter"/> interface is extensively used in WPF. <see cref="T:Awesomium.Core.IWebView"/> 
            presentation controls are used in the visual tree when styling a WPF 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>. These can be custom WPF surfaces
            implementing <see cref="T:Awesomium.Core.ISurface"/> (for offscreen views) or any other control providing custom 
            presentation of a <see cref="T:Awesomium.Core.IWebView"/> instance.
            <p/>
            When the custom control is added to the visual tree and loaded for presentation, 
            the <see cref="T:Awesomium.Core.IWebView"/> instance (typically, a WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/>)
            uses the <see cref="T:Awesomium.Core.IWebViewPresenter"/> interface to communicate with the 
            presentation control.
            <p/>
            <c>Awesomium.Windows.Controls</c> already provides 2 such presenters:
            <list type="table">
            <listheader>
            <term>Presentation Control</term>
            <description>Usage (by the default style)</description>
            </listheader>
            <item>
            <term><see cref="T:Awesomium.Windows.Controls.WebViewPresenter"/></term>
            <description>
            Used when <see cref="T:Awesomium.Windows.Controls.WebControl.ViewType"/> is set to 
            <see cref="F:Awesomium.Core.WebViewType.Offscreen"/> (default). This is an <see cref="T:Awesomium.Core.ISurface"/> component that 
            uses 100% WPF logic to copy the view's pixel buffer to a bitmap that it then renders for presentation.
            </description>
            </item>
            <item>
            <term><see cref="T:Awesomium.Windows.Controls.WebViewHost"/></term>
            <description>
            This is an <see cref="T:System.Windows.Interop.HwndHost"/> that is used when 
            <see cref="T:Awesomium.Windows.Controls.WebControl.ViewType"/> is set to <see cref="F:Awesomium.Core.WebViewType.Window"/>.
            For more details, read the documentation of <see cref="T:Awesomium.Windows.Controls.WebViewHost"/>.
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="T:Awesomium.Core.IWebViewPresenter"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ContextMenuResourceKey">
            <summary>
            Gets the resource key for the context menu of a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            This can be used to override the default context menu.
            </remarks>
            <seealso cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ContextMenuPageItemsArrayRecourceKey">
            <summary>
            Gets the resource key for an array of items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when you right-click on a 
            page that has no selection and no keyboard focus.
            </summary>
            <remarks>
            <para>
            You can use this resource key to override the items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when you right-click on a 
            page that has no selection and no keyboard focus.
            </para>
            <note>
            If you only wish to add items to the predefined ones, keep in mind that you
            have to redefine all the items of the array.
            </note>
            </remarks>
            <example>
            The default-predefined array in XAML is:
            <code lang="XAML">
            <![CDATA[
            <x:Array x:Key="{x:Static awe:WebControl.ContextMenuPageItemsArrayRecourceKey}" Type="{x:Type DependencyObject}">
                <MenuItem Command="BrowseBack" />
                <MenuItem Command="BrowseForward" />        
                <MenuItem Command="Refresh" />
                <Separator />
                <MenuItem Command="Print" />
                <Separator />
                <MenuItem Command="SelectAll" />
            </x:Array>
            ]]>
            </code>
            </example>
            <seealso cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ContextMenuInputItemsArrayRecourceKey">
            <summary>
            Gets the resource key for an array of items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when the control has keyboard focus.
            </summary>
            <remarks>
            <para>
            You can use this resource key to override the items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when the control has keyboard focus.
            </para>
            <note>
            If you only wish to add items to the predefined ones, keep in mind that you
            have to redefine all the items of the array.
            </note>
            </remarks>
            <example>
            The default-predefined array in XAML is:
            <code lang="XAML">
            <![CDATA[
            <x:Array x:Key="{x:Static awe:WebControl.ContextMenuInputItemsArrayRecourceKey}" Type="{x:Type DependencyObject}">
                <MenuItem Command="Copy" />
                <MenuItem Command="Cut" />        
                <MenuItem Command="Paste" />
                <Separator />
                <MenuItem Command="SelectAll" />
            </x:Array>
            ]]>
            </code>
            </example>
            <seealso cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ContextMenuSelectionItemsArrayRecourceKey">
            <summary>
            Gets the resource key for an array of items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when a range of content in the page 
            is currently selected.
            </summary>
            <remarks>
            <para>
            You can use this resource key to override the items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when a range of content in the page 
            is currently selected.
            </para>
            <note>
            If you only wish to add items to the predefined ones, keep in mind that you
            have to redefine all the items of the array.
            </note>
            </remarks>
            <example>
            The default-predefined array in XAML is:
            <code lang="XAML">
            <![CDATA[
            <x:Array x:Key="{x:Static awe:WebControl.ContextMenuSelectionItemsArrayRecourceKey}" Type="{x:Type DependencyObject}">
                <MenuItem Command="Copy" />
                <MenuItem Command="{x:Static awe:WebControlCommands.CopyHTML}" />
                <Separator />
            </x:Array>
            ]]>
            </code>
            </example>
            <seealso cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ContextMenuImageItemsArrayRecourceKey">
            <summary>
            Gets the resource key for an array of items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when you right-click on an image in a page.
            </summary>
            <remarks>
            <para>
            You can use this resource key to override the items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when you right-click on an image in a page.
            </para>
            <note>
            If you only wish to add items to the predefined ones, keep in mind that you
            have to redefine all the items of the array.
            </note>
            </remarks>
            <example>
            The default-predefined array in XAML is:
            <code lang="XAML">
            <![CDATA[
            <x:Array x:Key="{x:Static awe:WebControl.ContextMenuImageItemsArrayRecourceKey}" Type="{x:Type DependencyObject}">
                <MenuItem Command="{x:Static awe:WebControlCommands.CopyImage}" />
                <Separator />
            </x:Array>
            ]]>
            </code>
            </example>
            <seealso cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ContextMenuLinkItemsArrayRecourceKey">
            <summary>
            Gets the resource key for an array of items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when you right-click on a link in a page.
            </summary>
            <remarks>
            <para>
            You can use this resource key to override the items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when you right-click on a link in a page.
            </para>
            <note>
            If you only wish to add items to the predefined ones, keep in mind that you
            have to redefine all the items of the array.
            </note>
            </remarks>
            <example>
            The default-predefined array in XAML is:
            <code lang="XAML">
            <![CDATA[
            <x:Array x:Key="{x:Static awe:WebControl.ContextMenuLinkItemsArrayRecourceKey}" Type="{x:Type DependencyObject}">
                <MenuItem Command="{x:Static awe:WebControlCommands.CopyLinkAddress}" />
                <Separator />
            </x:Array>
            ]]>
            </code>
            </example>
            <seealso cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ContextMenuSourceItemsArrayRecourceKey">
            <summary>
            Gets the resource key for an array of items in the context menu,
            when <see cref="P:Awesomium.Windows.Controls.WebControl.IsSourceView"/> is <c>true</c>.
            </summary>
            <remarks>
            <para>
            You can use this resource key to override the items that appear in the context menu,
            when <see cref="P:Awesomium.Windows.Controls.WebControl.IsSourceView"/> is <c>true</c>.
            </para>
            <note>
            If you only wish to add items to the predefined ones, keep in mind that you
            have to redefine all the items of the array.
            </note>
            </remarks>
            <example>
            The default-predefined array in XAML is:
            <code lang="XAML">
            <![CDATA[
            <x:Array x:Key="{x:Static awe:WebControl.ContextMenuSourceItemsArrayRecourceKey}" Type="{x:Type DependencyObject}">
                <MenuItem Command="BrowseBack" />
                <MenuItem Command="BrowseForward" />        
                <MenuItem Command="Refresh" />
                <Separator />
                <MenuItem Command="Print" />
                <Separator />
                <MenuItem Command="SelectAll" />
            </x:Array>
            ]]>
            </code>
            </example>
            <seealso cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ToolTipResourceKey">
            <summary>
            Gets the resource key for the tool-tip of a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            This can be used to override the default tool-tip.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.PopupMenuResourceKey">
            <summary>
            Gets the resource key for the drop-down (popup) menu of a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            This can be used to override the default drop-down (popup) menu.
            </remarks>
            <seealso cref="T:Awesomium.Windows.Controls.WebPopupMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsDisposed">
            <summary>
            Gets if this <see cref="T:Awesomium.Core.IWebView"/> wrapper and its underlying
            web-view, have been disposed.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsLive">
            <summary>
            Gets if the native web-view, is alive.
            </summary><returns>
            A <see cref="T:System.Boolean"/> value indicating if the native web-view, 
            is alive. <c>False</c> indicates that the native web-view is:
            <list type="bullet">
            <item>
            <description>
            Crashed (see <see cref="P:Awesomium.Core.IWebView.IsCrashed"/>).
            <note>
            When crashed, technology specific <c>WebControls</c> will attempt 
            to recreate the underlying view.
            For details, see: <see cref="P:Awesomium.Core.IWebView.IsCrashed"/>.
            </note>
            </description>
            </item>
            <item>
            <description>
            Prematurely destroyed (eg, using <see cref="M:Awesomium.Windows.Controls.WebControl.Dispose"/>).
            </description>
            </item>
            <item>
            <description>
            Not properly instantiated. This means that something went wrong
            during instantiation of either the <see cref="T:Awesomium.Core.WebCore"/> (if this
            is the first view created) or of the native web-view.
            </description>
            </item>
            </list>
            </returns><remarks>
            Developers should always check this property before calling <see cref="T:Awesomium.Core.IWebView"/>
            members. Trying to access the native web-view when it is not alive, 
            can throw an <see cref="T:System.InvalidOperationException"/>.
            <p/>
            For more details, refer to the documentation of view members.
            <p/>
            <note>
            This property also returns <c>false</c> when technology specific <c>WebControls</c>
            are shown in a designer. The Awesomium <see cref="T:Awesomium.Core.WebCore"/> and the native web-view, 
            are only instantiated during runtime.
            </note>
            </remarks><example>
            <code>
            private void toolStripButton2_Click( object sender, EventArgs e )
            {
                if ( !webControl.IsLive )
                    return;
                    
                webControl.GoForward();
            }
            </code>
            <code lang="VB">
            Private Sub ToolStripButton2_Click( sender As Object, e As EventArgs ) Handles ToolStripButton2.Click
                If Not m_WebControl.IsLive Then Return
                    
                m_WebControl.GoForward()
            End Sub
            </code>
            </example>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsProcessCreated">
            <summary>
            Indicates if the child rendering process for this view, has been spawned.
            </summary><seealso cref="E:Awesomium.Core.IWebView.ProcessCreated"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.Title">
            <summary>
            Gets the title of the page currently loaded.
            </summary><remarks>
            This property may also reflect navigation progress.
            For details, see <see cref="P:Awesomium.Core.IWebView.NavigationInfo"/>.
            </remarks><seealso cref="P:Awesomium.Core.IWebView.NavigationInfo"/><seealso cref="P:Awesomium.Core.IWebView.HasTitle"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.HasTitle">
            <summary>
            Gets if the currently loaded web-page has a title.
            </summary><seealso cref="P:Awesomium.Core.IWebView.Title"/><seealso cref="E:Awesomium.Core.IWebView.TitleChanged"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsLoading">
            <summary>
            Gets if any page resources are currently being loaded.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsNavigating">
            <summary>
            Gets if the view is currently navigating to a Url.
            </summary><remarks>
            Unlike <see cref="P:Awesomium.Core.IWebView.IsLoading"/> that updates when the actual contents
            of a page are being downloaded, this property is updated when navigation
            starts and updates again when loading completes.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsCrashed">
            <summary>
            Gets if the process of this <see cref="T:Awesomium.Core.IWebView"/> instance, has crashed.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsDocumentReady">
            <summary>
            Gets if the DOM (Document Object Model) for the page being loaded, is ready.
            </summary><remarks>
            This is very useful for executing Javascript on a page before its content has finished loading.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsResponsive">
            <summary>
            Gets if the process of this <see cref="T:Awesomium.Core.IWebView"/> instance, is currently responsive.
            </summary><seealso cref="E:Awesomium.Core.IWebView.ResponsiveChanged"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.TargetURL">
            <summary>
            Gets the target URL indicated by the web-view,
            usually as a result of hovering over a link on the page.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.HasTargetURL">
            <summary>
            Gets if the view is currently indicating a target URL,
            usually as a result of hovering over a link on the page.
            </summary><seealso cref="E:Awesomium.Core.IWebView.TargetURLChanged"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.Selection">
            <summary>
            Gets a <see cref="T:Awesomium.Core.Selection"/> providing information about the current selection range.
            </summary><seealso cref="E:Awesomium.Core.IWebView.SelectionChanged"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.HasSelection">
            <summary>
            Gets if the user has selected content in the current page.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.FocusedElementType">
            <summary>
            Gets the type of the element currently focused in the loaded page.
            </summary><remarks>
            You should generally forward keyboard events to the active <see cref="T:Awesomium.Core.IWebView"/> instance,
            whenever one of the following element types are focused:
            <list type="bullet">
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Input"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.TextInput"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.EditableContent"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="F:Awesomium.Core.FocusedElementType.Plugin"/>
            </description>
            </item>
            </list>
            This is done automatically in technology specific <c>WebControl</c>
            instances.
            </remarks><seealso cref="E:Awesomium.Core.IWebView.FocusChanged"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ToolTipText">
            <summary>
            Gets the tool-tip text currently indicated by the web-view,
            usually as a result of hovering over elements in the page.
            </summary><seealso cref="E:Awesomium.Core.IWebView.ToolTipChanged"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ParentView">
            <summary>
            Gets the parent view (if any) of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            A <see cref="T:Awesomium.Core.IWebView"/> can only have a parent if it is a popup view that
            was created by Awesomium in response to a Javascript <c>window.open</c>.
            <p/>
            For more details, see <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>.
            <note type="caution">
            Be careful when you access members of the parent <see cref="T:Awesomium.Core.IWebView"/> instance.
            The parent may have been destroyed while the this (child) view, is still alive.
            Always check <see cref="P:Awesomium.Core.IWebView.IsLive"/> before accessing members on the parent view,
            to avoid exceptions.
            </note>
            </remarks><seealso cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.LatestContextData">
            <summary>
            Gets the latest web-view context data, usually updated by a right-click in page.
            </summary><returns>
            A <see cref="T:Awesomium.Core.WebContextMenuInfo"/> that represents the latest web-view context data.
            </returns><seealso cref="T:Awesomium.Core.WebContextMenuInfo"/><seealso cref="E:Awesomium.Core.IWebView.ShowContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsRendering">
            <summary>
            Gets if internal asynchronous rendering is currently enabled.
            </summary>
            <remarks>
            All rendering is actually done asynchronously in a separate process
            and so the page is usually continuously rendering internally.
            <note>
            This property is automatically updated by monitoring the control's
            enabled status and it should not be manually set.
            The update occurs in <see cref="M:Awesomium.Windows.Controls.WebControl.OnIsEnabledChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </note>
            <note type="inherit">
            Inheritors can override <see cref="M:Awesomium.Windows.Controls.WebControl.OnIsEnabledChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>,
            then set <see cref="P:Awesomium.Core.IWebView.IsRendering"/> manually if they want to <i>disconnect</i> internal asynchronous 
            rendering, from the control's enabled status.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.TerminationStatus">
            <summary>
            Gets the termination status of this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            This is <see cref="F:Awesomium.Core.TerminationStatus.None"/> if the web-view
            has not been instantiated yet (this can be the case in a technology specific
            <c>WebControl</c>) and <see cref="F:Awesomium.Core.TerminationStatus.StillRunning"/>
            if the web-view process has not been terminated and is still running.
            </remarks><seealso cref="E:Awesomium.Core.IWebView.Crashed"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ProcessId">
            <summary>
            Gets the identifier for the corresponding child-process hosting this
            <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            <note>
            This is not a unique identifier for the <see cref="T:Awesomium.Core.IWebView"/> instance.
            A child, rendering process can host more than one views
            (see <see cref="E:Awesomium.Core.IWebView.ShowCreatedWebView"/>).
            </note>
            <note>
            May return <c>0</c> if the <see cref="T:Awesomium.Core.IWebView"/> instance has crashed 
            or there is no process active (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>).
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.Identifier">
            <summary>
            Gets a unique global identifier for this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            When this <see cref="T:Awesomium.Core.IWebView"/> instance is <i>live</i> (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>),
            this identifier is guaranteed to be unique among all <see cref="T:Awesomium.Core.IWebView"/>
            instances maintained by the <see cref="T:Awesomium.Core.WebCore"/>.
            <note>
            May return <c>0</c> if the <see cref="T:Awesomium.Core.IWebView"/> instance has crashed 
            or there is no process active (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>).
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ProcessHandle">
            <summary>
            Gets the handle for the corresponding child-process hosting this
            <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            This may not be initialized until some time after the
            view is actually created (when we receive the first IPC message
            from the child-process).
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsJavascriptEnabled">
            <summary>
            Gets is Javascript is enabled on this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            Javascript status is defined by setting the <see cref="P:Awesomium.Core.WebPreferences.Javascript"/> property when
            defining the preferences of the <see cref="T:Awesomium.Core.WebSession"/> this view will be member of.
            <p/>
            Javascript is enabled by default when using the default <see cref="T:Awesomium.Core.WebSession"/>,
            or if no preferences or the default preferences have been specified to a custom <see cref="T:Awesomium.Core.WebSession"/>.
            <p/>
            Several features depend on Javascript. The following lists, present <b>features that are not available when Javascript is disabled</b>:
            <h4>Methods</h4>
            <list type="bullet">
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.CreateGlobalJavascriptObject(System.String)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.ExecuteJavascript(System.String)"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="M:Awesomium.Core.IWebView.ExecuteJavascriptWithResult(System.String)"/>
            </description>
            </item>
            </list>
            <note type="caution">
            Attempting to call any of these methods when Javascript is disabled, will throw a <see cref="T:System.InvalidOperationException"/>.
            </note>
            <h4>Events</h4>
            <list type="bullet">
            <item>
            <description>
            <see cref="E:Awesomium.Core.IWebView.SelectionChanged"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="E:Awesomium.Core.IWebView.ShowJavascriptDialog"/>
            </description>
            </item>
            <item>
            <description>
            <see cref="E:Awesomium.Core.IWebView.WindowClose"/>
            </description>
            </item>
            </list>
            <note>
            These events will not be fired when Javascript is disabled.
            </note>
            <h4>Properties</h4>
            <list type="bullet">
            <item>
            <description>
            <see cref="P:Awesomium.Core.IWebView.HasSelection"/> will always return <c>false</c>.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.IWebView.Selection"/> will always return <see cref="F:Awesomium.Core.Selection.Empty"/>.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.IWebView.SynchronousMessageTimeout"/> is ignored.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsWindowOpen"/> will always return <c>false</c>.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.Specs"/> will always return <see cref="F:Awesomium.Core.JSWindowOpenSpecs.Empty"/>.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Awesomium.Core.ShowCreatedWebViewEventArgs.IsUserSpecsOnly"/> will always return <c>false</c>.
            </description>
            </item>
            </list>
            </remarks><seealso cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/><seealso cref="P:Awesomium.Core.WebPreferences.Javascript"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsPrinting">
            <summary>
            Gets if a printing operation is currently in progress.
            </summary><seealso cref="E:Awesomium.Core.IWebView.PrintRequest"/><seealso cref="E:Awesomium.Core.IWebView.Printing"/><seealso cref="E:Awesomium.Core.IWebView.PrintFailed"/><seealso cref="E:Awesomium.Core.IWebView.PrintComplete"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.CurrentCertificateError">
            <summary>
            Gets the SSL certificate error (if any) reported for the
            page currently loaded. The default is <see cref="F:Awesomium.Core.CertError.None"/>.
            </summary><seealso cref="P:Awesomium.Core.IWebView.HasCertificateError"/><seealso cref="E:Awesomium.Core.IWebView.CertificateError"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.HasCertificateError">
            <summary>
            Gets if the page currently loaded has an SSL
            certificate error.
            </summary><seealso cref="P:Awesomium.Core.IWebView.CurrentCertificateError"/><seealso cref="E:Awesomium.Core.IWebView.CertificateError"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.NativeView">
            <summary>
            Gets or sets the handle to the underlying web-view instance.
            </summary>
            <remarks>
            You can use this property to create a wrapper for a web-view that has been internally created by Awesomium.
            Views are created internally by Awesomium for external links that should be opened in a new view, or popup windows
            (See Javascript: <c>window.open</c>).
            <note type="caution">
            Once assigned and the control goes live, this property cannot be changed. Attempting to do so,
            will fail silently.
            </note>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Attempted to wrap a web-view instance that has already been wrapped.
            </exception>
            <seealso cref="E:Awesomium.Windows.Controls.WebControl.ShowCreatedWebView"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.WebSession">
            <summary>
            Gets the session associated with this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><remarks>
            You can create a <see cref="P:Awesomium.Core.IWebView.WebSession"/> with your own preferences (see <see cref="P:Awesomium.Core.WebSession.Preferences"/>),
            using <see cref="M:Awesomium.Core.WebCore.CreateWebSession(Awesomium.Core.WebPreferences)"/>. You can then use this when you create a <see cref="T:Awesomium.Core.WebView"/> instance, 
            by using the <see cref="M:Awesomium.Core.WebCore.CreateWebView(System.Int32,System.Int32,Awesomium.Core.WebSession)"/>
            function.
            <note>
            This property is implemented as a read-write property on technology specific <c>WebControls</c>.
            You can use the setter to specify your <see cref="P:Awesomium.Core.IWebView.WebSession"/>, right after instantiating
            the <c>WebControl</c> or at design time. You cannot change this setting after the control
            has been fully loaded and its underlying web-view, has been created.
            </note>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            You cannot change the value of this property when the underlying web-view of this control, has already been created.
            </exception>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.Surface">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.ISurface"/> instance currently
            assigned to the view.
            </summary><remarks>
            If you are using an <see cref="T:Awesomium.Core.ISurface"/> instance capable of handling changes in
            size, you should use this property to assign it to the view.
            This surface will be used with multiple calls of <see cref="E:Awesomium.Core.IWebView.CreateSurface"/>
            and it should be able to handle changes in size during <see cref="M:Awesomium.Core.ISurface.Initialize(Awesomium.Core.IWebView,System.Int32,System.Int32)"/>.
            In this scenario, you can ignore the <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> event.
            </remarks><seealso cref="E:Awesomium.Core.IWebView.CreateSurface"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsTransparent">
            <summary>
            Gets or sets if pages should be rendered with transparency
            preserved (for ex, for pages with <c>style="background-color: transparent;"</c>)
            </summary><remarks>
            When set to <c>true</c>, the alpha channel is premultiplied. When set to <c>false</c>
            (default), the view will have an opaque, white background.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.Source">
            <summary>
            Gets or sets the URL currently presented by this <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary><returns>
            An absolute <see cref="T:System.Uri"/> representing the URL currently loaded 
            by this <see cref="T:Awesomium.Core.IWebView"/> instance, or <c>null</c> (<c>Nothing</c>
            in Visual Basic) if not set or updated.
            </returns>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.NavigationInfo">
            <summary>
            Gets or sets the navigation info level.
            </summary><returns>
            A <see cref="T:Awesomium.Core.NavigationInfo"/> value indicating
            the level of navigation progress info reflected to the
            <see cref="P:Awesomium.Core.IWebView.Title"/>. The default is <see cref="F:Awesomium.Core.NavigationInfo.Verbose"/>.
            </returns><remarks>
            Navigation progress information is reflected to the control's
            <see cref="P:Awesomium.Core.IWebView.Title"/>:
            <list type="table">
            <listheader>
            <term>Level</term>
            <description>Title Value</description>
            </listheader>
            <item>
            <term><c>"None"</c></term>
            <description><see cref="P:Awesomium.Core.IWebView.Title"/> only reflects the page's title, if any.</description>
            </item>
            <item>
            <term><c>"Normal"</c></term>
            <description><see cref="P:Awesomium.Core.IWebView.Title"/> reflects the page's title as well as "Error" and "Crashed" status.</description>
            </item>
            <item>
            <term><c>"Verbose"</c></term>
            <description>
            <see cref="P:Awesomium.Core.IWebView.Title"/> reflects progress status such as "Navigating..." and "Loading...",
            until the page's title is acquired. Also reflects "Error" and "Crashed" status. (<b>Default</b>)
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ProcessInput">
            <summary>
            Gets or sets the user input that should be processed by a technology specific <c>WebControl</c>.
            The default is <see cref="F:Awesomium.Core.ViewInput.All"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ViewType">
            <summary>
            Gets or sets the type of the underlying <see cref="T:Awesomium.Core.IWebView"/> instance, this control wraps.
            The default value for the WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/>, is <see cref="F:Awesomium.Core.WebViewType.Offscreen"/>.
            </summary>
            <remarks>
            This property defines the presenter that will be used for presenting the underlying
            web-view. For details, read the documentation of <see cref="T:Awesomium.Core.IWebViewPresenter"/>.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.SynchronousMessageTimeout">
            <summary>
            Gets or sets the maximum amount of time (in milliseconds) to wait for a response
            from a synchronous IPC message dispatched to the view's renderer process.
            Default is <c>800</c> (ms). Set this to <c>0</c> to use no timeout.
            </summary><remarks>
            You should increase this if you find that a lot of your synchronous
            method calls keep getting <see cref="F:Awesomium.Core.Error.TimedOut"/> (see <see cref="M:Awesomium.Core.IWebView.GetLastError"/>.
            (Your machine just may be slow at handling IPC calls).
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.Zoom">
            <summary>
            Gets or sets the Zoom percentage for the host currently loaded.
            </summary><remarks>
            <note>
            Zoom amount is saved per hostname. The value of this property is automatically updated
            when the host currently loaded, changes (see: <see cref="E:Awesomium.Core.IWebView.AddressChanged"/> and <see cref="P:Awesomium.Core.IWebView.Source"/>).
            </note>
            <note>
            This operation is asynchronous: the value may not change for several 
            milliseconds after you set this property.
            </note>
            </remarks><exception cref="T:System.ArgumentOutOfRangeException">
            The minimum accepted value, is <c>1</c>.
            </exception><seealso cref="M:Awesomium.Core.IWebView.ZoomIn"/><seealso cref="M:Awesomium.Core.IWebView.ZoomOut"/><seealso cref="M:Awesomium.Core.WebSession.GetZoomForURL(System.Uri)"/><seealso cref="M:Awesomium.Core.IWebView.ResetZoom"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsSourceView">
            <summary>
            Gets if this is a source view that displays the source of
            loaded pages.
            </summary><remarks>
            The following table presents how to create managed web-view components
            that display the source code of loaded pages:
            <list type="table">
            <listheader>
            <term>
            Component
            </term>
            <description>
            Method
            </description>
            </listheader>
            <item>
            <term>
            <see cref="T:Awesomium.Core.WebView"/>
            </term>
            <description>
            Use <see cref="M:Awesomium.Core.WebCore.CreateSourceWebView(System.Int32,System.Int32)"/>.
            </description>
            </item>
            <item>
            <term>
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> (WPF)<br/>
            <see cref="T:Awesomium.Windows.Forms.WebControl"/> (Windows Forms)<br/>
            <see cref="T:Awesomium.Windows.Unity.WebUIComponent"/> (Unity)
            </term>
            <description>
            The <see cref="P:Awesomium.Core.IWebView.IsSourceView"/> property is implemented as read-write
            property on these controls. You have to set the property before
            the control goes <i>live</i> (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>).
            <p/>
            Either:
            <list type="bullet">
            <item>
            <description>
            Set the property at design-time.
            </description>
            </item>
            </list>
            - OR -
            <list type="bullet">
            <item>
            <description>
            Handle the <see cref="E:Awesomium.Core.IWebView.InitializeView"/> event, the last fired
            before the control goes <i>live</i>, to set the property.
            </description>
            </item>
            </list>
            </description>
            </item>
            </list>
            <note>
            You cannot change this property on technology specific web-view controls,
            once they go <i>live</i> (see <see cref="P:Awesomium.Core.IWebView.IsLive"/>).
            </note>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            You cannot change the value of this property when the underlying web-view of this control, has already been created.
            </exception>
        </member>
        <member name="T:Awesomium.Windows.Controls.FileSizeConverter">
            <summary>
            Represents a converter that converts an <see cref="T:System.Int64"/> representing the size of a file in bytes, 
            into a formatted readable string.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.FileSizeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc cref="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.FileSizeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc cref="M:System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/>
        </member>
        <member name="T:Awesomium.Windows.Controls.ContentSpinner">
            <summary>
            Simple control providing content spinning capability.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.ContentSpinner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Awesomium.Windows.Controls.ContentSpinner"/> class.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.ContentSpinner.NumberOfFrames">
            <summary>
            Gets or sets the number of frames per rotation.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.ContentSpinner.RevolutionsPerSecond">
            <summary>
            Gets or sets the number of revolutions per second.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.ContentSpinner.ContentScale">
            <summary>
            Gets or sets the content scale.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.ContentSpinner.Animating">
            <summary>
            Gets or sets if spinner animation is active.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.ContentSpinner.Canvas">
            <summary>
            Select one of the predefined canvases as content or set a custom.
            The default is <see cref="F:Awesomium.Windows.Controls.ContentSpinnerCanvas.Rectangles"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.ContentSpinner.UseKeyFrames">
            <summary>
            Gets or sets if key frames should be used, or a native animation. The default is true.
            </summary>
            <remarks>
            Using key frames allows more control through <see cref="P:Awesomium.Windows.Controls.ContentSpinner.NumberOfFrames"/>.
            </remarks>
        </member>
        <member name="T:Awesomium.Windows.FolderBrowserDialog">
            <summary>
            Provides access to a Vista Common File Dialog in Pick Folder mode, which allows the user
            to select a folder.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebControlDialogLayer">
            <summary>
            Represents a dialog layer displayed over a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            Dialog layers are reusable. They should be created only once
            in the lifetime of the <see cref="T:Awesomium.Windows.Controls.WebViewPresenter"/> they will be used with.
            You should later use the <see cref="M:Awesomium.Windows.Controls.WebControlDialogLayer.Open``1(``0)"/> and <see cref="M:Awesomium.Windows.Controls.WebControlDialogLayer.Close"/>
            methods to show or hide the layer when needed.
            </remarks>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebControlLayer">
            <summary>
            Base class of all control layers associated to a <see cref="T:Awesomium.Windows.Controls.WebViewPresenter"/>.
            </summary>
            <remarks>
            You cannot directly derive from this class. You should instead subclass
            a pre-defined derived class such as <see cref="T:Awesomium.Windows.Controls.WebControlDialogLayer"/>.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlLayer.#ctor(Awesomium.Windows.Controls.WebViewPresenter)">
            <summary>
            Creates an instance of <see cref="T:Awesomium.Windows.Controls.WebControlDialogLayer"/>.
            </summary>
            <param name="parent">
            Indicated the parent <see cref="T:Awesomium.Windows.Controls.WebViewPresenter"/> the layer belongs too.
            </param>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlLayer.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlLayer.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlLayer.OnContentChanged(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlLayer.ParentControl">
            <summary>
            Gets the parent <see cref="T:Awesomium.Windows.Controls.WebViewPresenter"/> the layer belongs to.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlLayer.IsContentVisual">
            <summary>
            Gets if the specified <see cref="P:System.Windows.Controls.ContentControl.Content"/> should be treated as visual content,
            or as a data provider only. The default is <c>false</c> which means that the
            content will be treated as a data provider, visualized using the <see cref="P:System.Windows.Controls.ContentControl.ContentTemplate"/>.
            </summary>
            <remarks>
            Regularly, the use of DataTemplates is preferred when visualizing data, compared to direct
            visual Content. DataTemplates allow flexible use of Triggers etc.. In such scenarios, 
            the WebControl or the layers themselves are used as Content (so that the DataTemplate
            can access them as data providers). Without this property, WPF would attempt to remove the
            visual Content from the visual tree and add it as a child of this ContentControl.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlDialogLayer.#ctor(Awesomium.Windows.Controls.WebViewPresenter)">
            <summary>
            Creates an instance of <see cref="T:Awesomium.Windows.Controls.WebControlDialogLayer"/>.
            </summary>
            <param name="parent">
            Indicated the parent <see cref="T:Awesomium.Windows.Controls.WebControl"/> the layer belongs too
            (see Remarks section).
            </param>
            <remarks>
            Dialog layers are reusable. They should be created only once
            in the lifetime of the <see cref="T:Awesomium.Windows.Controls.WebControl"/> they will be used with.
            You should later use the <see cref="M:Awesomium.Windows.Controls.WebControlDialogLayer.Open``1(``0)"/> and <see cref="M:Awesomium.Windows.Controls.WebControlDialogLayer.Close"/>
            methods to show or hide the layer when needed.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlDialogLayer.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlDialogLayer.Open``1(``0)">
            <summary>
            Shows the dialog layer.
            </summary>
            <param name="data">
            The <see cref="T:Awesomium.Core.DialogEventArgs"/> of the event that triggers
            the activation of the dialog. All dialog events in <see cref="T:Awesomium.Core.IWebView"/>,
            inherit <see cref="T:Awesomium.Core.DialogEventArgs"/>.
            </param>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlDialogLayer.Close">
            <summary>
            Hides the dialog layer.
            </summary>
            <remarks>
            This method should be called by a derived control,
            usually in response to <see cref="M:Awesomium.Windows.Controls.WebControlDialogLayer.OnResponse(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)"/>.
            After hiding, the layer will be automatically removed
            from the <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </remarks>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlDialogLayer.MessageProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.Message"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlDialogLayer.ImageSourceProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.ImageSource"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlDialogLayer.ImageColumnWidthProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.ImageColumnWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlDialogLayer.HasOKButtonProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.HasOKButton"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlDialogLayer.HasCancelButtonProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.HasCancelButton"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlDialogLayer.IsActiveProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.IsActive"/> dependency property.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlDialogLayer.OnResponse(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Executed when either the OK or the Cancel button is clicked.
            </summary>
            <param name="sender">
            The command target (dialog button) that is invoking the handler.
            </param>
            <param name="e">
            Event data.
            <p/>
            <note>
            The <see cref="P:System.Windows.Input.ExecutedRoutedEventArgs.Parameter"/> is a boolean value
            indicating if the <b>OK</b> or the <b>Cancel</b> button has been clicked.
            </note>
            </param>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlDialogLayer.OnCanRespond(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Occurs when the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.Respond"/> command initiates a check to determine
            whether the command can be executed on a dialog button.
            </summary>
            <param name="sender">
            The command target (dialog button) that is invoking the handler.
            </param>
            <param name="e">
            Event data.
            </param>
            <remarks>
            The default setting for the <see cref="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute"/> property
            of the <paramref name="e"/> argument, is <c>true</c> for the <b>Cancel</b> button
            and <c>false</c> for the <b>OK</b> button.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.Data">
            <summary>
            Gets the dialog's data provided to the <see cref="M:Awesomium.Windows.Controls.WebControlDialogLayer.Open``1(``0)"/>
            method, or <c>null</c> (<c>Nothing</c> in Visual Basic)
            if the dialog is not active.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.Respond">
            <summary>
            Routed command assigned to the dialog's buttons.
            </summary>
            <remarks>
            <see cref="P:System.Windows.Controls.Primitives.ButtonBase.CommandParameter"/> is set to either
            <c>true</c> or <c>false</c> to indicate OK or Cancel respectively.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.Message">
            <summary>
            Gets or sets the main message displayed by the dialog.
            </summary>
            <remarks>
            All dialogs launched by a <see cref="T:Awesomium.Windows.Controls.WebControl"/>,
            should contain a main message for the user.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.ImageSource">
            <summary>
            Gets or sets the image displayed in the dialog.
            </summary>
            <remarks>
            The fixed width of the column hosting the Image, 
            can be defined in the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.ImageColumnWidth"/>
            property.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.ImageColumnWidth">
            <summary>
            Gets the fixed width of the dialogs left column,
            which hosts the dialogs image. The default is 80px.
            </summary>
            <remarks>
            This property can be very useful for adjusting
            the width of your columns. If you use a grid in
            your custom content, bind the width of your left 
            <see cref="T:System.Windows.Controls.ColumnDefinition"/> to this property.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.HasOKButton">
            <summary>
            Gets if an OK button is displayed in the dialog.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.HasCancelButton">
            <summary>
            Gets if a Cancel button is displayed in the dialog.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.IsActive">
            <summary>
            Gets if the layer is currently active and visible.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlCertErrorLayer.Open(Awesomium.Core.CertificateErrorEventArgs)">
            <summary>
            Shows the certificate error layer.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlCertErrorLayer.Close">
            <summary>
            Hides the dialog layer.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCertErrorLayer.IsActive">
            <summary>
            Gets if the layer is currently active and visible.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebControlService">
            <summary>
            Represents a service that provides properties and events to control the display and behavior of <see cref="T:Awesomium.Windows.Controls.WebControl"/> features.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlService.GetPageInfoPopup(System.Windows.FrameworkElement)">
            <summary>
            Gets the value of the <see cref="P:Awesomium.Windows.Controls.WebControlService.PageInfoPopup"/> attached property for an object.
            </summary>
            <param name="element">
            The object from which the property value is read.
            </param>
            <returns>
            The object's <see cref="P:Awesomium.Windows.Controls.WebControlService.PageInfoPopup"/> property value.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlService.SetPageInfoPopup(System.Windows.FrameworkElement,Awesomium.Windows.Controls.WebPageInfoPopup)">
            <summary>
            Sets the value of the <see cref="P:Awesomium.Windows.Controls.WebControlService.PageInfoPopup"/> attached property for an object.
            </summary>
            <param name="element">
            The object to which the attached property is written.
            </param>
            <param name="value">
            The value to set.
            </param>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlService.PageInfoPopupProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlService.PageInfoPopup"/> attached property.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlService.GetShowDesignTimeLogo(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:Awesomium.Windows.Controls.WebControlService.ShowDesignTimeLogo"/> attached property for an object.
            </summary>
            <param name="element">
            The object from which the property value is read.
            </param>
            <returns>
            The object's <see cref="P:Awesomium.Windows.Controls.WebControlService.ShowDesignTimeLogo"/> property value.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlService.SetShowDesignTimeLogo(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:Awesomium.Windows.Controls.WebControlService.ShowDesignTimeLogo"/> attached property for an object.
            </summary>
            <param name="element">
            The object to which the attached property is written.
            </param>
            <param name="value">
            The value to set.
            </param>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlService.ShowDesignTimeLogoProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlService.ShowDesignTimeLogo"/> attached property.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebPageInfoControl">
            <summary>
            Represents a WPF control that displays information about the web page currently 
            loaded in an <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPageInfoControl.ViewProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPageInfoControl.View"/> dependency property.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPageInfoControl.View">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.IWebView"/> instance to monitor
            for page information.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebPageInfoPopup">
            <summary> 
            Represents a WPF popup that displays information about the web page currently 
            loaded in an <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            The popup automatically requests for updated page info, when <see cref="P:Awesomium.Windows.Controls.WebPageInfoPopup.IsOpen"/>
            is set to <c>true</c>.
            </remarks>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPageInfoPopup.OpenedEvent">
            <summary>
            Identifies the <see cref="E:Awesomium.Windows.Controls.WebPageInfoPopup.Opened"/> routed event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebPageInfoPopup.OnOpened(System.Windows.RoutedEventArgs)">
            <summary> 
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebPageInfoPopup.Opened"/> event.
            </summary> 
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPageInfoPopup.ClosedEvent">
            <summary>
            Identifies the <see cref="E:Awesomium.Windows.Controls.WebPageInfoPopup.Closed"/> routed event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebPageInfoPopup.OnClosed(System.Windows.RoutedEventArgs)">
            <summary> 
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebPageInfoPopup.Closed"/> event.
            </summary> 
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPageInfoPopup.PlacementTargetProperty">
            <summary>
            The DependencyProperty for the PlacementTarget property 
            Default value: null
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPageInfoPopup.PlacementRectangleProperty">
            <summary> 
                The DependencyProperty for the PlacementRectangle property.
            </summary> 
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPageInfoPopup.PlacementProperty">
            <summary>
            The DependencyProperty for the Placement property 
            Default value: null
            </summary> 
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPageInfoPopup.CustomPopupPlacementCallbackProperty">
            <summary> 
                The DependencyProperty for the CustomPopupPlacementCallback property.
                Flags:              None
                Default Value:      null
            </summary> 
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPageInfoPopup.HorizontalOffsetProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPageInfoPopup.HorizontalOffset"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPageInfoPopup.VerticalOffsetProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPageInfoPopup.VerticalOffset"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPageInfoPopup.IsOpenProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPageInfoPopup.IsOpen"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPageInfoPopup.HasDropShadowProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPageInfoPopup.HasDropShadow"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPageInfoPopup.StaysOpenProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPageInfoPopup.StaysOpen"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPageInfoPopup.PopupPlacementProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPageInfoPopup.PopupPlacement"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPageInfoPopup.PopupPlacementCallbackProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPageInfoPopup.PopupPlacementCallback"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPageInfoPopup.AutoRequestPageInfoProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPageInfoPopup.AutoRequestPageInfo"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPageInfoPopup.ViewProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPageInfoPopup.View"/> dependency property.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebPageInfoPopup.Opened">
            <summary>
            Occurs when the <see cref="T:Awesomium.Windows.Controls.WebPopupMenu"/> opens.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebPageInfoPopup.Closed">
            <summary>
            Occurs when the <see cref="T:Awesomium.Windows.Controls.WebPopupMenu"/> closes.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPageInfoPopup.PlacementTarget">
            <summary>
            The UIElement relative to which this WebPageInfoPopup will be displayed. 
            </summary> 
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPageInfoPopup.PlacementRectangle">
            <summary>
            Get or set PlacementRectangle property of the WebPageInfoPopup
            </summary> 
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPageInfoPopup.Placement">
            <summary>
                Chooses the behavior of where the Popup should be placed on screen. 
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPageInfoPopup.CustomPopupPlacementCallback">
            <summary>
                Chooses the behavior of where the Popup should be placed on screen. 
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPageInfoPopup.HorizontalOffset">
            <summary> 
            Horizontal offset from the default location when this 
            <see cref="T:Awesomium.Windows.Controls.WebPageInfoPopup"/> is displayed.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPageInfoPopup.VerticalOffset">
            <summary>
            Vertical offset from the default location when this 
            <see cref="T:Awesomium.Windows.Controls.WebPageInfoPopup"/> is displayed.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPageInfoPopup.IsOpen">
            <summary>
            Gets or sets if this <see cref="T:Awesomium.Windows.Controls.WebPageInfoPopup"/> is visible.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPageInfoPopup.HasDropShadow">
            <summary>
            Gets or sets if the control has a drop shadow. 
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPageInfoPopup.StaysOpen">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:Awesomium.Windows.Controls.WebPageInfoPopup"/> control closes when the control is no longer in focus.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPageInfoPopup.PopupPlacement">
            <summary>
            Gets or sets the orientation of the <see cref="T:Awesomium.Windows.Controls.WebPageInfoPopup"/> control when the control opens, and specifies 
            the behavior of the <see cref="T:Awesomium.Windows.Controls.WebPageInfoPopup"/> control when it overlaps screen boundaries.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPageInfoPopup.PopupPlacementCallback">
            <summary>
            Gets or sets a delegate handler method that positions the <see cref="T:Awesomium.Windows.Controls.WebPageInfoPopup"/> control
            when <see cref="P:Awesomium.Windows.Controls.WebPageInfoPopup.PopupPlacement"/> is set to <see cref="F:System.Windows.Controls.Primitives.PlacementMode.Custom"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPageInfoPopup.AutoRequestPageInfo">
            <summary>
            Gets or sets if the <see cref="T:Awesomium.Windows.Controls.WebPageInfoPopup"/> should
            automatically request for updated page info from the <see cref="P:Awesomium.Windows.Controls.WebPageInfoPopup.View"/>,
            when it opens. The default is <c>true</c>.
            </summary>
            <remarks>
            <note>
            You may want to set this to <c>false</c>, if the <see cref="T:Awesomium.Windows.Controls.WebPageInfoPopup"/>
            is assigned to a button and you use the <see cref="P:Awesomium.Windows.Controls.WebControlCommands.RequestPageInfo"/>
            command.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPageInfoPopup.View">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.IWebView"/> instance to request for
            current page information from.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebPopupMenu">
            <summary>
            Predefined stylable drop-down (popup) menu used by the <see cref="T:Awesomium.Windows.Controls.WebControl"/> in response
            to <see cref="E:Awesomium.Core.IWebView.ShowPopupMenu"/>.
            </summary>
            <remarks>
            There are multiple ways to customize, override or block the default drop-down (popup) menu of a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            These are described in the following list:
            <list type="table">
            <listheader>
            <term>Action</term>
            <description>Result</description>
            </listheader>
            <item>
            <term>
            Redefine a <see cref="T:Awesomium.Windows.Controls.WebPopupMenu"/> application resource, 
            using the <see cref="P:Awesomium.Windows.Controls.WebControl.PopupMenuResourceKey"/> as its key.
            </term>
            <description>
            Substitutes the default drop-down (popup) menu with the one of your own. You can then optionally
            specify your own <c>Style</c> for it.
            </description>
            </item>
            <item>
            <term>
            Handle the <see cref="E:Awesomium.Windows.Controls.WebControl.ShowPopupMenu"/> event and set the 
            <see cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/> property to <c>true</c>.
            </term>
            <description>
            This will block the default drop-down (popup) menu from displaying. 
            You can then manually display your own drop-down (popup) menu.
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="T:Awesomium.Core.WebPopupMenuInfo"/>
            <seealso cref="P:Awesomium.Core.PopupMenuEventArgs.Handled"/>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebPopupMenuBase">
            <summary>
            Abstract base class of <see cref="T:Awesomium.Windows.Controls.WebPopupMenu"/>.
            </summary>
            <tocexclude/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebPopupMenuBase.GetFocus">
            <SecurityNote> 
               Critical: This code returns the window which has focus and elevates to unmanaged code
            </SecurityNote>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebPopupMenuBase.ShouldCaptureMouse">
            <summary>
            Specifies if the mouse should be captured by this menu.
            </summary>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating if the mouse should 
            be captured by this menu.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebPopupMenuBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
                Called when IsMouseOver changes on this element.
            </summary> 
            <param name="e"></param>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebPopupMenuBase.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <inheritdoc /> 
        </member>
        <member name="M:Awesomium.Windows.Controls.WebPopupMenuBase.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebPopupMenuBase.IsItemItsOwnContainerOverride(System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:Awesomium.Windows.Controls.WebPopupMenuBase.GetContainerForItemOverride">
            <inheritdoc /> 
        </member>
        <member name="M:Awesomium.Windows.Controls.WebPopupMenuBase.RestorePreviousFocus">
            <SecurityNote> 
                 Critical - Accesses HwndSource
                 TreatAsSafe - No information exposed. Simply decides whether or not to restore focus. 
            </SecurityNote> 
        </member>
        <member name="M:Awesomium.Windows.Controls.WebPopupMenuBase.PushMenuMode(System.Boolean)">
            <SecurityNote>
                 Critical - Accesses PresentationSource
                 TreatAsSafe - No information exposed. Simply notifies the
                               PresentationSource to enter/leave menu mode. 
            </SecurityNote>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebPopupMenuBase.PopMenuMode">
            <SecurityNote> 
                 Critical - Accesses PresentationSource
                 TreatAsSafe - No information exposed. Simply notifies the 
                               PresentationSource to enter/leave menu mode.
            </SecurityNote>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPopupMenuBase.CurrentSelection">
            <summary> 
            Currently selected item in this menu.
            </summary> 
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPopupMenuBase.HasPushedMenuMode">
            <SecurityNote>
                 Critical - Accesses PresentationSource 
                 TreatAsSafe - No information exposed. Simply returns 
                               whether or not we have pushed menu mode.
            </SecurityNote> 
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPopupMenuBase.IsAcquireFocusMenuMode">
            <summary>
                This boolean determines if the PushMenuMode was
                performed due to acquire focus or due to programmatic
                set of IsMenuMode. 
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPopupMenu.OpenedEvent">
            <summary>
            Identifies the <see cref="E:Awesomium.Windows.Controls.WebPopupMenu.Opened"/> routed event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebPopupMenu.OnOpened(System.Windows.RoutedEventArgs)">
            <summary> 
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebPopupMenu.Opened"/> event.
            </summary> 
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPopupMenu.ClosedEvent">
            <summary>
            Identifies the <see cref="E:Awesomium.Windows.Controls.WebPopupMenu.Closed"/> routed event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebPopupMenu.OnClosed(System.Windows.RoutedEventArgs)">
            <summary> 
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebPopupMenu.Closed"/> event.
            </summary> 
        </member>
        <member name="M:Awesomium.Windows.Controls.WebPopupMenu.Show(Awesomium.Core.IWebViewPresenter,Awesomium.Core.WebPopupMenuInfo)">
            <summary>
            Positions and shows the <see cref="T:Awesomium.Windows.Controls.WebPopupMenu"/>, 
            relative to the specified <paramref name="presenter"/>.
            </summary>
            <param name="presenter">
            The <see cref="T:Awesomium.Core.IWebViewPresenter"/> instance this <see cref="T:Awesomium.Windows.Controls.WebPopupMenu"/>
            will be positioned relative to.
            </param>
            <param name="info">
            A <see cref="T:Awesomium.Core.WebPopupMenuInfo"/> specifying current popup menu data.
            </param>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebPopupMenu.Hide">
            <summary>
            Sends the currently selected item and closes the drop-down (popup) menu.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebPopupMenu.Hide(System.Boolean)">
            <summary>
            Sends the currently selected item, or cancels and closes the drop-down (popup) menu.
            </summary>
            <param name="cancel">
            <c>true</c> to abort the menu and prevent it from sending the currently selected item;
            <c>false</c> otherwise.
            </param>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebPopupMenu.ShouldCaptureMouse">
            <inheritdoc /> 
        </member>
        <member name="M:Awesomium.Windows.Controls.WebPopupMenu.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc /> 
        </member>
        <member name="M:Awesomium.Windows.Controls.WebPopupMenu.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <inheritdoc /> 
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPopupMenu.MenuInfoProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPopupMenu.MenuInfo"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPopupMenu.MenuItemsProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPopupMenu.MenuItems"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPopupMenu.MaxDropDownHeightProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPopupMenu.MaxDropDownHeight"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPopupMenu.HorizontalOffsetProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPopupMenu.HorizontalOffset"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPopupMenu.VerticalOffsetProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPopupMenu.VerticalOffset"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPopupMenu.IsOpenProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPopupMenu.IsOpen"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPopupMenu.PlacementTargetProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPopupMenu.PlacementTarget"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPopupMenu.PlacementRectangleProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPopupMenu.PlacementRectangle"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPopupMenu.PlacementProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPopupMenu.Placement"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPopupMenu.HasDropShadowProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPopupMenu.HasDropShadow"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPopupMenu.CustomPopupPlacementCallbackProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPopupMenu.CustomPopupPlacementCallback"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPopupMenu.StaysOpenProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPopupMenu.StaysOpen"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebPopupMenu.DefaultGroupStyleProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebPopupMenu.DefaultGroupStyle"/> dependency property.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebPopupMenu.Opened">
            <summary>
            Occurs when the <see cref="T:Awesomium.Windows.Controls.WebPopupMenu"/> opens.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebPopupMenu.Closed">
            <summary>
            Occurs when the <see cref="T:Awesomium.Windows.Controls.WebPopupMenu"/> closes.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPopupMenu.MenuInfo">
            <summary>
            Gets the <see cref="T:Awesomium.Core.WebPopupMenuInfo"/> instance used to provide data to the drop-down (popup) menu.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPopupMenu.MenuItems">
            <summary>
            Gets a list of menu items to display with this <see cref="T:Awesomium.Windows.Controls.WebPopupMenu"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPopupMenu.MaxDropDownHeight">
            <summary>
            Gets or sets the maximum height for drop-down (popup) menu.
            </summary>
            <returns>
            A <c>double</c> that represents the height that is retrieved or the height to set. 
            The default value as defined to the property system is a calculated value based on taking a 
            one-third fraction of the system max screen height parameters, but this default 
            is potentially overridden by various control templates.
            </returns>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPopupMenu.HorizontalOffset">
            <summary> 
            Get or set X offset of the <see cref="T:Awesomium.Windows.Controls.WebPopupMenu"/>.
            </summary> 
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPopupMenu.VerticalOffset">
            <summary> 
            Get or set Y offset of the <see cref="T:Awesomium.Windows.Controls.WebPopupMenu"/>.
            </summary> 
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPopupMenu.IsOpen">
            <summary>
            Get or set IsOpen property of the <see cref="T:Awesomium.Windows.Controls.WebPopupMenu"/>. 
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPopupMenu.PlacementTarget">
            <summary>
            Get or set PlacementTarget property of the <see cref="T:Awesomium.Windows.Controls.WebPopupMenu"/>. 
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPopupMenu.PlacementRectangle">
            <summary> 
            Get or set PlacementRectangle property of the <see cref="T:Awesomium.Windows.Controls.WebPopupMenu"/>.
            </summary> 
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPopupMenu.Placement">
            <summary>
            Get or set Placement property of the WebPopupMenu 
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPopupMenu.HasDropShadow">
            <summary> 
                Whether the control has a drop shadow.
            </summary> 
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPopupMenu.CustomPopupPlacementCallback">
            <summary> 
                Chooses the behavior of where the <see cref="T:Awesomium.Windows.Controls.WebPopupMenu"/> should be placed on screen. 
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPopupMenu.StaysOpen">
            <summary> 
                Chooses the behavior of when the ContextMenu should automatically close.
            </summary> 
        </member>
        <member name="P:Awesomium.Windows.Controls.WebPopupMenu.DefaultGroupStyle">
            <summary>
            
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.DelegateCommand">
            <summary>
            This class allows delegating the commanding logic to methods passed as parameters,
            and enables a View to bind commands to objects that are not part of the element tree.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.DelegateCommand.CanExecute">
            <summary>
            Method to determine if the command can be executed.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.DelegateCommand.Execute">
            <summary>
            Execution of the command.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.DelegateCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChaged event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.DelegateCommand.OnCanExecuteChanged">
            <summary>
            Protected virtual method to raise CanExecuteChanged event.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.DelegateCommand.IsAutomaticRequeryDisabled">
            <summary>
            Property to enable or disable CommandManager's automatic requery on this command.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.DelegateCommand.CanExecuteChanged">
            <summary>
            ICommand.CanExecuteChanged implementation
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.DelegateCommand`1">
            <summary>
            This class allows delegating the commanding logic to methods passed as parameters,
            and enables a View to bind commands to objects that are not part of the element tree.
            </summary>
            <typeparam name="T">Type of the parameter passed to the delegates</typeparam>
        </member>
        <member name="M:Awesomium.Windows.Controls.DelegateCommand`1.CanExecute(`0)">
            <summary>
            Determines if the command can be executed.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.DelegateCommand`1.Execute(`0)">
            <summary>
            Execution of the command.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.DelegateCommand`1.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChaged event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.DelegateCommand`1.OnCanExecuteChanged">
            <summary>
            Protected virtual method to raise CanExecuteChanged event.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.DelegateCommand`1.IsAutomaticRequeryDisabled">
            <summary>
            Property to enable or disable CommandManager's automatic requery on this command.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.DelegateCommand`1.CanExecuteChanged">
            <summary>
            ICommand.CanExecuteChanged implementation.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.CommandManagerHelper">
            <summary>
            This class contains methods for the CommandManager that help avoid memory leaks by
            using weak references.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.DownloadItem">
            <summary>
            Extends the <see cref="T:Awesomium.Core.DownloadItem"/>.
            </summary>
            <remarks>
            When you are using a <see cref="T:Awesomium.Windows.Controls.WebControl"/>, the items added
            to the <see cref="P:Awesomium.Core.WebCore.Downloads"/> collection, will be instances of this subclass.
            <note>
            Note that if your WPF application uses other <see cref="T:Awesomium.Core.IWebView"/> instances (such as <see cref="T:Awesomium.Core.WebView"/>),
            <see cref="P:Awesomium.Core.WebCore.Downloads"/> may end up containing both core <see cref="T:Awesomium.Core.DownloadItem"/>
            instances, as well as WPF specific <see cref="T:Awesomium.Windows.Controls.DownloadItem"/> instances.
            If your UI provides templates only for the WPF <see cref="T:Awesomium.Windows.Controls.DownloadItem"/>,
            other instances will not be recognized. This however can be useful as your application would normally
            not want to visualize download operations initiated from a <i>windowless</i> <see cref="T:Awesomium.Core.IWebView"/> wrapper,
            such as the <see cref="T:Awesomium.Core.WebView"/>.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.DownloadItem.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.DownloadItem.CanOpenDownloadedFile">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Controls.DownloadItem.CancelCommand">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Core.DownloadItem.Cancel"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.DownloadItem.OpenDownloadedFileCommand">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Core.DownloadItem.OpenDownloadedFile"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.DownloadItem.OpenDownloadedFileFolderCommand">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Core.DownloadItem.OpenDownloadedFileFolder"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.DownloadItem.FileIcon">
            <summary>
            Gets the image associated with the downloaded file's type.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.DownloadItem.OpenDownloadedFileAlwaysEnabled">
            <summary>
            Gets or sets if the <see cref="P:Awesomium.Windows.Controls.DownloadItem.OpenDownloadedFileCommand"/> should
            always return <c>true</c> at <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/>.
            </summary>
            <remarks>
            Trying to execute the command while the download operation is active,
            is still prevented. This property only allows visual elements bound
            to the <see cref="P:Awesomium.Windows.Controls.DownloadItem.OpenDownloadedFileCommand"/> command, remain enabled
            during download.
            </remarks>
        </member>
        <member name="T:Awesomium.Windows.Controls.PropertyChangedEventListener">
            <summary>
            A common <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> weak event listener.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.PropertyChangedEventListener.#ctor(System.ComponentModel.INotifyPropertyChanged,System.ComponentModel.PropertyChangedEventHandler)">
            <summary>
            Initializes a new instance of the PropertyChangedEventListener class.
            </summary>
            <param name="handler">The handler for the event.</param>
            <param name="source">The source of the property.</param>
        </member>
        <member name="M:Awesomium.Windows.Controls.PropertyChangedEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <summary>
            Receives events from the centralized event manager.
            </summary>
            <param name="managerType">The type of the WeakEventManager calling this method.</param>
            <param name="sender">Object that originated the event.</param>
            <param name="e">Event data.</param>
            <returns>
            true if the listener handled the event. It is considered an error by the WeakEventManager handling in WPF 
            to register a listener for an event that the listener does not handle. Regardless, the method should return false 
            if it receives an event that it does not recognize or handle.
            </returns>
        </member>
        <member name="T:Awesomium.Windows.Controls.CollectionChangedEventListener">
            <summary>
            A common <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> weak event listener.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.CollectionChangedEventListener.#ctor(System.Collections.Specialized.INotifyCollectionChanged,System.Collections.Specialized.NotifyCollectionChangedEventHandler)">
            <summary>
            Initializes a new instance of the PropertyChangedEventListener class.
            </summary>
            <param name="handler">The handler for the event.</param>
            <param name="source">The source of the property.</param>
        </member>
        <member name="M:Awesomium.Windows.Controls.CollectionChangedEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <summary>
            Receives events from the centralized event manager.
            </summary>
            <param name="managerType">The type of the WeakEventManager calling this method.</param>
            <param name="sender">Object that originated the event.</param>
            <param name="e">Event data.</param>
            <returns>
            true if the listener handled the event. It is considered an error by the WeakEventManager handling in WPF 
            to register a listener for an event that the listener does not handle. 
            Regardless, the method should return false if it receives an event that it does not recognize or handle.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.WebViewWeakEventListener.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.WebViewWeakEventListener.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Awesomium.Windows.IWebViewEventHandler">
            <summary>
            Represents the method that can handle any <see cref="T:Awesomium.Core.IWebView"/> event, through
            the <see cref="T:Awesomium.Windows.WebViewEventManager"/>.
            </summary>
            <param name="sender">The source <see cref="T:Awesomium.Core.IWebView"/> instance.</param>
            <param name="e">Event data.</param>
            <seealso cref="M:Awesomium.Windows.WebViewEventManager.AddWeakEventListener(Awesomium.Core.IWebView,Awesomium.Core.WebViewEventType,Awesomium.Windows.IWebViewEventHandler)"/>
            <seealso cref="M:Awesomium.Windows.WebViewEventManager.RemoveWeakEventListener(Awesomium.Core.IWebView,Awesomium.Core.WebViewEventType,Awesomium.Windows.IWebViewEventHandler)"/>
        </member>
        <member name="T:Awesomium.Windows.WebViewEventManager">
            <summary> 
            Provides a <see cref="T:System.Windows.WeakEventManager"/> implementation so that you can use the 
            "weak event listener" pattern to attach listeners for the events of an 
            <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary> 
        </member>
        <member name="M:Awesomium.Windows.WebViewEventManager.AddWeakEventListener(Awesomium.Core.IWebView,Awesomium.Core.WebViewEventType,Awesomium.Windows.IWebViewEventHandler)">
            <summary>
            Adds a weak event handler for an <see cref="T:Awesomium.Core.IWebView"/> event.
            </summary>
            <param name="source">The source of the event.</param>
            <param name="eventType">The event to handle.</param>
            <param name="handler">The event handler.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> must not be <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="handler"/> must not be <c>null</c>.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.WebViewEventManager.RemoveWeakEventListener(Awesomium.Core.IWebView,Awesomium.Core.WebViewEventType,Awesomium.Windows.IWebViewEventHandler)">
            <summary>
            Removes the weak event handler for an <see cref="T:Awesomium.Core.IWebView"/> event.
            </summary>
            <param name="source">The source of the event.</param>
            <param name="eventType">The event to handled.</param>
            <param name="handler">The event handler.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> must not be <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="handler"/> must not be <c>null</c>.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.WebViewEventManager.AddListener(Awesomium.Core.IWebView,Awesomium.Core.WebViewEventType,System.Windows.IWeakEventListener)">
            <summary>
            Add a listener to the given source's event. 
            </summary>
        </member>
        <member name="M:Awesomium.Windows.WebViewEventManager.RemoveListener(Awesomium.Core.IWebView,Awesomium.Core.WebViewEventType,System.Windows.IWeakEventListener)">
            <summary> 
            Remove a listener to the given source's event.
            </summary> 
        </member>
        <member name="M:Awesomium.Windows.WebViewEventManager.Purge(System.Object,System.Object,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Awesomium.Windows.WebViewEventManager.StartListening(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NotImplementedException">
            This method is not implemented since this <see cref="T:System.Windows.WeakEventManager"/>
            can manage more than one events. Use <see cref="M:Awesomium.Windows.WebViewEventManager.AddListener(Awesomium.Core.IWebView,Awesomium.Core.WebViewEventType,System.Windows.IWeakEventListener)"/> instead.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.WebViewEventManager.StopListening(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebControlJSDialogLayer">
            <summary>
            Represents a dialog layer shown in response to a JavaScript dialog request.
            </summary>
            <remarks>
            Dialog layers are reusable. They should be created only once
            in the lifetime of the <see cref="T:Awesomium.Windows.Controls.WebControl"/> they will be used with.
            You should later use the <see cref="M:Awesomium.Windows.Controls.WebControlJSDialogLayer.Open``1(``0)"/> and <see cref="M:Awesomium.Windows.Controls.WebControlDialogLayer.Close"/>
            methods to show or hide the layer when needed.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlJSDialogLayer.Open``1(``0)">
            <inheritdoc/>
            <param name="data">
            The <see cref="T:Awesomium.Core.JavascriptDialogEventArgs"/> of the event that triggers
            the activation of the dialog.
            </param>
            <exception cref="T:System.ArgumentException">
            The provided event <paramref name="data"/> must be of type: <see cref="T:Awesomium.Core.JavascriptDialogEventArgs"/>.
            </exception>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlJSDialogLayer.HasPromptFieldProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlJSDialogLayer.HasPromptField"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlJSDialogLayer.HasMessageProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlJSDialogLayer.HasMessage"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlJSDialogLayer.FrameURLProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlJSDialogLayer.FrameURL"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlJSDialogLayer.PromptProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlJSDialogLayer.Prompt"/> dependency property.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlJSDialogLayer.OnResponse(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlJSDialogLayer.OnCanRespond(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlJSDialogLayer.HasPromptField">
            <summary>
            Gets if a prompt field is displayed in the dialog.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlJSDialogLayer.HasMessage">
            <summary>
            Gets if a message is displayed in the dialog.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlJSDialogLayer.FrameURL">
            <summary>
            Gets the address of the page that launches the dialog.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlJSDialogLayer.Prompt">
            <summary>
            Gets the default prompt and sets the text the user entered.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebControlLoginLayer">
            <summary>
            Represents a layer added to a <see cref="T:Awesomium.Windows.Controls.WebControl"/> to display an authentication request.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebControlContextMenu">
            <summary>
            Predefined stylable context menu used by <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            There are multiple ways to customize, override or block the default context menu of a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            These are described in the following list:
            <list type="table">
            <listheader>
            <term>Action</term>
            <description>Result</description>
            </listheader>
            <item>
            <term>Redefine a <see cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/> application resource, 
            using the <see cref="P:Awesomium.Windows.Controls.WebControl.ContextMenuResourceKey"/> as its key.</term>
            <description>
            Completely substitutes the default context menu. You should bind the <see cref="P:System.Windows.FrameworkElement.DataContext"/> property
            to the <see cref="P:System.Windows.Controls.ContextMenu.PlacementTarget"/> property, to access the <see cref="T:Awesomium.Windows.Controls.WebControl"/>. You can later use the
            <see cref="T:Awesomium.Core.WebContextMenuInfo"/> provided through <see cref="P:Awesomium.Windows.Controls.WebControl.LatestContextData"/> to update the state of the menu's items.
            </description>
            </item>
            <item>
            <term>Assign your own context menu to the <see cref="P:System.Windows.FrameworkElement.ContextMenu"/> property.</term>
            <description>Same as before but in this case you should provide your own display context data.</description>
            </item>
            <item>
            <term>Redefine one or more arrays of menu items in your application resources, 
            using the following keys (depending on the group you wish to substitute or change):
            <p/>
            <see cref="P:Awesomium.Windows.Controls.WebControl.ContextMenuPageItemsArrayRecourceKey"/>
            <br/>
            <see cref="P:Awesomium.Windows.Controls.WebControl.ContextMenuInputItemsArrayRecourceKey"/>
            <br/>
            <see cref="P:Awesomium.Windows.Controls.WebControl.ContextMenuSelectionItemsArrayRecourceKey"/>
            <br/>
            <see cref="P:Awesomium.Windows.Controls.WebControl.ContextMenuImageItemsArrayRecourceKey"/>
            <br/>
            <see cref="P:Awesomium.Windows.Controls.WebControl.ContextMenuLinkItemsArrayRecourceKey"/>
            </term>
            <description>Substitutes or edits specific menu items' groups, that are visible according to the current context.
            For more details, read the documentation of the resource keys.</description>
            </item>
            <item>
            <term>Handle the <see cref="E:Awesomium.Windows.Controls.WebControl.ShowContextMenu"/> event and set the <see cref="P:Awesomium.Core.ContextMenuEventArgs.Handled"/> property
            to <c>true</c>.</term>
            <description>This will prevent the default context menu from displaying. You can then programmatically display your own context menu.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlContextMenu.Show(Awesomium.Core.IWebViewPresenter)">
            <summary>
            Positions and shows the <see cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>, 
            relative to the specified <paramref name="presenter"/>.
            </summary>
            <param name="presenter">
            The <see cref="T:Awesomium.Core.IWebViewPresenter"/> instance this <see cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>
            will be positioned relative to. Current context data, will be retrieved from
            the <see cref="T:Awesomium.Core.IWebView"/> instance assigned to the <see cref="P:Awesomium.Core.IWebViewPresenter.View"/>
            property.
            </param>
            <exception cref="T:System.ArgumentException">
            No <see cref="T:Awesomium.Core.IWebView"/> instance is assigned to the <see cref="P:Awesomium.Core.IWebViewPresenter.View"/>
            property of the specified <paramref name="presenter"/>.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlContextMenu.Show(Awesomium.Core.IWebViewPresenter,Awesomium.Core.WebContextMenuInfo)">
            <summary>
            Positions and shows the <see cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>, 
            relative to the specified <paramref name="presenter"/>.
            </summary>
            <param name="presenter">
            The <see cref="T:Awesomium.Core.IWebViewPresenter"/> instance this <see cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>
            will be positioned relative to.
            </param>
            <param name="info">
            A <see cref="T:Awesomium.Core.WebContextMenuInfo"/> specifying current context menu data.
            </param>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlContextMenu.OnClosed(System.Windows.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlContextMenu.ContextMenuInfoPropertyKey">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlContextMenu.ContextMenuInfo"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlContextMenu.ContextMenuInfoProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlContextMenu.ContextMenuInfo"/> dependency property.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlContextMenu.ContextMenuInfo">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.WebContextMenuInfo"/> instance used to provide data to the context menu.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebViewHost">
            <summary>
            Represents a WPF host of a windowed <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            This control wraps and presents a native, windowed 
            <see cref="T:Awesomium.Core.IWebView"/> instance. It allows taking advantage of
            full hardware acceleration when <see cref="P:Awesomium.Core.WebPreferences.EnableGPUAcceleration"/>
            is set to <c>true</c>, but poses certain presentation limitations compared to
            other WPF components.
            <p/>
            <see cref="T:Awesomium.Windows.Controls.WebViewHost"/> is used by <see cref="T:Awesomium.Windows.Controls.WebControl"/> instances,
            when <see cref="P:Awesomium.Windows.Controls.WebControl.ViewType"/> is set to <see cref="F:Awesomium.Core.WebViewType.Window"/>.
            For more details, see: <see cref="P:Awesomium.Windows.Controls.WebControl.ViewType"/>.
            </remarks>
            <seealso cref="P:Awesomium.Windows.Controls.WebControl.ViewType"/>
            <seealso cref="P:Awesomium.Core.WebPreferences.EnableGPUAcceleration"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewHost.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewHost.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewHost.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewHost.DestroyWindowCore(System.Runtime.InteropServices.HandleRef)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewHost.ShowToolTip(System.String)">
            <inheritdoc cref="M:Awesomium.Core.IWebViewPresenter.ShowToolTip(System.String)"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewHost.HideToolTip">
            <inheritdoc cref="M:Awesomium.Core.IWebViewPresenter.HideToolTip"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewHost.ShowWebContextMenu(Awesomium.Core.WebContextMenuInfo)">
            <inheritdoc cref="M:Awesomium.Core.IWebViewPresenter.ShowWebContextMenu(Awesomium.Core.WebContextMenuInfo)"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewHost.ShowPopupMenu(Awesomium.Core.WebPopupMenuInfo)">
            <inheritdoc cref="M:Awesomium.Core.IWebViewPresenter.ShowPopupMenu(Awesomium.Core.WebPopupMenuInfo)"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewHost.HidePopupMenu(System.Boolean)">
            <inheritdoc cref="M:Awesomium.Core.IWebViewPresenter.HidePopupMenu(System.Boolean)"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewHost.ShowCursor(Awesomium.Core.CursorType)">
            <inheritdoc cref="M:Awesomium.Core.IWebViewPresenter.ShowCursor(Awesomium.Core.CursorType)"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewHost.ShowJSDialog(Awesomium.Core.JavascriptDialogEventArgs)">
            <inheritdoc cref="M:Awesomium.Core.IWebViewPresenter.ShowJSDialog(Awesomium.Core.JavascriptDialogEventArgs)"/>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebViewHost.IsLiveProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebViewHost.IsLive"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebViewHost.ViewProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebViewHost.View"/> dependency property.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebViewHost.View">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.IWebView"/> instance this control
            hosts.
            </summary>
            <remarks>
            <note type="caution">
            You can only assign a windowed <see cref="T:Awesomium.Core.IWebView"/> instance
            (<see cref="P:Awesomium.Core.IWebView.ViewType"/> <c>==</c> <see cref="F:Awesomium.Core.WebViewType.Window"/>)
            to <see cref="T:Awesomium.Windows.Controls.WebViewHost"/>.
            </note>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Attempted to assign an offscreen <see cref="T:Awesomium.Core.IWebView"/> instance.
            </exception>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebViewPresenter">
            <summary>
            Represents a WPF <see cref="T:Awesomium.Core.ISurface"/> that can be used with WPF visual elements
            to render the pixel buffer of an <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnInitialized(System.Object,Awesomium.Core.SurfaceInitializedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebViewPresenter.Initialized"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnUpdated(System.Object,Awesomium.Core.SurfaceUpdatedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebViewPresenter.Updated"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnResized(System.Object,Awesomium.Core.SurfaceResizedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.WebViewPresenter.Resized"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting resources.
            </summary>
            <remarks>
            <note>
            When added to the visual tree of a <see cref="T:Awesomium.Windows.Controls.WebControl"/>, <see cref="T:Awesomium.Windows.Controls.WebViewPresenter"/>
            is being disposed by the parent <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.GetVisualChild(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnStylusMove(System.Windows.Input.StylusEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnTouchMove(System.Windows.Input.TouchEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnTouchDown(System.Windows.Input.TouchEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnTouchUp(System.Windows.Input.TouchEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnGotFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnLostFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.ArrangeOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.OnRender(System.Windows.Media.DrawingContext)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.HandleInput(Awesomium.Core.ViewInput)">
            <summary>
            Gets if the specified kind of input should be handled by the control.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.ShowToolTip(System.String)">
            <inheritdoc cref="M:Awesomium.Core.IWebViewPresenter.ShowToolTip(System.String)"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.HideToolTip">
            <inheritdoc cref="M:Awesomium.Core.IWebViewPresenter.HideToolTip"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.ShowWebContextMenu(Awesomium.Core.WebContextMenuInfo)">
            <inheritdoc cref="M:Awesomium.Core.IWebViewPresenter.ShowWebContextMenu(Awesomium.Core.WebContextMenuInfo)"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.ShowPopupMenu(Awesomium.Core.WebPopupMenuInfo)">
            <inheritdoc cref="M:Awesomium.Core.IWebViewPresenter.ShowPopupMenu(Awesomium.Core.WebPopupMenuInfo)"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.HidePopupMenu(System.Boolean)">
            <inheritdoc cref="M:Awesomium.Core.IWebViewPresenter.HidePopupMenu(System.Boolean)"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.ShowCursor(Awesomium.Core.CursorType)">
            <inheritdoc cref="M:Awesomium.Core.IWebViewPresenter.ShowCursor(Awesomium.Core.CursorType)"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.ShowLoginDialog(Awesomium.Core.LoginRequestEventArgs)">
            <inheritdoc cref="M:Awesomium.Core.IWebViewPresenter.ShowLoginDialog(Awesomium.Core.LoginRequestEventArgs)"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.ShowJSDialog(Awesomium.Core.JavascriptDialogEventArgs)">
            <inheritdoc cref="M:Awesomium.Core.IWebViewPresenter.ShowJSDialog(Awesomium.Core.JavascriptDialogEventArgs)"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebViewPresenter.ShowCertificateErrorDialog(Awesomium.Core.CertificateErrorEventArgs)">
            <inheritdoc cref="M:Awesomium.Core.IWebViewPresenter.ShowCertificateErrorDialog(Awesomium.Core.CertificateErrorEventArgs)"/>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebViewPresenter.IsLiveProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebViewPresenter.IsLive"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebViewPresenter.ImageProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebViewPresenter.Image"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebViewPresenter.ViewProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebViewPresenter.View"/> dependency property.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebViewPresenter.Initialized">
            <summary>
            Occurs when this surface is being initialized for use with a <see cref="T:Awesomium.Core.IWebView"/>.
            </summary>
            <remarks>
            This event can be called more than once if you are reusing this surface
            for multiple <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> calls.
            <note>
            Once assigned to a view and initialized, a surface can only be used
            with that single View.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebViewPresenter.Updated">
            <summary>
            Occurs when the surface has been updated.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebViewPresenter.Resized">
            <summary>
            Occurs when the surface has completed resizing and has updated its buffer.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebViewPresenter.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Controls.WebViewPresenter.VisualChildrenCount">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Controls.WebViewPresenter.Layers">
            <summary>
            Gets a list of UI layers currently visible.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebViewPresenter.DeviceTransform">
            <summary>
            Gets a device transformation matrix, useful to determine the current DPI settings,
            or <c>null</c> (<c>Nothing</c> in Visual Basic) if the presenter is not added to a visual
            tree or is not yet loaded for presentation.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebViewPresenter.Image">
            <summary>
            Gets an <see cref="T:System.Windows.Media.ImageSource"/> wrapping the pixel buffer currently rendered by this
            surface.
            </summary>        
        </member>
        <member name="P:Awesomium.Windows.Controls.WebViewPresenter.View">
            <inheritdoc cref="P:Awesomium.Core.IWebViewPresenter.View"/>
            <exception cref="T:System.ArgumentException">
            Only <i>offscreen</i> views (see <see cref="P:Awesomium.Core.IWebView.ViewType"/>) can be assigned to a
            <see cref="T:Awesomium.Windows.Controls.WebViewPresenter"/>. For <i>windowed</i> views, use an <see cref="T:Awesomium.Windows.Controls.WebViewHost"/>.
            </exception>
        </member>
        <member name="T:Awesomium.Windows.Data.ResourceDataSourceProvider">
            <summary>
            Represents a <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/> that provides
            a <see cref="T:Awesomium.Core.Data.ResourceDataSource"/> instance.
            </summary>
            <seealso cref="P:Awesomium.Windows.Controls.WebSessionProvider.DataSources"/>
        </member>
        <member name="T:Awesomium.Windows.Data.DataSourceProvider">
            <summary>
            Represents the base class for WPF <see cref="T:Awesomium.Core.Data.DataSource"/> providers.
            </summary>
            <remarks>
            The <c>key</c> (or <c>x:Key</c> in XAML) defined when adding
            this <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/> to <see cref="P:Awesomium.Windows.Controls.WebSessionProvider.DataSources"/>,
            indicates the asset domain the <see cref="T:Awesomium.Core.Data.DataSource"/> provided by this
            <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/>, will be bound to.
            <p/>
            This class inherits <see cref="T:System.Windows.DependencyObject"/>. You should in general
            specify properties, depending on the type of <see cref="T:Awesomium.Core.Data.DataSource"/> 
            this <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/> provides, as <see cref="T:System.Windows.DependencyProperty"/>, 
            that can be edited in XAML designer.
            <note>
            <see cref="N:Awesomium.Windows.Data"/> includes providers for all the <b>Awesomium.NET</b>
            <see cref="T:Awesomium.Core.Data.DataSource"/> types, available through <see cref="N:Awesomium.Core.Data"/>.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Controls.WebSessionProvider.DataSources"/>
        </member>
        <member name="M:Awesomium.Windows.Data.DataSourceProvider.GetDataSource">
            <summary>
            Called by the <see cref="T:Awesomium.Windows.Controls.WebSessionProvider"/>, when a
            <see cref="T:Awesomium.Core.Data.DataSource"/> must be provided by this <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/>.
            </summary>
            <returns>
            A <see cref="T:Awesomium.Core.Data.DataSource"/> instance that will be added to the
            <see cref="T:Awesomium.Core.WebSession"/> provided by a <see cref="T:Awesomium.Windows.Controls.WebSessionProvider"/>.
            <p/>
            The <c>key</c> (or <c>x:Key</c> in XAML) defined when adding
            this <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/> to <see cref="P:Awesomium.Windows.Controls.WebSessionProvider.DataSources"/>,
            indicates the asset domain the <see cref="T:Awesomium.Core.Data.DataSource"/> provided by this
            <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/>, will be bound to.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Data.ResourceDataSourceProvider.GetDataSource">
            <inheritdoc />
        </member>
        <member name="F:Awesomium.Windows.Data.ResourceDataSourceProvider.TypeProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Data.ResourceDataSourceProvider.Type"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Data.ResourceDataSourceProvider.AssemblyProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Data.ResourceDataSourceProvider.Assembly"/> dependency property.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Data.ResourceDataSourceProvider.Type">
            <summary>
            Gets or sets the type of application resources that this
            <see cref="T:Awesomium.Core.Data.ResourceDataSource"/> looks for.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Data.ResourceDataSourceProvider.Assembly">
            <summary>
            Gets or sets the path to the assembly that contains the resources.
            If no assembly is specified, resources are loaded from the current
            executable (default).
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Data.DataPakSourceProvider">
            <summary>
            Represents a <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/> that provides
            a <see cref="T:Awesomium.Core.Data.DataPakSource"/> instance.
            </summary>
            <seealso cref="P:Awesomium.Windows.Controls.WebSessionProvider.DataSources"/>
        </member>
        <member name="M:Awesomium.Windows.Data.DataPakSourceProvider.GetDataSource">
            <inheritdoc />
        </member>
        <member name="F:Awesomium.Windows.Data.DataPakSourceProvider.PakPathProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Data.DataPakSourceProvider.PakPath"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Data.DataPakSourceProvider.DirectoryProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Data.DataPakSourceProvider.Directory"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Data.DataPakSourceProvider.UseExistingPakFileProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Data.DataPakSourceProvider.UseExistingPakFile"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Data.DataPakSourceProvider.IgnoreExtensionsProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Data.DataPakSourceProvider.IgnoreExtensions"/> dependency property.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Data.DataPakSourceProvider.PakPath">
            <summary>
            Gets or sets the path to the PAK file used to load resources from.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Data.DataPakSourceProvider.Directory">
            <summary>
            Gets or sets a directory to create a PAK file from.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Data.DataPakSourceProvider.UseExistingPakFile">
            <summary>
            Gets or sets if an existing PAK file in the specified
            <see cref="P:Awesomium.Windows.Data.DataPakSourceProvider.Directory"/>, should be used.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Data.DataPakSourceProvider.IgnoreExtensions">
            <summary>
            Gets or sets a comma-separated string representing extensions
            of files that should be ignored in the specified <see cref="P:Awesomium.Windows.Data.DataPakSourceProvider.Directory"/>.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Data.DataSourceDictionary">
            <summary>
            Represents a collection of pairs of asset hosts and <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/> instances.
            </summary>
            <seealso cref="P:Awesomium.Windows.Controls.WebSessionProvider.DataSources"/>
        </member>
        <member name="T:Awesomium.Windows.Data.DirectoryDataSourceProvider">
            <summary>
            Represents a <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/> that provides
            a <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> instance.
            </summary>
            <seealso cref="P:Awesomium.Windows.Controls.WebSessionProvider.DataSources"/>
        </member>
        <member name="M:Awesomium.Windows.Data.DirectoryDataSourceProvider.GetDataSource">
            <inheritdoc />
        </member>
        <member name="F:Awesomium.Windows.Data.DirectoryDataSourceProvider.DirectoryProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.Directory"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Data.DirectoryDataSourceProvider.IgnoreExtensionsProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.IgnoreExtensions"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Data.DirectoryDataSourceProvider.MaximumSizeProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.MaximumSize"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Data.DirectoryDataSourceProvider.PreloadProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.Preload"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Data.DirectoryDataSourceProvider.IsInMemoryProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.IsInMemory"/> dependency property.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.Directory">
            <summary>
            Gets or sets the directory this data source will load resources from.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.IgnoreExtensions">
            <summary>
            Gets or sets a comma-separated string representing extensions
            of files that should be ignored, when resources are preloaded from the 
            specified <see cref="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.Directory"/>.
            </summary>
            <remarks>
            <note>
            This is only meaningful when <see cref="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.Preload"/> is <c>true</c>. If <see cref="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.Preload"/> is <c>false</c>,
            any matching resource requested, will be provided to the requesting page, even if the resource file
            has an extension included in the <see cref="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.IgnoreExtensions"/> comma-separated list.
            </note>
            </remarks>
            <seealso cref="M:Awesomium.Core.Data.DirectoryDataSource.Preload(System.String[])"/>
        </member>
        <member name="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.MaximumSize">
            <summary>
            Gets the maximum size of memory in bytes that this <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>
            instance should use to cache resources in memory. Specify <c>0</c>, to prevent
            caching resources in-memory.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.Preload">
            <summary>
            Gets or sets if resources from the directory and its subdirectories, should be pre-loaded to memory.
            </summary>
            <remarks>
            <see cref="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.Preload"/> will load all the available resources from the
            directory and its subdirectories to memory, ignoring files with the
            specified <see cref="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.IgnoreExtensions"/> and until it reaches the specified
            <see cref="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.MaximumSize"/>.
            <p/>
            This operation is performed asynchronously and the <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/>
            can still be used while files are being loaded in memory. When pre-loading
            completes, <see cref="E:Awesomium.Core.Data.DirectoryDataSource.PreloadComplete"/> is fired synchronously.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.IsInMemory">
            <summary>
            Gets if this is an in-memory data source provider.
            </summary>
            <remarks>
            In-memory <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> instances, cache the requested
            files in memory either when they are first requested, or by using
            <see cref="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.Preload"/>. In subsequent requests for the same resource,
            the <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> loads the resource from memory
            instead of reading from disk. This can significantly improve performance.
            <note>
            An in-memory <see cref="T:Awesomium.Core.Data.DirectoryDataSource"/> will stop caching resources
            to memory when the specified <see cref="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.MaximumSize"/> has been reached.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Data.DirectoryDataSourceProvider.MaximumSize"/>
        </member>
        <member name="T:Awesomium.Windows.Data.SourceBinding">
            <summary>
            Represents a markup extension that binds the <see cref="P:System.Windows.Controls.TextBox.Text"/>
            property of a WPF <see cref="T:System.Windows.Controls.TextBox"/>, to the <see cref="P:Awesomium.Core.IWebView.Source"/>
            property of a view (usually a <see cref="T:Awesomium.Windows.Controls.WebControl"/>), manipulates the bound 
            <see cref="T:System.Windows.Controls.TextBox"/> and manages its relationship with the source 
            <see cref="T:Awesomium.Core.IWebView"/> instance.
            </summary>
            <remarks>
            Besides binding the <see cref="P:System.Windows.Controls.TextBox.Text"/> property of a WPF <see cref="T:System.Windows.Controls.TextBox"/>, 
            to the <see cref="P:Awesomium.Core.IWebView.Source"/> property of a web-view, the <see cref="T:Awesomium.Windows.Data.SourceBinding"/>
            class significantly simplifies your code by monitoring user input and maintaining the
            proper relationship of the bound <see cref="T:System.Windows.Controls.TextBox"/> with the source <see cref="T:Awesomium.Core.IWebView"/> instance.
            <p/>
            The following list summarizes the features provided by <see cref="T:Awesomium.Windows.Data.SourceBinding"/>,
            when applied to the <see cref="P:System.Windows.Controls.TextBox.Text"/> property of a WPF <see cref="T:System.Windows.Controls.TextBox"/>:
            <list type="bullet">
            <item>
            <description>
            Keeps the contents of the <see cref="T:System.Windows.Controls.TextBox"/> updated with the textual
            representation of the current <see cref="P:Awesomium.Core.IWebView.Source"/>.
            </description>
            </item>
            <item>
            <description>
            When the user updates the contents of the <see cref="T:System.Windows.Controls.TextBox"/>, <see cref="T:Awesomium.Windows.Data.SourceBinding"/>
            explicitly updates the source <see cref="P:Awesomium.Core.IWebView.Source"/> property, only when the 
            <c>Return</c> key is being pressed.
            </description>
            </item>
            <item>
            <description>
            Applies proper value conversion. For example, a <c>null</c> <see cref="P:Awesomium.Core.IWebView.Source"/> 
            property will be presented as <c>about:blank</c> and any string will be properly parsed 
            before passed to the <see cref="T:Awesomium.Core.IWebView"/> instance.
            <note>
            Value conversion is provided through the <see cref="F:Awesomium.Windows.Data.SourceBinding.UriValueConverter"/>,
            that can also be used with other bindings in your application.
            </note> 
            </description>
            </item>
            <item>
            <description>
            Monitors the appropriate events and applies the required logic so that
            your <see cref="T:System.Windows.Controls.TextBox"/> behaves as an address-box. For example,
            when the <see cref="T:System.Windows.Controls.TextBox"/> gets keyboard focus, all contents are automatically
            selected; when it looses keyboard focus, the contents are updated to reflect
            the current value of <see cref="P:Awesomium.Core.IWebView.Source"/>.
            </description>
            </item>
            <item>
            <description>
            Manages focus toggling of the bound <see cref="T:System.Windows.Controls.TextBox"/> and the source
            <see cref="T:Awesomium.Core.IWebView"/> instance, whenever necessary.
            </description>
            </item>
            </list>
            <note>
            The <see cref="T:Awesomium.Windows.Data.SourceBinding"/> utilizes the WPF <i>weak event model</i>
            to monitor events. This prevents potential memory leaks.
            <p/>
            Weak event handling support is provided through the <see cref="T:Awesomium.Windows.InputEventManager"/>
            and the implementation of <see cref="T:System.Windows.IWeakEventListener"/>.
            The <see cref="T:Awesomium.Windows.InputEventManager"/> is available for you to use
            anywhere else in your project.
            </note>
            </remarks>
            <example>
            The following example presents the usage of <see cref="T:Awesomium.Windows.Data.SourceBinding"/>,
            in XAML.
            <code lang="XAML">
            <![CDATA[
            <Window 
                x:Class="WpfApplication1.MainWindow" 
                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                xmlns:awe="http://schemas.awesomium.com/winfx"
                xmlns:data="http://schemas.awesomium.com/winfx/data"
                Height="480" 
                Width="640">
                <Window.Title>
                    <Binding 
                        Path="Title" 
                        ElementName="webControl" 
                        StringFormat="Awesomium Simple WPF Sample - {0}"/>
                </Window.Title>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <Grid 
                        x:Name="toolbarContainer" 
                        MinHeight="30">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Button 
                            Margin="2" 
                            Padding="3"
                            Command="BrowseBack" 
                            CommandTarget="{Binding ElementName=webControl}">
                            Back
                        </Button>
                        <Button 
                            Grid.Column="1" 
                            Margin="2" 
                            Padding="3"
                            Command="BrowseForward" 
                            CommandTarget="{Binding ElementName=webControl}">
                            Forward
                        </Button>
                        <Button 
                            Grid.Column="2" 
                            Margin="2" 
                            Padding="3"
                            Command="Refresh" 
                            CommandParameter="False" 
                            CommandTarget="{Binding ElementName=webControl}">
                            Refresh
                        </Button>
                        <Button 
                            Grid.Column="3" 
                            Margin="2" 
                            Padding="3"
                            Command="BrowseHome" 
                            CommandTarget="{Binding ElementName=webControl}">
                            Home
                        </Button>
                        <!-- Address box. -->
                        <TextBox 
                            x:Name="addressBox" 
                            Grid.Column="4"
                            Margin="3"
                            VerticalContentAlignment="Center" 
                            Text="{data:SourceBinding webControl}"/>
                    </Grid>
                    <!-- WebControl -->
                    <awe:WebControl 
                        x:Name="webControl" 
                        Grid.Row="1" 
                        BorderThickness="0,1,0,0" 
                        BorderBrush="Gray"
                        Source="http://www.awesomium.net"/>
                </Grid>
            </Window>
            ]]>
            </code>
            </example>
            <seealso cref="F:Awesomium.Windows.Data.SourceBinding.UriValueConverter"/>
            <seealso cref="T:Awesomium.Windows.InputEventManager"/>
            <seealso cref="P:Awesomium.Windows.Data.SourceBinding.DoNotHandleUserInput"/>
        </member>
        <member name="F:Awesomium.Windows.Data.SourceBinding.UriValueConverter">
            <summary>
            The <see cref="T:System.Windows.Data.IValueConverter"/> used by this <see cref="T:System.Windows.Markup.MarkupExtension"/>
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Data.SourceBinding.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Data.SourceBinding.ElementName">
            <summary>
            Gets or sets the name of the <see cref="T:Awesomium.Windows.Controls.WebControl"/> element to use as the binding source object.
            </summary>
            <returns>
            The value of the <c>Name</c> property or <c>x:Name</c> Directive of the <see cref="T:Awesomium.Windows.Controls.WebControl"/> element of interest.
            </returns>
        </member>
        <member name="P:Awesomium.Windows.Data.SourceBinding.RelativeSource">
            <summary>
            Gets or sets the binding source by specifying its location relative to the position of the binding target.
            </summary>
            <returns>
            A <see cref="P:Awesomium.Windows.Data.SourceBinding.RelativeSource"/> object specifying the relative location of the binding source to use.
            The default is <c>null</c> (<c>Nothing</c> in Visual Basic).
            </returns>
        </member>
        <member name="P:Awesomium.Windows.Data.SourceBinding.Source">
            <summary>
            Gets or sets the object to use as the binding source.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Data.SourceBinding.Mode">
            <summary>
            Gets or sets a value that indicates the direction of the data flow in the binding.
            </summary>
            <inheritdoc cref="P:System.Windows.Data.Binding.Mode"/>
        </member>
        <member name="P:Awesomium.Windows.Data.SourceBinding.DoNotHandleUserInput">
            <summary>
            Gets or sets if the <see cref="T:Awesomium.Windows.Data.SourceBinding"/> should deactivate any manipulation
            of the bound <see cref="T:System.Windows.Controls.TextBox"/> element. The default value is <c>false</c>,
            which means that the <see cref="T:Awesomium.Windows.Data.SourceBinding"/> will regularly manipulate
            the bound <see cref="T:System.Windows.Controls.TextBox"/>, to make it act as a web address-box.
            </summary>
            <remarks>
            If this is set to <c>true</c>, the <see cref="T:Awesomium.Windows.Data.SourceBinding"/> will not
            monitor user input and will not perform any manipulation of the bound
            <see cref="T:System.Windows.Controls.TextBox"/>, other than binding its <see cref="P:System.Windows.Controls.TextBox.Text"/>
            property to the <see cref="P:Awesomium.Core.IWebView.Source"/> property of the source web-view.
            <p/>
            No explicit updating of the source and target properties will be applied.
            Updating of the <see cref="P:Awesomium.Core.IWebView.Source"/> property will fall back to
            <see cref="F:System.Windows.Data.UpdateSourceTrigger.PropertyChanged"/>, which means that the 
            <see cref="P:Awesomium.Core.IWebView.Source"/> property will be updated every time you edit
            the contents of the <see cref="T:System.Windows.Controls.TextBox"/>, irrespective of user input (updating
            will not wait for the user to hit <c>Return</c>).
            <p/>
            Focus toggling, selecting of contents and other features will also be deactivated.
            <p/>
            Setting <see cref="P:Awesomium.Windows.Data.SourceBinding.DoNotHandleUserInput"/> to <c>true</c> can be useful if you are
            binding the <see cref="P:System.Windows.Controls.TextBox.Text"/> property of a read-only <see cref="T:System.Windows.Controls.TextBox"/> 
            (see <see cref="P:System.Windows.Controls.Primitives.TextBoxBase.IsReadOnly"/>).
            </remarks>
        </member>
        <member name="T:Awesomium.Windows.Data.UriValueConverter">
            <summary>
            Provides a way to apply custom conversion logic to a <see cref="T:Awesomium.Windows.Data.SourceBinding"/>.
            </summary>
            <remarks>
            This value converter can convert a <see cref="T:System.Uri"/> from and to <see cref="T:System.String"/>.
            You can use it in your own bindings.
            <note>
            This value converter is applied by default to instances of <see cref="T:Awesomium.Windows.Data.SourceBinding"/>.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Data.UriValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            This should be a <see cref="T:System.Uri"/> or a <c>null</c>
            (<c>Nothing</c> in Visual Basic) value.
            </param>
            <param name="targetType">
            The type of the binding target property.
            This should be <see cref="T:System.String"/>.
            </param>
            <param name="parameter">
            The converter parameter to use. When <see cref="T:Awesomium.Windows.Data.UriValueConverter"/>
            is used with <see cref="T:Awesomium.Windows.Data.SourceBinding"/>, no <paramref name="parameter"/>
            is specified.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns <c>null</c>, 
            the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Data.UriValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            This should be a <see cref="T:System.String"/> or a <c>null</c>
            (<c>Nothing</c> in Visual Basic) value.
            </param>
            <param name="targetType">
            The type to convert to.
            This should be <see cref="T:System.Uri"/>.
            </param>
            <param name="parameter">
            The converter parameter to use. When <see cref="T:Awesomium.Windows.Data.UriValueConverter"/>
            is used with <see cref="T:Awesomium.Windows.Data.SourceBinding"/>, no <paramref name="parameter"/>
            is specified.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns <c>null</c>, 
            the valid <c>null</c> value is used.
            </returns>
        </member>
        <member name="T:Awesomium.Windows.Controls.ImageSurface">
            <summary>
            Represents an <see cref="T:Awesomium.Core.ISurface"/> that renders the pixel buffer of a <see cref="T:Awesomium.Core.IWebView"/>,
            to an <see cref="P:Awesomium.Windows.Controls.ImageSurface.Image"/>. You can then draw this image to a <see cref="T:System.Windows.Controls.Image"/>,
            or assign it to an <see cref="T:System.Windows.Media.ImageBrush"/>.
            </summary>
            <remarks>
            You can create and return an instance of this class, when <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> is
            being called. Usually, you can cache and return the same <see cref="T:Awesomium.Windows.Controls.ImageSurface"/> instance
            on multiple <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> calls. The <see cref="T:Awesomium.Windows.Controls.ImageSurface"/> takes
            care of updating the <see cref="P:Awesomium.Windows.Controls.ImageSurface.Image"/> to reflect the new surface size.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.ImageSurface.OnInitialized(System.Object,Awesomium.Core.SurfaceInitializedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.ImageSurface.Initialized"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.ImageSurface.OnUpdated(System.Object,Awesomium.Core.SurfaceUpdatedEventArgs)">
            <summary>
            Triggers the <see cref="E:Awesomium.Windows.Controls.ImageSurface.Updated"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.ImageSurface.#ctor(System.Nullable{System.Windows.Media.Matrix})">
            <summary>
            Initializes a new instance of the <see cref="T:Awesomium.Windows.Controls.ImageSurface"/> class.
            </summary>
            <param name="deviceTransform">
            Device transformation (used for getting DPI settings). Can be
            <c>null</c> (<c>Nothing</c> in Visual Basic) for default DPI settings.
            </param>
        </member>
        <member name="F:Awesomium.Windows.Controls.ImageSurface.ImageProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.ImageSurface.Image"/> dependency property.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.ImageSurface.Dispose">
            <summary>
            Perform cleanup of managed resources.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.ImageSurface.OnDispose(System.Boolean)">
            <summary>
            Called when an instance of this class is being disposed.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="E:Awesomium.Windows.Controls.ImageSurface.Disposed">
            <summary>
            Occurs when an instance of this class has been disposed.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.ImageSurface.Initialized">
            <summary>
            Occurs when this surface is being initialized for use with a <see cref="T:Awesomium.Core.IWebView"/>.
            </summary>
            <remarks>
            This event can be called more than once if you are reusing this surface
            for multiple <see cref="E:Awesomium.Core.IWebView.CreateSurface"/> calls.
            <note>
            Once assigned to a view and initialized, a surface can only be used
            with that single view.
            </note>
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Controls.ImageSurface.Updated">
            <summary>
            Occurs when the surface has been updated.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.ImageSurface.Image">
            <summary>
            Gets the <see cref="T:System.Windows.Media.ImageSource"/> where the pixel buffer of an <see cref="T:Awesomium.Core.IWebView"/>
            is being rendered.
            </summary>        
        </member>
        <member name="P:Awesomium.Windows.Controls.ImageSurface.IsDisposed">
            <summary>
            Gets if this instance is already disposed and eligible for garbage collection.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.InputEventType">
            <summary>
            Represents the user input events of a <see cref="T:System.Windows.UIElement"/>,
            that an <see cref="T:Awesomium.Windows.InputEventManager"/> can attach listeners for.
            </summary>
            <seealso cref="M:Awesomium.Windows.InputEventManager.AddListener(System.Windows.UIElement,Awesomium.Windows.InputEventType,System.Windows.IWeakEventListener)"/>
            <seealso cref="M:Awesomium.Windows.InputEventManager.RemoveListener(System.Windows.UIElement,Awesomium.Windows.InputEventType,System.Windows.IWeakEventListener)"/>
        </member>
        <member name="T:Awesomium.Windows.InputEventManager">
            <summary> 
            Provides a <see cref="T:System.Windows.WeakEventManager"/> implementation so that you can use the 
            "weak event listener" pattern to attach listeners for the user input events of a 
            <see cref="T:System.Windows.UIElement"/>.
            </summary> 
        </member>
        <member name="M:Awesomium.Windows.InputEventManager.AddListener(System.Windows.UIElement,Awesomium.Windows.InputEventType,System.Windows.IWeakEventListener)">
            <summary>
            Add a listener to the given source's event. 
            </summary>
        </member>
        <member name="M:Awesomium.Windows.InputEventManager.RemoveListener(System.Windows.UIElement,Awesomium.Windows.InputEventType,System.Windows.IWeakEventListener)">
            <summary> 
            Remove a listener to the given source's event.
            </summary> 
        </member>
        <member name="M:Awesomium.Windows.InputEventManager.Purge(System.Object,System.Object,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Awesomium.Windows.InputEventManager.StartListening(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Awesomium.Windows.InputEventManager.StopListening(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Awesomium.Windows.Controls.WPFResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.ActivateIME">
            <summary>
              Looks up a localized string similar to Activate IME.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.AddURLFilter">
            <summary>
              Looks up a localized string similar to Add URL Filter.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.BuildOrReparentWindow">
            <summary>
              Looks up a localized string similar to BuildOrReparentWindow.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.CancelIMEComposition">
            <summary>
              Looks up a localized string similar to Cancel IME Composition.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.ClearAllURLFilters">
            <summary>
              Looks up a localized string similar to Clear all URL filters.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.ConfirmIMEComposition">
            <summary>
              Looks up a localized string similar to Confirm IME Composition.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.CopyHTML">
            <summary>
              Looks up a localized string similar to Copy HTML.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.CopyImage">
            <summary>
              Looks up a localized string similar to Copy Image.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.CopyLinkAddress">
            <summary>
              Looks up a localized string similar to Copy Link Address.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.CreateObject">
            <summary>
              Looks up a localized string similar to Create Object.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.DestroyObject">
            <summary>
              Looks up a localized string similar to Destroy Object.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.HwndHostHWNDField">
            <summary>
              Looks up a localized string similar to _hwnd.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.IgnoreCertificateError">
            <summary>
              Looks up a localized string similar to Ignore Certificate Error.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.LoadFile">
            <summary>
              Looks up a localized string similar to Load File.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.LoadURL">
            <summary>
              Looks up a localized string similar to Load URL.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.RequestPageInfo">
            <summary>
              Looks up a localized string similar to Request Web-Page Info.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.ResetZoom">
            <summary>
              Looks up a localized string similar to Reset Zoom.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WPFResources.StopFind">
            <summary>
              Looks up a localized string similar to Stop Find.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.Utilities">
            <summary>
            Utility class providing helper methods that can be used by WPF applications.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.DoEvents(System.Windows.Application)">
            <summary>
            Process pending operations down to the lowest priority.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.DoEvents(System.Windows.Application,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Process pending operations down to the specified <paramref name="priority"/>.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.GetCursor(Awesomium.Core.CursorType)">
            <summary>
            Gets the WPF <see cref="T:System.Windows.Input.Cursor"/> equivalent of an Awesomium <see cref="T:Awesomium.Core.CursorType"/>.
            </summary>
            <param name="cursor">
            The Awesomium cursor type. You can get this by handling the <see cref="E:Awesomium.Windows.Controls.WebControl.CursorChanged"/> event.
            </param>
            <returns>
            A WPF <see cref="T:System.Windows.Input.Cursor"/>, or <see cref="P:System.Windows.Input.Cursors.None"/> if <see cref="F:Awesomium.Core.CursorType.None"/>
            is specified.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.GetModifiers(System.Windows.Input.ModifierKeys)">
            <summary>
            Gets the Awesomium <see cref="T:Awesomium.Core.Modifiers"/> equivalent of WPF <see cref="T:System.Windows.Input.ModifierKeys"/>.
            </summary>
            <returns>
            The Awesomium <see cref="T:Awesomium.Core.Modifiers"/> equivalent of WPF <see cref="T:System.Windows.Input.ModifierKeys"/>.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.GetCurrentModifiers">
            <summary>
            Gets the modifiers currently pressed.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.GetKeyboardEvent(System.Windows.Input.KeyEventArgs,Awesomium.Core.WebKeyboardEventType)">
            <summary>
            Gets an Awesomium <see cref="T:Awesomium.Core.WebKeyboardEvent"/> equivalent of a WPF key-down or key-up event.
            </summary>
            <param name="e">
            The WPF key-down or key-up event arguments.
            </param>
            <param name="eventType">
            Indicates if this is a key-down or key-up event.
            </param>
            <returns>
            An instance of a <see cref="T:Awesomium.Core.WebKeyboardEvent"/> representing the Awesomium equivalent of a
            WPF key-down or key-up event.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.GetKeyboardEvent(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Gets an Awesomium <see cref="T:Awesomium.Core.WebKeyboardEvent"/> equivalent of a WPF key-press (text-input) event.
            </summary>
            <param name="e">
            The WPF key-press (text-input) event arguments. Only the first character of <see cref="P:System.Windows.Input.TextCompositionEventArgs.Text"/>
            or <see cref="P:System.Windows.Input.TextCompositionEventArgs.SystemText"/> is taken into consideration.
            </param>
            <returns>
            An instance of a <see cref="T:Awesomium.Core.WebKeyboardEvent"/> representing the Awesomium equivalent of a
            WPF key-press (text-input) event.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.GetInt32Rect(Awesomium.Core.AweRect)">
            <summary>
            Gets an <see cref="T:System.Windows.Int32Rect"/> equivalent of an Awesomium <see cref="T:Awesomium.Core.AweRect"/>.
            </summary>
            <param name="aweRect">
            An <see cref="T:Awesomium.Core.AweRect"/> value representing an Awesomium rectangle.
            </param>
            <returns>
            A <see cref="T:System.Windows.Int32Rect"/> value equivalent of an Awesomium <see cref="T:Awesomium.Core.AweRect"/>.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.GetMessageBoxButton(Awesomium.Core.JSDialogFlags)">
            <summary>
            Gets a <see cref="T:System.Windows.MessageBoxButton"/> equivalent of an Awesomium <see cref="T:Awesomium.Core.JSDialogFlags"/>.
            </summary>
            <param name="flags">
            A <see cref="T:Awesomium.Core.JSDialogFlags"/> value representing the Javascript dialog flags.
            </param>
            <returns>
            A <see cref="T:System.Windows.MessageBoxButton"/> value equivalent of an Awesomium <see cref="T:Awesomium.Core.JSDialogFlags"/>.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.GetMessageBoxImage(Awesomium.Core.JSDialogFlags)">
            <summary>
            Gets a <see cref="T:System.Windows.MessageBoxImage"/> equivalent of an Awesomium <see cref="T:Awesomium.Core.JSDialogFlags"/>.
            </summary>
            <param name="flags">
            A <see cref="T:Awesomium.Core.JSDialogFlags"/> value representing the Javascript dialog flags.
            </param>
            <returns>
            A <see cref="T:System.Windows.MessageBoxImage"/> value equivalent of an Awesomium <see cref="T:Awesomium.Core.JSDialogFlags"/>.
            </returns>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebSessionProvider">
            <summary>
            Represents a WPF <see cref="T:Awesomium.Core.WebSession"/> provider, that you can use as 
            binding source for <see cref="P:Awesomium.Windows.Controls.WebControl.WebSession"/>.
            </summary>
            <remarks>
            <b>For examples, please read: 
            <a href="http://wiki.awesomium.net/general-use/using-web-sessions.html">Using Web-Sessions</a></b>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebSessionProvider.BeginQuery">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Controls.WebSessionProvider.Preferences">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Core.WebPreferences"/> to use with the created session.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebSessionProvider.DataPath">
            <summary>
            Gets or sets the disk data path of this session, if any.
            </summary>
            <remarks>
            Leave this empty to create an in-memory <see cref="T:Awesomium.Core.WebSession"/>.
            <p/>
            If another <see cref="T:Awesomium.Core.WebSession"/> using the same data path has previously been 
            created, the <see cref="T:Awesomium.Windows.Controls.WebSessionProvider"/> will provide the previous session,
            instead of creating a new one. In this case, any preferences defined in <see cref="P:Awesomium.Windows.Controls.WebSessionProvider.Preferences"/>,
            are ignored.
            <p/>
            This prevents exceptions that would occur when more than one <see cref="T:Awesomium.Core.WebSession"/>s
            attempt to access the same data store. This feature also provides an easy way to
            re-use an <i>on-disk</i> <see cref="T:Awesomium.Core.WebSession"/> with multiple <see cref="T:Awesomium.Windows.Controls.WebControl"/>
            instances residing on different WPF containers: Just specify the same <see cref="P:Awesomium.Windows.Controls.WebSessionProvider.DataPath"/>
            on all your <see cref="T:Awesomium.Windows.Controls.WebSessionProvider"/>s and they will all provide the same session.
            <p/>
            <b>For more details, read: 
            <a href="http://wiki.awesomium.net/general-use/using-web-sessions.html">Using Web-Sessions</a></b>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebSessionProvider.DataSources">
            <summary>
            Gets a collection of pairs of asset hosts and <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/> instances.
            </summary>
            <remarks>
            The <c>key</c> (or <c>x:Key</c> in XAML) defined when adding
            a <see cref="T:Awesomium.Windows.Data.DataSourceProvider"/> to <see cref="T:Awesomium.Windows.Data.DataSourceDictionary"/>,
            indicates the asset domain the <see cref="T:Awesomium.Core.Data.DataSource"/> will be bound to.
            </remarks>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebControlCommands">
            <summary>
            Defines routed commands that are common to a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            In addition to the <see cref="T:Awesomium.Windows.Controls.WebControl"/> specific routed UI commands defined in 
            <see cref="T:Awesomium.Windows.Controls.WebControlCommands"/>, the <see cref="T:Awesomium.Windows.Controls.WebControl"/> reuses many of the
            <see cref="T:System.Windows.Input.ApplicationCommands"/> and <see cref="T:System.Windows.Input.NavigationCommands"/> available with
            the .NET Framework. In order to get the text of these commands displayed in your
            system's locale, you may need to download a <a href="http://www.microsoft.com/download/en/details.aspx?id=23067">
            Microsoft .NET Framework 4 Client Language Pack (x86 x64)</a>.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.LoadURL">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.LoadURL(System.Uri)"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            When binding to this command, specify the URL as a command parameter.
            The URL can be a <see cref="T:System.Uri"/> instance or a string representing the source URL.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.CreateObject">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.CreateGlobalJavascriptObject(System.String)"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            When binding to this command, specify the name of the Javascript object to create, as a command parameter.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.ResetZoom">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.ResetZoom"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.CopyHTML">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.CopyHTML"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.CopyLinkAddress">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.CopyLinkAddress"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.CopyImage">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.CopyImageAt(System.Int32,System.Int32)"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            When executing this command, the <see cref="T:Awesomium.Windows.Controls.WebControl"/> uses the latest right-click coordinates
            as defined in the <see cref="T:Awesomium.Core.WebContextMenuInfo"/> provided by 
            <see cref="P:Awesomium.Windows.Controls.WebControl.LatestContextData"/>,
            to locate the image in the web-page.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.RequestPageInfo">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.RequestPageInfo"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.IgnoreCertificateError">
            <summary>
            Gets a command that tells the <see cref="T:Awesomium.Windows.Controls.WebControl"/> to ignore a certificate error when you handle the
            <see cref="E:Awesomium.Core.IWebView.CertificateError"/> event with <see cref="F:Awesomium.Core.EventHandling.NotModal"/>
            (see <see cref="P:Awesomium.Core.CertificateErrorEventArgs.Handled"/>).
            </summary>
            <remarks>
            If a <c>CommandParameter</c> is specified, it should be <c>True</c> or <c>False</c> indicating that the
            error should or should not be ignored respectively. If a <c>CommandParameter</c> is not specified,
            the command will tell that the certificate error must be ignored. Use with caution.
            </remarks>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
