<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Awesomium.Windows.Controls</name>
    </assembly>
    <members>
        <member name="M:Awesomium.Windows.Controls.AddressBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.AddressBox.OnTextChanged(System.Windows.Controls.TextChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.AddressBox.OnGotFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.AddressBox.OnLostFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.AddressBox.ClearAutoCompleteList">
            <summary>
            Clears the contents of the auto-complete source.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.AddressBox.RefreshAutoComplete">
            <summary>
            Updates the contents of the auto-complete source (currently the <see cref="P:Awesomium.Windows.Controls.AddressBox.HistorySource"/>).
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.AddressBox.WebControl">
            <summary>
            Gets or sets the <see cref="T:Awesomium.Windows.Controls.WebControl"/> currently
            assigned to this <see cref="T:Awesomium.Windows.Controls.AddressBox"/>.
            </summary>
            <remarks>
            When a <see cref="T:Awesomium.Windows.Controls.WebControl"/> has been assigned
            to this property, the value of <see cref="P:Awesomium.Windows.Controls.AddressBox.URL"/> is bound to the
            <see cref="P:Awesomium.Windows.Controls.WebControl.Source"/> property:
            <list type="bullet">
            <item>
            <description>
            Manually setting the <see cref="P:Awesomium.Windows.Controls.AddressBox.URL"/> property, will transfer
            a navigation request to the to the assigned <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </description>
            </item>
            <item>
            <description>
            The value of <see cref="P:Awesomium.Windows.Controls.AddressBox.URL"/> is automatically updated based on the URL
            currently loaded to the assigned <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Controls.AddressBox.URL"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.AddressBox.URL">
            <summary>
            Gets or sets the URL currently displayed by the <see cref="T:Awesomium.Windows.Controls.AddressBox"/>.
            </summary>
            <remarks>
            When a <see cref="T:Awesomium.Windows.Controls.WebControl"/> has been assigned
            to the <see cref="P:Awesomium.Windows.Controls.AddressBox.WebControl"/> property,
            the value of this property is bound to the <see cref="P:Awesomium.Windows.Controls.WebControl.Source"/>
            property:
            <list type="bullet">
            <item>
            <description>
            Manually setting this property will transfer a navigation request to the
            to the assigned <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </description>
            </item>
            <item>
            <description>
            The value of this property is automatically updated based on the URL
            currently loaded to the assigned <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Controls.AddressBox.WebControl"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.AddressBox.IsDropDownOpen">
            <summary>
            Gets or sets if the suggestions drop-down list is open.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebControlDialogLayer">
            <summary>
            Represents a dialog layer displayed over a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            Dialog layers are reusable. They should be created only once
            in the lifetime of the <see cref="T:Awesomium.Windows.Controls.WebControl"/> they will be used with.
            You should later use the <see cref="M:Awesomium.Windows.Controls.WebControlDialogLayer.Open``1(``0)"/> and <see cref="M:Awesomium.Windows.Controls.WebControlDialogLayer.Close"/>
            methods to show or hide the layer when needed.
            </remarks>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebControlLayer">
            <summary>
            Base class of all control layers associated to a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            You cannot directly derive from this class. You should instead subclass
            a pre-defined derived class such as <see cref="T:Awesomium.Windows.Controls.WebControlDialogLayer"/>.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlLayer.#ctor(Awesomium.Windows.Controls.WebControl)">
            <summary>
            Creates an instance of <see cref="T:Awesomium.Windows.Controls.WebControlDialogLayer"/>.
            </summary>
            <param name="parent">
            Indicated the parent <see cref="T:Awesomium.Windows.Controls.WebControl"/> the layer belongs too.
            </param>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlLayer.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlLayer.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlLayer.OnContentChanged(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlLayer.ParentControl">
            <summary>
            Gets the parent <see cref="T:Awesomium.Windows.Controls.WebControl"/> the layer belongs to.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlLayer.IsContentVisual">
            <summary>
            Gets or sets if the specified <see cref="P:System.Windows.Controls.ContentControl.Content"/> should be treated as visual content,
            or as a data provider only. The default is <c>false</c> which means that the
            content will be treated as a data provider, visualized using the <see cref="P:System.Windows.Controls.ContentControl.ContentTemplate"/>.
            </summary>
            <remarks>
            Regularly, the use of DataTemplates is preferred when visualizing data, compared to direct
            visual Content. DataTemplates allow flexible use of Triggers etc.. In such scenarios, 
            the WebControl or the layers themselves are used as Content (so that the DataTemplate
            can access them as data providers). Without this property, WPF would attempt to remove the
            visual Content from the visual tree and add it as a child of this ContentControl.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlDialogLayer.#ctor(Awesomium.Windows.Controls.WebControl)">
            <summary>
            Creates an instance of <see cref="T:Awesomium.Windows.Controls.WebControlDialogLayer"/>.
            </summary>
            <param name="parent">
            Indicated the parent <see cref="T:Awesomium.Windows.Controls.WebControl"/> the layer belongs too
            (see Remarks section).
            </param>
            <remarks>
            Dialog layers are reusable. They should be created only once
            in the lifetime of the <see cref="T:Awesomium.Windows.Controls.WebControl"/> they will be used with.
            You should later use the <see cref="M:Awesomium.Windows.Controls.WebControlDialogLayer.Open``1(``0)"/> and <see cref="M:Awesomium.Windows.Controls.WebControlDialogLayer.Close"/>
            methods to show or hide the layer when needed.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlDialogLayer.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlDialogLayer.Open``1(``0)">
            <summary>
            Shows the dialog layer.
            </summary>
            <param name="data">
            The <see cref="T:System.ComponentModel.CancelEventArgs"/> of the event that triggers
            the activation of the dialog. All dialog events in <see cref="T:Awesomium.Core.IWebView"/>,
            inherit <see cref="T:System.ComponentModel.CancelEventArgs"/>.
            </param>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlDialogLayer.Close">
            <summary>
            Hides the dialog layer.
            </summary>
            <remarks>
            This method should be called by a derived control,
            usually in response to <see cref="M:Awesomium.Windows.Controls.WebControlDialogLayer.OnResponse(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)"/>.
            After hiding, the layer will be automatically removed
            from the <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </remarks>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlDialogLayer.MessageProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.Message"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlDialogLayer.ImageSourceProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.ImageSource"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlDialogLayer.HasOKButtonProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.HasOKButton"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlDialogLayer.HasCancelButtonProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.HasCancelButton"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlDialogLayer.IsActiveProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.IsActive"/> dependency property.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlDialogLayer.OnResponse(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Executed when either the OK or the Cancel button is clicked.
            </summary>
            <param name="sender">
            The command target (dialog button) that is invoking the handler.
            </param>
            <param name="e">
            Event data.
            <p/>
            <note>
            The <see cref="P:System.Windows.Input.ExecutedRoutedEventArgs.Parameter"/> is a boolean value
            indicating if the <b>OK</b> or the <b>Cancel</b> button has been clicked.
            </note>
            </param>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlDialogLayer.OnCanRespond(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Occurs when the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.Respond"/> command initiates a check to determine
            whether the command can be executed on a dialog button.
            </summary>
            <param name="sender">
            The command target (dialog button) that is invoking the handler.
            </param>
            <param name="e">
            Event data.
            </param>
            <remarks>
            The default setting for the <see cref="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute"/> property
            of the <paramref name="e"/> argument, is <c>true</c> for the <b>Cancel</b> button
            and <c>false</c> for the <b>OK</b> button.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.Data">
            <summary>
            Gets the dialog's data provided to the <see cref="M:Awesomium.Windows.Controls.WebControlDialogLayer.Open``1(``0)"/>
            method, or <c>null</c> (<c>Nothing</c> in Visual Basic)
            if the dialog is not active.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.Respond">
            <summary>
            Routed command assigned to the dialog's buttons.
            </summary>
            <remarks>
            <see cref="P:System.Windows.Controls.Primitives.ButtonBase.CommandParameter"/> is set to either
            <c>true</c> or <c>false</c> to indicate OK or Cancel respectively.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.Message">
            <summary>
            Gets or sets the main message displayed by the dialog.
            </summary>
            <remarks>
            All dialogs launched by a <see cref="T:Awesomium.Windows.Controls.WebControl"/>,
            should contain a main message for the user.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.ImageSource">
            <summary>
            Gets or sets the image displayed in the dialog.
            </summary>
            <remarks>
            The fixed width of the column hosting the Image, 
            can be defined in the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.ImageColumnWidth"/>
            property.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.ImageColumnWidth">
            <summary>
            Gets the fixed width of the dialogs left column,
            which hosts the dialogs image. The default is 80px.
            </summary>
            <remarks>
            This property can be very useful for adjusting
            the width of your columns. If you use a grid in
            your custom content, bind the width of your left 
            <see cref="T:System.Windows.Controls.ColumnDefinition"/> to this property.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.HasOKButton">
            <summary>
            Gets if an OK button is displayed in the dialog.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.HasCancelButton">
            <summary>
            Gets if a Cancel button is displayed in the dialog.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlDialogLayer.IsActive">
            <summary>
            Gets if the layer is currently active and visible.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebControlJSDialogLayer">
            <summary>
            Represents a dialog layer shown in response to a JavaScript dialog request.
            </summary>
            <remarks>
            Dialog layers are reusable. They should be created only once
            in the lifetime of the <see cref="T:Awesomium.Windows.Controls.WebControl"/> they will be used with.
            You should later use the <see cref="M:Awesomium.Windows.Controls.WebControlJSDialogLayer.Open``1(``0)"/> and <see cref="M:Awesomium.Windows.Controls.WebControlDialogLayer.Close"/>
            methods to show or hide the layer when needed.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControlJSDialogLayer.Open``1(``0)">
            <inheritdoc/>
            <param name="data">
            The <see cref="T:Awesomium.Core.JavascriptDialogEventArgs"/> of the event that triggers
            the activation of the dialog.
            </param>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlJSDialogLayer.HasPromptFieldProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlJSDialogLayer.HasPromptField"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlJSDialogLayer.HasMessageProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlJSDialogLayer.HasMessage"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlJSDialogLayer.FrameURLProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlJSDialogLayer.FrameURL"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControlJSDialogLayer.PromptProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControlJSDialogLayer.Prompt"/> dependency property.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlJSDialogLayer.HasPromptField">
            <summary>
            Gets if a prompt field is displayed in the dialog.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlJSDialogLayer.HasMessage">
            <summary>
            Gets if a message is displayed in the dialog.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlJSDialogLayer.FrameURL">
            <summary>
            Gets the address of the page that launches the dialog.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlJSDialogLayer.Prompt">
            <summary>
            Gets the default prompt and sets the text the user entered.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.Resources.ActivateIME">
            <summary>
              Looks up a localized string similar to Activate IME.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.Resources.AddURLFilter">
            <summary>
              Looks up a localized string similar to Add URL Filter.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.Resources.CancelIMEComposition">
            <summary>
              Looks up a localized string similar to Cancel IME Composition.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.Resources.ClearAllURLFilters">
            <summary>
              Looks up a localized string similar to Clear all URL filters.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.Resources.ConfirmIMEComposition">
            <summary>
              Looks up a localized string similar to Confirm IME Composition.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.Resources.CopyHTML">
            <summary>
              Looks up a localized string similar to Copy HTML.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.Resources.CopyImage">
            <summary>
              Looks up a localized string similar to Copy Image.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.Resources.CopyLinkAddress">
            <summary>
              Looks up a localized string similar to Copy Link Address.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.Resources.CreateObject">
            <summary>
              Looks up a localized string similar to Create Object.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.Resources.DestroyObject">
            <summary>
              Looks up a localized string similar to Destroy Object.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.Resources.LoadFile">
            <summary>
              Looks up a localized string similar to Load File.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.Resources.LoadURL">
            <summary>
              Looks up a localized string similar to Load URL.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.Resources.ResetZoom">
            <summary>
              Looks up a localized string similar to Reset Zoom.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.Resources.StopFind">
            <summary>
              Looks up a localized string similar to Stop Find.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.Utilities">
            <summary>
            Utility class providing helper methods that can be used by WPF applications.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.GetCursor(Awesomium.Core.CursorType)">
            <summary>
            Gets the WPF <see cref="T:System.Windows.Input.Cursor"/> equivalent of an Awesomium <see cref="T:Awesomium.Core.CursorType"/>.
            </summary>
            <param name="cursor">
            The Awesomium cursor type. You can get this by handling the <see cref="E:Awesomium.Windows.Controls.WebControl.CursorChanged"/> event.
            </param>
            <returns>
            A WPF <see cref="T:System.Windows.Input.Cursor"/>, or <see cref="P:System.Windows.Input.Cursors.None"/> if <see cref="F:Awesomium.Core.CursorType.None"/>
            is specified.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.GetKeyboardEvent(System.Windows.Input.KeyEventArgs,Awesomium.Core.WebKeyType)">
            <summary>
            Gets an Awesomium <see cref="T:Awesomium.Core.WebKeyboardEvent"/> equivalent of a WPF key-down or key-up event.
            </summary>
            <param name="e">
            The WPF key-down or key-up event arguments.
            </param>
            <param name="eventType">
            Indicates if this is a key-down or key-up event.
            </param>
            <returns>
            An instance of a <see cref="T:Awesomium.Core.WebKeyboardEvent"/> representing the Awesomium equivalent of a
            WPF key-down or key-up event.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.GetKeyboardEvent(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Gets an Awesomium <see cref="T:Awesomium.Core.WebKeyboardEvent"/> equivalent of a WPF key-press (text-input) event.
            </summary>
            <param name="e">
            The WPF key-press (text-input) event arguments. Only the first character of <see cref="P:System.Windows.Input.TextCompositionEventArgs.Text"/>
            or <see cref="P:System.Windows.Input.TextCompositionEventArgs.SystemText"/> is taken into consideration.
            </param>
            <returns>
            An instance of a <see cref="T:Awesomium.Core.WebKeyboardEvent"/> representing the Awesomium equivalent of a
            WPF key-press (text-input) event.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.CopyToBitmap(Awesomium.Core.RenderBuffer,System.Windows.Media.Imaging.WriteableBitmap@,System.Nullable{System.Windows.Media.Matrix})">
            <summary>
            Copy the buffer to a <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/> that can be rendered in WPF.
            </summary>
            <param name="buffer">
            A <see cref="T:Awesomium.Core.RenderBuffer"/> obtained through <see cref="M:Awesomium.Windows.Controls.WebControl.Render"/>.
            </param>
            <param name="bitmap">
            Reference to a <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/> to write to. This should be reused.
            If a null reference is specified, a new bitmap will be created.
            </param>
            <param name="deviceTransform">
            A tranformation <see cref="T:System.Windows.Media.Matrix"/> used to calculate DPI settings. This can be a null
            reference. In this case, DPI defaults to 96x96.
            </param>
            <remarks>
            The <paramref name="bitmap"/> must have the same dimensions to the <see cref="T:Awesomium.Core.RenderBuffer"/>.
            </remarks>
            <exception cref="T:System.AccessViolationException">
            Attempted to write to a <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/> with different dimensions 
            than the buffer.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.CopyToBitmap(Awesomium.Core.RenderBuffer,System.Windows.Media.Imaging.WriteableBitmap@,Awesomium.Core.AweRect,System.Nullable{System.Windows.Media.Matrix})">
            <summary>
            Copy this buffer to a <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/> that can be rendered in WPF.
            </summary>
            <param name="buffer">
            A <see cref="T:Awesomium.Core.RenderBuffer"/> obtained through <see cref="M:Awesomium.Windows.Controls.WebControl.Render"/>.
            </param>
            <param name="bitmap">
            Reference to a <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/> to write to. This should be reused.
            If a null reference is specified, a new bitmap will be created.
            </param>
            <param name="rect">
            An <see cref="T:Awesomium.Core.AweRect"/> representing the rectangle in the source <paramref name="buffer"/>
            to copy.
            </param>
            <param name="deviceTransform">
            A tranformation <see cref="T:System.Windows.Media.Matrix"/> used to calculate DPI settings. This can be a null
            reference. In this case, DPI defaults to 96x96.
            </param>
            <remarks>
            The <paramref name="bitmap"/> must have the same dimensions to this <see cref="T:Awesomium.Core.RenderBuffer"/>.
            </remarks>
            <exception cref="T:System.AccessViolationException">
            Attempted to write to a <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/> with different dimensions 
            than this buffer.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.CopyToBitmap(Awesomium.Core.RenderBuffer,System.Windows.Media.Imaging.WriteableBitmap@,System.Windows.Int32Rect,System.Nullable{System.Windows.Media.Matrix},Awesomium.Core.RenderOperations)">
            <summary>
            Copy this buffer to a <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/> that can be rendered in WPF.
            </summary>
            <param name="buffer">
            A <see cref="T:Awesomium.Core.RenderBuffer"/> obtained through <see cref="M:Awesomium.Windows.Controls.WebControl.Render"/>.
            </param>
            <param name="bitmap">
            Reference to a <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/> to write to. This should be reused.
            If a null reference is specified, a new bitmap will be created.
            </param>
            <param name="rect">
            An <see cref="T:System.Windows.Int32Rect"/> representing the rectangle in the source <paramref name="buffer"/>
            to copy.
            </param>
            <param name="deviceTransform">
            A tranformation <see cref="T:System.Windows.Media.Matrix"/> used to calculate DPI settings. This can be a null
            reference. In this case, DPI defaults to 96x96.
            </param>
            <param name="rop">
            Defines the operation that will be used for creating the new bitmap.
            For details, see the <see cref="T:Awesomium.Core.RenderOperations"/> enumeration.
            </param>
            <remarks>
            The <paramref name="bitmap"/> must have the same dimensions to this <see cref="T:Awesomium.Core.RenderBuffer"/>.
            </remarks>
            <exception cref="T:System.AccessViolationException">
            Attempted to write to a <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/> with different dimensions 
            than this buffer.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.GetInt32Rect(Awesomium.Core.AweRect)">
            <summary>
            Gets an <see cref="T:System.Windows.Int32Rect"/> equivalent of an Awesomium <see cref="T:Awesomium.Core.AweRect"/>.
            </summary>
            <param name="aweRect">
            An <see cref="T:Awesomium.Core.AweRect"/> value representing an Awesomium rectangle.
            </param>
            <returns>
            A <see cref="T:System.Windows.Int32Rect"/> value equivalent of an Awesomium <see cref="T:Awesomium.Core.AweRect"/>.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.Utilities.Respond(Awesomium.Core.JavascriptDialogEventArgs)">
            <summary>
            Allows users to respond to a <see cref="E:Awesomium.Windows.Controls.WebControl.ShowJavascriptDialog"/> event,
            when the event is handled modally.
            </summary>
            <param name="e">
            Data provided to a <see cref="E:Awesomium.Windows.Controls.WebControl.ShowJavascriptDialog"/> event.
            </param>
            <remarks>
            <note type="caution">
            This method should only be called if you handle the <see cref="E:Awesomium.Windows.Controls.WebControl.ShowJavascriptDialog"/>
            modally.
            </note>
            The WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/>, automatically displays a <see cref="T:Awesomium.Windows.Controls.WebControlJSDialogLayer"/> in response 
            to the <see cref="E:Awesomium.Windows.Controls.WebControl.ShowJavascriptDialog"/> event. Users can subclass <see cref="T:Awesomium.Windows.Controls.WebControlJSDialogLayer"/> 
            to provide their own logic or look and feel if they want. If you style your <see cref="T:Awesomium.Windows.Controls.WebControlJSDialogLayer"/>, 
            simply assign the <see cref="P:Awesomium.Windows.Controls.WebControlDialogLayer.Respond"/> command to the buttons of your dialog layer,
            specifying a <c>CommandParameter</c> of <c>true</c> or <c>false</c> to indicate <b>OK</b> or <b>Cancel</b> respectively.
            <p/>
            <note>
            Calling this method will also automatically set <see cref="P:Awesomium.Core.JavascriptDialogEventArgs.Handled"/> to <c>true</c>.
            You will no longer be able to change the setting of <see cref="P:Awesomium.Core.JavascriptDialogEventArgs.Handled"/> after
            calling this method.
            </note>
            <p/>
            For more details, read the <b>Remarks</b> section of <see cref="P:Awesomium.Core.JavascriptDialogEventArgs.Handled"/>.
            </remarks>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebControl">
            <summary>
            Represents a WPF control that wraps an Awesomium web view.
            You can use it to embed Awesomium directly in your WPF application without any additional work.
            </summary>
            <remarks>
            You can create an instance of this class by directly invoking the
            default constructor (either by dropping it in your designer surface, through XAML or from code). 
            You do not need to explicitly create an instance of a web view through <see cref="T:Awesomium.Core.WebCore"/>.
            WebControl takes care of this internally.
            <p/>
            <note>
            Note that it is safe to use this control in a design environment for layout and configuration
            purposes. <see cref="T:Awesomium.Core.WebCore"/> and the underlying web view are only instantiated during runtime.
            </note>
            <p/>
            <h4>The Role of the <see cref="P:System.Windows.UIElement.IsEnabled"/> Property:</h4>
            In addition to its regular meaning, the <see cref="P:System.Windows.UIElement.IsEnabled"/> property indicates
            if internal asynchronous rendering of the underlying web-view, is currently enabled.
            <note>
            All rendering in the underlying web-view is actually done asynchronously in a separate process
            and so the page is usually continuously rendering internally. Setting <see cref="P:System.Windows.UIElement.IsEnabled"/>
            to <c>false</c>, will temporarily pause rendering. This may be really important, if <see cref="P:Awesomium.Windows.Controls.WebControl.SelfUpdate"/>
            is enabled.
            </note>
            <h4>The Role of the <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/> Property:</h4>
            A <see cref="T:Awesomium.Windows.Controls.WebControl"/> is considered invalid when it is:
            <list type="bullet">
            <item>
            <description>
            Crashed (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsCrashed"/>).
            <note>
            When crashed, this control will attempt to recreate its underlying view.
            For details, see: <see cref="P:Awesomium.Windows.Controls.WebControl.IsCrashed"/>.
            </note>
            </description>
            </item>
            <item>
            <description>
            Prematurely destroyed (see <see cref="M:Awesomium.Windows.Controls.WebControl.Close"/> and <see cref="M:Awesomium.Core.WebCore.Shutdown"/>).
            </description>
            </item>
            <item>
            <description>
            Not properly instantiated. This means that something went wrong
            during instantiation of either the <see cref="T:Awesomium.Core.WebCore"/> (if this
            is the first <see cref="T:Awesomium.Windows.Controls.WebControl"/> created) or of the
            underlying web-view.
            </description>
            </item>
            </list>
            <note type="caution">
            Developers should always check this property before calling <see cref="T:Awesomium.Core.IWebView"/>
            members implemented by this <see cref="T:Awesomium.Windows.Controls.WebControl"/>. Trying to access the underlying
            web-view when it is not alive, can throw an <see cref="T:System.InvalidOperationException"/>.
            <p/>
            For more details, refer to the documentation of this control's members.
            </note>
            <note>
            <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/> also returns <c>false</c> when the control is shown in a designer.
            The Awesomium <see cref="T:Awesomium.Core.WebCore"/> and the underlying web-view, are only instantiated
            during runtime.
            </note>
            </remarks>
            <threadsafety static="true" instance="false"/>
            <seealso cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>
            <seealso cref="P:Awesomium.Windows.Controls.WebControl.IsCrashed"/>
            <seealso cref="P:Awesomium.Windows.Controls.WebControl.SelfUpdate"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnIsDirtyChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.IsDirtyChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnBeginLoading(System.Object,Awesomium.Core.BeginLoadingEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.BeginLoading"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnBeginNavigation(System.Object,Awesomium.Core.BeginNavigationEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.BeginNavigation"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnCursorChanged(System.Object,Awesomium.Core.ChangeCursorEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.CursorChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnKeyboardFocusChanged(System.Object,Awesomium.Core.ChangeKeyboardFocusEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.KeyboardFocusChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnTargetUrlChanged(System.Object,Awesomium.Core.UrlEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.TargetUrlChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnToolTipChanged(System.Object,Awesomium.Core.ChangeToolTipEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.ToolTipChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnDomReady(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.DomReady"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnLoadCompleted(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.LoadCompleted"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnPageContentsReceived(System.Object,Awesomium.Core.GetPageContentsEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.PageContentsReceived"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnOpenExternalLink(System.Object,Awesomium.Core.OpenExternalLinkEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.OpenExternalLink"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnPluginCrashed(System.Object,Awesomium.Core.PluginCrashedEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.PluginCrashed"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnTitleReceived(System.Object,Awesomium.Core.ReceiveTitleEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.TitleReceived"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnMove(System.Object,Awesomium.Core.MoveEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.Move"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnDownload(System.Object,Awesomium.Core.UrlEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.Download"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnCrashed(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.Crashed"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnSelectLocalFiles(System.Object,Awesomium.Core.SelectLocalFilesEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.SelectLocalFiles"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnScrollDataReceived(System.Object,Awesomium.Core.ScrollDataEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.ScrollDataReceived"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnJSConsoleMessageAdded(System.Object,Awesomium.Core.JSConsoleMessageEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.JSConsoleMessageAdded"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnFindResultsReceived(System.Object,Awesomium.Core.GetFindResultsEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.FindResultsReceived"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnSelectionChanged(System.Object,Awesomium.Core.WebSelectionEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnImeUpdated(System.Object,Awesomium.Core.UpdateImeEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.ImeUpdated"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnContextMenu(System.Object,Awesomium.Core.ContextMenuEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.ShowContextMenu"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnLoginRequest(System.Object,Awesomium.Core.LoginRequestEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.LoginRequest"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnHistoryChanged(System.Object,Awesomium.Core.ChangeHistoryEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.HistoryChanged"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnResizeComplete(System.Object,Awesomium.Core.ResizeEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.ResizeComplete"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnJavascriptDialog(System.Object,Awesomium.Core.JavascriptDialogEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.ShowJavascriptDialog"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnResourceRequest(System.Object,Awesomium.Core.ResourceRequestEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.ResourceRequest"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnResourceResponse(System.Object,Awesomium.Core.ResourceResponseEventArgs)">
            <summary>
            Raises the <see cref="E:Awesomium.Windows.Controls.WebControl.ResourceResponse"/> event.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.#ctor">
            <summary>
            Creates and initializes an instance of <see cref="T:Awesomium.Windows.Controls.WebControl"/> and its underlying web view.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Close">
            <summary>
            Destroys and removes this web view control. Any call to members of this control
            after calling this method, will cause a <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <remarks>
            To avoid exceptions, do not call this method when the hosting UI of the control (if any)
            is still alive and visible.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnIsEnabledChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Maintains the relationship between the control's enabled status and internal
            asynchronous rendering (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsRendering"/>).
            </summary>
            <remarks>
            In addition to its regular meaning, the <see cref="P:System.Windows.UIElement.IsEnabled"/> property indicates
            if internal asynchronous rendering of the underlying web-view, is currently active.
            <note>
            All rendering in the underlying web-view is actually done asynchronously in a separate process
            and so the page is usually continuously rendering internally. Setting <see cref="P:System.Windows.UIElement.IsEnabled"/>
            to <c>false</c>, will temporarily pause rendering. This may be really important, if <see cref="P:Awesomium.Windows.Controls.WebControl.SelfUpdate"/>
            is enabled.
            </note>
            <note type="inherit">
            Inheritors can override <see cref="M:Awesomium.Windows.Controls.WebControl.OnIsEnabledChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)"/>, then set <see cref="P:Awesomium.Windows.Controls.WebControl.IsRendering"/>
            manually if they want to <i>disconnect</i> internal asynchronous 
            rendering, from the control's enabled status.
            </note>
            <note>
            Note that this method is provided by the WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/> so that
            you can control the relationship between the control's enabled status
            and internal asynchronous rendering (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsRendering"/>). It does
            not trigger the <see cref="E:System.Windows.UIElement.IsEnabledChanged"/> event.
            The <see cref="E:System.Windows.UIElement.IsEnabledChanged"/> event is fired by the
            .NET Framework <b>before</b> this method is called.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Controls.WebControl.SelfUpdate"/>
            <seealso cref="P:Awesomium.Windows.Controls.WebControl.IsRendering"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.GetVisualChild(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnStylusMove(System.Windows.Input.StylusEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnTouchMove(System.Windows.Input.TouchEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnTouchDown(System.Windows.Input.TouchEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnTouchUp(System.Windows.Input.TouchEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnGotFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnLostFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ArrangeOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.OnRender(System.Windows.Media.DrawingContext)">
            <inheritdoc />
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.HandleInput(Awesomium.Core.ViewInput)">
            <summary>
            Gets if the specified kind of input should be handled by the control.
            </summary>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Render">
            <summary>
            Renders this <see cref="T:Awesomium.Windows.Controls.WebControl"/> into an offscreen pixel buffer and clears the dirty state.
            </summary>
            <remarks>
            For maximum efficiency, you should only call this when the <see cref="T:Awesomium.Windows.Controls.WebControl"/> is dirty 
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsDirty"/>).
            The most appropriate time to call this method, is from within your <see cref="E:Awesomium.Windows.Controls.WebControl.IsDirtyChanged"/> handler.
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
            <returns>
            An instance of the <see cref="T:Awesomium.Core.RenderBuffer"/> that this <see cref="T:Awesomium.Windows.Controls.WebControl"/> was rendered to. 
            This value may change between renders and may return null if the <see cref="T:Awesomium.Windows.Controls.WebControl"/> has crashed
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsCrashed"/>).
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.InjectMouseMove(System.Int32,System.Int32)">
            <summary>
            Injects a mouse-move event in local coordinates.
            </summary>
            <param name="x">
            The absolute x-coordinate of the mouse (relative to the <see cref="T:Awesomium.Windows.Controls.WebControl"/> itself).
            </param>
            <param name="y">
            The absolute y-coordinate of the mouse (relative to the <see cref="T:Awesomium.Windows.Controls.WebControl"/> itself).
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses settings of the <see cref="P:Awesomium.Windows.Controls.WebControl.InputController"/>.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.InjectMouseDown(Awesomium.Core.MouseButton)">
            <summary>
            Injects a mouse-down event.
            </summary>
            <param name="mouseButton">
            The mouse button that was pressed.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses settings of the <see cref="P:Awesomium.Windows.Controls.WebControl.InputController"/>.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.InjectMouseUp(Awesomium.Core.MouseButton)">
            <summary>
            Injects a mouse-up event.
            </summary>
            <param name="mouseButton">
            The mouse button that was released.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses settings of the <see cref="P:Awesomium.Windows.Controls.WebControl.InputController"/>.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.InjectMouseWheel(System.Int32)">
            <summary>
            Injects a mouse-wheel event.
            </summary>
            <param name="scrollAmountVert">
            The relative amount of pixels to scroll vertically.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses settings of the <see cref="P:Awesomium.Windows.Controls.WebControl.InputController"/>.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.InjectMouseWheel(System.Int32,System.Int32)">
            <summary>
            Injects a mouse-wheel event.
            </summary>
            <param name="scrollAmountVert">
            The relative amount of pixels to scroll vertically.
            </param>
            <param name="scrollAmountHorz">
            The relative amount of pixels to scroll horizontally.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses settings of the <see cref="P:Awesomium.Windows.Controls.WebControl.InputController"/>.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.InjectKeyboardEvent(Awesomium.Core.WebKeyboardEvent)">
            <summary>
            Injects a keyboard event.
            </summary>
            <param name="keyEvent">
            The keyboard event to inject. You'll need to initialize the members of the passed
            <see cref="T:Awesomium.Core.WebKeyboardEvent"/>, yourself.
            </param>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note>
            This method bypasses settings of the <see cref="P:Awesomium.Windows.Controls.WebControl.InputController"/>.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.InjectKeyboardEventWin(System.Int32,System.Int32,System.Int32)">
            <summary>
            Injects a keyboard event by translating the respective Windows Messages.
            </summary>
            <param name="msg">
            The Windows keyboard message (usually <c>WM_KEYDOWN</c>, <c>WM_KEYUP</c> and <c>WM_CHAR</c>). 
            </param>
            <param name="wparam">
            The first parameter of the message as intercepted by the window procedure.
            </param>
            <param name="lparam">
            The second parameter of the message as intercepted by the window procedure.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
            <remarks>
            This is usually easier to use than <see cref="M:Awesomium.Windows.Controls.WebControl.InjectKeyboardEvent(Awesomium.Core.WebKeyboardEvent)"/>. All you have to
            do is hook into the window procedure of this view's host, intercept <c>WM_KEYDOWN</c>, 
            <c>WM_KEYUP</c> and <c>WM_CHAR</c> and inject them to the view by using this method.
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="tip">
            Beware that in WPF, only the parent Window has a window procedure. Make sure
            that you only inject messages when the actual host (if it's a child element)
            has the focus, and that you do not hook into the same procedure multiple times.
            </note>
            <note>
            This method bypasses settings of the <see cref="P:Awesomium.Windows.Controls.WebControl.InputController"/>.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Resize(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Resizes this <see cref="T:Awesomium.Windows.Controls.WebControl"/> to certain dimensions. This operation can fail
            if another resize is already pending (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsResizing"/>) or if
            the repaint timeout was exceeded.
            </summary>
            <param name="width">
            The width in pixels to resize to.
            </param>
            <param name="height">
            The height in pixels to resize to.
            </param>
            <param name="waitForRepaint">
            Whether or not to wait for the <see cref="T:Awesomium.Windows.Controls.WebControl"/> to finish repainting to avoid flicker
            (default is true).
            </param>
            <param name="repaintTimeoutMs">
            The max amount of time to wait for a repaint, in milliseconds.
            </param>
            <returns>
            True if the resize was successful. False otherwise.
            </returns>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.UnfocusView">
            <summary>
            Notifies the current page that it has lost focus.
            </summary>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.FocusView">
            <summary>
            Notifies the current page that it has gained focus.
            </summary>
            <remarks>
            You will need to call this to gain text-box focus, among other things. 
            (If you fail to ever see a blinking caret when typing text, this is why.)
            </remarks>
            <remarks>
            <note type="inherit">
            <see cref="T:Awesomium.Windows.Controls.WebControl"/> handles this internally. Inheritors do not need to call this method unless
            they implement custom logic.
            </note>
            <note type="caution">
            For performance reasons, no validity check is performed when calling protected members.
            Inheritors should perform any such checks (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>), before calling these members.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.GoToHome">
            <summary>
            Navigates to the Home URL as defined in <see cref="P:Awesomium.Core.WebCore.HomeURL"/>.
            </summary>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.LoadURL(System.String)">
            <summary>
            Loads a URL into the <see cref="T:Awesomium.Windows.Controls.WebControl"/> asynchronously.
            </summary>
            <param name="url">
            The URL to load.
            </param>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.LoadURL(System.String,System.String)">
            <summary>
            Loads a URL into the <see cref="T:Awesomium.Windows.Controls.WebControl"/> asynchronously.
            </summary>
            <param name="url">
            The URL to load.
            </param>
            <param name="frameName">
            The name of the frame to load the URL in; leave this blank to load in the main frame.
            </param>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.LoadURL(System.String,System.String,System.String,System.String)">
            <summary>
            Loads a URL into the <see cref="T:Awesomium.Windows.Controls.WebControl"/> asynchronously.
            </summary>
            <param name="url">
            The URL to load.
            </param>
            <param name="frameName">
            The name of the frame to load the URL in; leave this blank to load in the main frame.
            </param>
            <param name="username">
            If the URL requires authentication, the username to authorize as, otherwise just pass an empty string.
            </param>
            <param name="password">
            If the URL requires authentication, the password to use, otherwise just pass an empty string.
            </param>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.LoadHTML(System.String)">
            <summary>
            Loads a string of HTML into the <see cref="T:Awesomium.Windows.Controls.WebControl"/> asynchronously.
            </summary>
            <param name="html">
            The HTML string (ASCII) to load.
            </param>
            <remarks>
            Any assets required by the specified HTML (images etc.), should exist 
            within the base directory set with <see cref="P:Awesomium.Core.WebCore.BaseDirectory"/>.
            </remarks>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.LoadHTML(System.String,System.String)">
            <summary>
            Loads a string of HTML into the <see cref="T:Awesomium.Windows.Controls.WebControl"/> asynchronously.
            </summary>
            <param name="html">
            The HTML string (ASCII) to load.
            </param>
            <param name="frameName">
            The name of the frame to load the HTML in.
            </param>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
            <remarks>
            Any assets required by the specified HTML (images etc.), should exist 
            within the base directory set with <see cref="P:Awesomium.Core.WebCore.BaseDirectory"/>.
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.LoadFile(System.String)">
            <summary>
            Loads a local file into the <see cref="T:Awesomium.Windows.Controls.WebControl"/> asynchronously.
            </summary>
            <param name="file">
            The name of the file to load.
            </param>
            <remarks>
            The file should exist within the base directory set with <see cref="P:Awesomium.Core.WebCore.BaseDirectory"/>.
            </remarks>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.LoadFile(System.String,System.String)">
            <summary>
            Loads a local file into the <see cref="T:Awesomium.Windows.Controls.WebControl"/> asynchronously.
            </summary>
            <param name="file">
            The name of the file to load.
            </param>
            <param name="frameName">
            The name of the frame to load the file in.
            </param>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
            <remarks>
            <note>
            The file should exist within the base directory set with <see cref="P:Awesomium.Core.WebCore.BaseDirectory"/>.
            </note>
            </remarks>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.GoToHistoryOffset(System.Int32)">
            <summary>
            Navigates back/forward in history via a relative offset.
            </summary>
            <param name="offset">
            The relative offset in history to navigate to. (Can be negative)
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.GoBack">
            <summary>
            Navigates one step back in history.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.GoForward">
            <summary>
            Navigates one step forward in history.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Stop">
            <summary>
            Stops the current navigation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Reload">
            <summary>
            Reloads the current page.
            </summary>
            <returns>
            True if the view is alive and the command was successfully sent. False otherwise.
            </returns>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ExecuteJavascript(System.String)">
            <summary>
            Executes a string of Javascript in the context of the current page
            asynchronously.
            </summary>
            <param name="javascript">The string of Javascript to execute.</param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ExecuteJavascript(System.String,System.String)">
            <summary>
            Executes a string of Javascript in the context of the current page
            asynchronously.
            </summary>
            <param name="javascript">The string of Javascript to execute.</param>
            <param name="frameName">Optional; the name of the frame to execute in,
            leave this blank to execute in the main frame.</param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ExecuteJavascriptWithResult(System.String)">
            <summary>
            Executes a string of Javascript in the context of the current page
            synchronously, and returns the result.
            </summary>
            <param name="javascript">The string of Javascript to execute.</param>
            <returns>Returns the result as a <see cref="T:Awesomium.Core.JSValue"/>. Please note that the returned
            result is only a shallow, read-only copy of the original object. This
            method does not return system-defined Javascript objects (such as "window",
            "document", or any DOM elements).</returns>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ExecuteJavascriptWithResult(System.String,System.Int32)">
            <summary>
            Executes a string of Javascript in the context of the current page
            synchronously, and returns the result.
            </summary>
            <param name="javascript">The string of Javascript to execute.</param>
            <param name="timeoutMs">Optional; the maximum time to wait for the result
            to be computed. Leave this 0 to wait forever (may hang if Javascript is 
            invalid!)</param>
            <returns>Returns the result as a <see cref="T:Awesomium.Core.JSValue"/>. Please note that the returned
            result is only a shallow, read-only copy of the original object. This
            method does not return system-defined Javascript objects (such as "window",
            "document", or any DOM elements).</returns>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ExecuteJavascriptWithResult(System.String,System.String,System.Int32)">
            <summary>
            Executes a string of Javascript in the context of the current page
            synchronously, and returns the result.
            </summary>
            <param name="javascript">The string of Javascript to execute.</param>
            <param name="frameName">Optional; the name of the frame to execute in,
            leave this blank to execute in the main frame.</param>
            <param name="timeoutMs">Optional; the maximum time to wait for the result
            to be computed. Leave this 0 to wait forever (may hang if Javascript is 
            invalid!)</param>
            <returns>Returns the result as a <see cref="T:Awesomium.Core.JSValue"/>. Please note that the returned
            result is only a shallow, read-only copy of the original object. This
            method does not return system-defined Javascript objects (such as "window",
            "document", or any DOM elements).</returns>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.CallJavascriptFunction(System.String,System.String,Awesomium.Core.JSValue[])">
            <summary>
            Calls a certain function defined in Javascript, directly.
            </summary>
            <param name="objectName">
            The name of the object that contains the function, pass an empty string if the function is defined in the global scope.
            </param>
            <param name="function">
            The name of the function.
            </param>
            <param name="arguments">
            The arguments to pass to the function.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.CallJavascriptFunction(System.String,System.String,System.String,Awesomium.Core.JSValue[])">
            <summary>
            Calls a certain function defined in Javascript, directly.
            </summary>
            <param name="objectName">
            The name of the object that contains the function, pass an empty string if the function is defined in the global scope.
            </param>
            <param name="function">
            The name of the function.
            </param>
            <param name="frameName">
            Optional; the name of the frame to execute in,
            leave this blank to execute in the main frame.
            </param>
            <param name="arguments">
            The arguments to pass to the function.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.CreateObject(System.String)">
            <summary>
            Creates a new global Javascript object that will persist throughout
            the lifetime of this <see cref="T:Awesomium.Windows.Controls.WebControl"/>. This is useful for exposing your application's
            data and events to Javascript. This object is managed directly by Awesomium
            so you can modify its properties and bind callback functions via
            <see cref="M:Awesomium.Windows.Controls.WebControl.SetObjectProperty(System.String,System.String,Awesomium.Core.JSValue)"/> and <see cref="M:Awesomium.Windows.Controls.WebControl.SetObjectCallback(System.String,System.String,Awesomium.Core.JSCallback)"/>, 
            respectively.
            </summary>
            <param name="objectName">
            The name of the object.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.DestroyObject(System.String)">
            <summary>
            Destroys a Javascript object previously created with <see cref="M:Awesomium.Windows.Controls.WebControl.CreateObject(System.String)"/>.
            </summary>
            <param name="objectName">
            The name of the object to destroy.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.SetObjectProperty(System.String,System.String,Awesomium.Core.JSValue)">
            <summary>
            Sets a property of a Javascript object previously created with <see cref="M:Awesomium.Windows.Controls.WebControl.CreateObject(System.String)"/>.
            </summary>
            <example>
            An example of usage:
            <code>
            webView.CreateObject("MyObject");
            webView.SetObjectProperty("MyObject", "color", "blue");
            </code>
            You can now access this object's property via Javascript on any 
            page loaded into this WebView:
            <code lang="JavaScript">
            var myColor = MyObject.color; // value would be "blue"
            </code>
            </example>
            <param name="objectName">
            The name of the Javascript object.
            </param>
            <param name="propertyName">
            The name of the property to create.
            </param>
            <param name="val">
            The initial javascript-value of the property.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.SetObjectCallback(System.String,System.String,Awesomium.Core.JSCallback)">
            <summary>
            Binds a callback function to a Javascript object previously created with <see cref="M:Awesomium.Windows.Controls.WebControl.CreateObject(System.String)"/>.
            This is very useful for passing events from Javascript to your application.
            </summary>
            <example>
            An example of usage:
            <code>
            public void OnSelectItem(object sender, JSCallbackEventArgs e)
            {
                System.Console.WriteLine( "Player selected item: " + e.args[0].ToString() );
            }
            
            public void initWebView()
            {
                webView.CreateObject("MyObject");
                webView.SetObjectCallback("MyObject", "SelectItem", OnSelectItem);
            }
            </code>
            You can now call the function <c>OnSelectItem</c> from Javascript:
            <code lang="JavaScript">
            MyObject.SelectItem("shotgun");
            </code>
            </example>
            <param name="objectName">
            The name of the Javascript object.
            </param>
            <param name="callbackName">
            The name of the Javascript function that will call the callback.
            </param>
            <param name="callback">
            Reference to a <see cref="T:Awesomium.Core.JSCallback"/> implementation.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Cut">
            <summary>
            Cuts the text currently selected in this <see cref="T:Awesomium.Windows.Controls.WebControl"/>, when it has keyboard focus
            (usually in a text-box), using the system clipboard.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Copy">
            <summary>
            Copies the text currently selected in this <see cref="T:Awesomium.Windows.Controls.WebControl"/>, to the system clipboard.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.CopyHTML">
            <summary>
            Copies the HTML content currently selected in this <see cref="T:Awesomium.Windows.Controls.WebControl"/>, to the system clipboard.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.CopyLinkAddress">
            <summary>
            Copies the target URL of the link currently under the cursor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Paste">
            <summary>
            Pastes the text currently in the system clipboard, to this <see cref="T:Awesomium.Windows.Controls.WebControl"/>,
            when it has keyboard focus (usually in a text-box).
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.SelectAll">
            <summary>
            Selects all content on the current page.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ResetZoom">
            <summary>
            Resets the zoom level.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.GetZoomForHost(System.String)">
            <summary>
            Gets the zoom factor (percent of page) saved for a certain hostname.
            </summary>
            <param name="host">
            The hostname whose saved zoom setting will be retrieved.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.SetURLFilteringMode(Awesomium.Core.URLFilteringMode)">
            <summary>
            Sets the current URL Filtering Mode to use.
            </summary>
            <param name="filteringMode">
            The URL Filtering Mode to use. Default is <see cref="F:Awesomium.Core.URLFilteringMode.None"/>.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.AddURLFilter(System.String)">
            <summary>
            Adds a new URL Filter rule.
            </summary>
            <param name="filter">
            A string with optional wildcards that describes a certain URL.
            </param>
            <example>
            For example, to match all URLs from the domain "google.com", your filter string can be: http://google.com/*
            </example>
            <remarks> 
            You may also use the "local://" scheme prefix to describe the URL to the base directory
            (set via <see cref="P:Awesomium.Core.WebCore.BaseDirectory"/>).
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ClearAllURLFilters">
            <summary>
            Clears all URL Filter rules previously added with <see cref="M:Awesomium.Windows.Controls.WebControl.AddURLFilter(System.String)"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.SetHeaderDefinition(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Defines a new Header Definition or updates it if it already exists.
            </summary>
            <param name="name">
            The unique name of the Header Definition; this is used to refer to it later in <see cref="M:Awesomium.Windows.Controls.WebControl.AddHeaderRewriteRule(System.String,System.String)"/> and related methods.
            </param>
            <param name="fields">
            A name/value collection representing field names and their respective values.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.AddHeaderRewriteRule(System.String,System.String)">
            <summary>
            Adds a new a header re-write rule. 
            All requests whose URL matches the specified rule will have its HTTP headers re-written 
            with the specified header definition before sending it to the server.
            </summary>
            <param name="rule">
            A string with optional wildcards (*, ?) that matches the URL(s) that will have their headers 
            re-written with the specified header definition.
            </param>
            <param name="name">
            The name of the header definition (specified in <see cref="M:Awesomium.Windows.Controls.WebControl.SetHeaderDefinition(System.String,System.Collections.Specialized.NameValueCollection)"/>).
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.RemoveHeaderRewriteRule(System.String)">
            <summary>
            Removes a header re-write rule previously added with <see cref="M:Awesomium.Windows.Controls.WebControl.AddHeaderRewriteRule(System.String,System.String)"/>.
            </summary>
            <param name="rule">
            The rule to remove (should match the string specified in for the "rule" parameter 
            in <see cref="M:Awesomium.Windows.Controls.WebControl.AddHeaderRewriteRule(System.String,System.String)"/>, exactly).
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.RemoveHeaderRewriteRulesByDefinition(System.String)">
            <summary>
            Removes all header re-write rules that are using a certain header definition.
            </summary>
            <param name="name">
            The name of the header definition (specified in <see cref="M:Awesomium.Windows.Controls.WebControl.SetHeaderDefinition(System.String,System.Collections.Specialized.NameValueCollection)"/>).
            Specify an empty string, to remove all header re-write rules.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Print">
            <summary>
            Prints the current page.
            </summary>
            <remarks>
            To suppress the printer selection dialog
            and print immediately using OS defaults, 
            see <see cref="M:Awesomium.Core.WebCore.SuppressPrinterDialog(System.Boolean)"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.RequestScrollData">
            <summary>
            Request the page dimensions and scroll position of the page.
            </summary>
            <remarks>
            You can retrieve the response by handling the <see cref="E:Awesomium.Windows.Controls.WebControl.ScrollDataReceived"/> event.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.RequestScrollData(System.String)">
            <summary>
            Request the page dimensions and scroll position of the page.
            </summary>
            <remarks>
            You can retrieve the response by handling the <see cref="E:Awesomium.Windows.Controls.WebControl.ScrollDataReceived"/> event.
            </remarks>
            <param name="frameName">
            The frame's scroll data to retrieve. Leave blank to get the main frame's scroll data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Find(System.String)">
            <summary>
            Start searching down the current web-page, for a certain string.
            </summary>
            <remarks>
            All matches of the string will be highlighted on the page and you can jump to different 
            instances of the string by using the <see cref="M:Awesomium.Windows.Controls.WebControl.FindNext"/> method.
            To get actual stats about a certain query, please see <see cref="E:Awesomium.Windows.Controls.WebControl.FindResultsReceived"/>.
            </remarks>
            <param name="searchStr">
            The string to search for.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Find(System.String,System.Boolean)">
            <summary>
            Start searching for a certain string on the current web-page.
            </summary>
            <remarks>
            All matches of the string will be highlighted on the page and you can jump to different 
            instances of the string by using the <see cref="M:Awesomium.Windows.Controls.WebControl.FindNext"/> method.
            To get actual stats about a certain query, please see <see cref="E:Awesomium.Windows.Controls.WebControl.FindResultsReceived"/>.
            </remarks>
            <param name="searchStr">
            The string to search for.
            </param>
            <param name="forward">
            True to search forward, down the page. False otherwise.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Find(System.String,System.Boolean,System.Boolean)">
            <summary>
            Start finding a certain string on the current web-page.
            </summary>
            <remarks>
            All matches of the string will be highlighted on the page and you can jump to different 
            instances of the string by using the <see cref="M:Awesomium.Windows.Controls.WebControl.FindNext"/> method.
            To get actual stats about a certain query, please see <see cref="E:Awesomium.Windows.Controls.WebControl.FindResultsReceived"/>.
            </remarks>
            <param name="searchStr">
            The string to search for.
            </param>
            <param name="forward">
            True to search forward, down the page. False otherwise.
            </param>
            <param name="caseSensitive">
            True to perform a case sensitive search. False otherwise.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.FindNext">
            <summary>
            Jump to the next match of a previously successful search.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.FindNext(System.Boolean)">
            <summary>
            Jump to the next match of a previously successful search.
            </summary>
            <param name="forward">
            True to search forward, down the page. False otherwise.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.StopFind(System.Boolean)">
            <summary>
            Stops the last active search (started with <see cref="M:Awesomium.Windows.Controls.WebControl.Find(System.String)"/>).
            </summary>
            <remarks>
            This will un-highlight all matches of a previous call to <see cref="M:Awesomium.Windows.Controls.WebControl.Find(System.String)"/>.
            </remarks>
            <param name="clearSelection">
            True to also deselect the currently selected string. False otherwise.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.TranslatePage(System.String,System.String)">
            <summary>
            Attempt automatic translation of the current page via Google Translate.
            </summary>
            <remarks>
            The defined language codes are ISO 639-2.
            </remarks>
            <param name="sourceLanguage">
            The language to translate from (for ex. "en" for English).
            </param>
            <param name="targetLanguage">
            The language to translate to (for ex. "fr" for French).
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ActivateIME(System.Boolean)">
            <summary>
            Call this method to let the <see cref="T:Awesomium.Windows.Controls.WebControl"/> know you will be passing
            text input via IME and will need to be notified of any IME-related
            events (such as caret position, user un-focusing text-box, etc.).
            </summary>
            <param name="activate">
            True to activate IME support. False otherwise.
            </param>
            <seealso cref="E:Awesomium.Windows.Controls.WebControl.ImeUpdated"/>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.SetIMEComposition(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create or update the current IME text composition.
            </summary>
            <param name="inputStr">The string generated by your IME.</param>
            <param name="cursorPos">The current cursor position in your IME composition.</param>
            <param name="targetStart">The position of the beginning of the selection.</param>
            <param name="targetEnd">The position of the end of the selection.</param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.ConfirmIMEComposition(System.String)">
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.CancelIMEComposition">
            <summary>
            Cancels IME text composition.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.CopyImageAt(System.Int32,System.Int32)">
            <summary>
            Copies an image on the page to the system clipboard.
            </summary>
            <param name="x">
            The X coordinate in a web page where an image is located.
            </param>
            <param name="y">
            The Y coordinate in a web page where an image is located.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.SaveToPNG(System.String)">
            <summary>
            Save the current visual buffer to a PNG image.
            </summary>
            <param name="filePath">
            The path to the file that will be written.
            </param>
            <returns>
            True if the file is successfully saved. False otherwise.
            </returns>
            <remarks>
            This method may fail and return false if the width or the height of the control,
            is less than, or equal to zero.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.SaveToPNG(System.String,System.Boolean)">
            <summary>
            Save the current visual buffer to a PNG image.
            </summary>
            <param name="filePath">
            The path to the file that will be written.
            </param>
            <param name="preserveTransparency">
            True to preserve transparency (alpha) values. False otherwise.
            </param>
            <returns>
            True if the file is successfully saved. False otherwise.
            </returns>
            <remarks>
            This method may fail and return false if the width or the height of the control,
            is less than, or equal to zero.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.SaveToJPEG(System.String,System.Int32)">
            <summary>
            Save the current visual buffer to a JPEG image.
            </summary>
            <param name="filePath">
            The path to the file that will be written.
            </param>
            <param name="quality">
            The compression quality to use, the valid range is 0 to 100, with 100 being the highest.
            </param>
            <returns>
            True if the image was successfully saved. False otherwise.
            </returns>
            <remarks>
            This method may fail and return false if the width or the height of the control,
            is less than, or equal to zero.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            An invalid compression quality value is specified.
            </exception>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.DeferInput">
            <summary>
            Enters a defer cycle that you can use to temporarily block all input to the control.
            </summary>
            <returns>
            A disposable <see cref="P:Awesomium.Windows.Controls.WebControl.InputController"/> that can be used with a <c>using</c>
            statement to create a defer cycle.
            </returns>
            <remarks>
            This method updates the status of input processing and adds the previous status
            to the stack.
            </remarks>
            <example>
            <code>
            using ( webControl.DeferInput() )
            {
                // Perform operations with all input blocked.
            } // Restores input processing to its previous status.
            </code>
            <code lang="VB">
            ' Block all input.
            Using MyWebControl.DeferInput()
                ' Perform operations with all input blocked.
            End Using ' Restores input processing to its previous status.
            </code>
            </example>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
            <seealso cref="P:Awesomium.Core.WebView.InputController"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.DeferInput(Awesomium.Core.ViewInput)">
            <summary>
            Enters a defer cycle that you can use to temporarily block specified input to the control.
            </summary>
            <param name="input">
            A combination of input types specified 
            in <see cref="T:Awesomium.Core.ViewInput"/>, indicating the 
            input(s) to be blocked.
            </param>
            <remarks>
            This method updates the status of input processing and adds the previous status
            to the stack.
            </remarks>
            <returns>
            A disposable <see cref="P:Awesomium.Windows.Controls.WebControl.InputController"/> that can be used with a <c>using</c>
            statement to create a defer cycle.
            </returns>
            <example>
            <code>
            // Block mouse and touch input.
            using ( webView.DeferInput( ViewInput.Mouse | ViewInput.Touch ) )
            {
                // Perform operations with mouse and touch input blocked.
                
                using ( webView.DeferInput( ViewInput.Keyboard ) )
                {
                    // Perform operations with mouse, touch and keyboard input blocked.
                    
                } // Restores input processing to its previous status, blocking only
                  // mouse and touch input.
                  
            } // Restores input processing to its initial status.
            </code>
            <code lang="VB">
            ' Block mouse and touch input.
            Using MyWebControl.DeferInput( ViewInput.Mouse Or ViewInput.Touch )
            
                ' Perform operations with mouse and touch input blocked.
                
                Using MyWebControl.DeferInput( ViewInput.Keyboard )
                
                    ' Perform operations with mouse, touch and keyboard input blocked.
                
                End Using ' Restores input processing to its previous status, blocking only
                          ' mouse and touch input.
                          
            End Using ' Restores regular input processing.
            </code>
            </example>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
            <seealso cref="P:Awesomium.Windows.Controls.WebControl.InputController"/>
        </member>
        <member name="M:Awesomium.Windows.Controls.WebControl.Repaint">
            <summary>
            Forces this <see cref="T:Awesomium.Windows.Controls.WebControl"/> to repaint the pixel 
            buffer of its underlying web view.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The member is called on an invalid <see cref="T:Awesomium.Windows.Controls.WebControl"/> instance
            (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsLive"/>).
            </exception>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsSourceViewProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsSourceView"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsDirtyProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsDirty"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsResizingProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsResizing"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsLoadingPageProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsLoadingPage"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsNavigatingProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsNavigating"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.DirtyBoundsProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.DirtyBounds"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.HistoryBackCountProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.HistoryBackCount"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.HistoryForwardCountProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.HistoryForwardCount"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.TitleProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.Title"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.HasTitleProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.HasTitle"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.HasKeyboardFocusProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.HasKeyboardFocus"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.HasTargetURLProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.HasTargetURL"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.TargetURLProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.TargetURL"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsCrashedProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsCrashed"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.PageContentsProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.PageContents"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsDomReadyProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsDomReady"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.HasSelectionProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.HasSelection"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.SelectionProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.Selection"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.InputControllerProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.InputController"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.LatestContextDataProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.LatestContextData"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsRenderingProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsRendering"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.IsTransparentProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.IsTransparent"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.FlushAlphaProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.FlushAlpha"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.ZoomProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.Zoom"/> dependency property.
            </summary>
        </member>
        <member name="F:Awesomium.Windows.Controls.WebControl.SourceProperty">
            <summary>
            Identifies the <see cref="P:Awesomium.Windows.Controls.WebControl.Source"/> dependency property.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.IsDirtyChanged">
            <summary>
            Occurs when this <see cref="T:Awesomium.Windows.Controls.WebControl"/> needs to be rendered again.
            </summary>
            <remarks>
            <para>
            This event is fired continuously while <see cref="P:Awesomium.Windows.Controls.WebControl.IsDirty"/> is true and until a call 
            to <see cref="M:Awesomium.Windows.Controls.WebControl.Render"/> is made that will render the updated view into an offscreen
            pixel buffer and clear the dirty state.
            </para>
            <para>
            This event is not automatically fired if you are running Awesomium from a non-UI
            thread. Please read the Remarks section of <see cref="M:Awesomium.Core.WebCore.Update"/> for
            details.
            </para>
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.BeginLoading">
            <summary>
            This event occurs when a <see cref="T:Awesomium.Windows.Controls.WebControl"/> begins loading a new page (first bits of data received from server).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.BeginNavigation">
            <summary>
            This event occurs when a <see cref="T:Awesomium.Windows.Controls.WebControl"/> begins navigating to a new URL.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.CursorChanged">
            <summary>
            This event occurs when the mouse cursor type changes.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.KeyboardFocusChanged">
            <summary>
            This event occurs when keyboard focus changes (usually as a result of a text-box being focused).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.TargetUrlChanged">
            <summary>
            This event occurs when the target URL changes (usually the result of hovering over a link).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ToolTipChanged">
            <summary>
            This event occurs when the tooltip text changes.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.DomReady">
            <summary>
            This event occurs once the document has been parsed for a page but before all resources (images, etc.)
            have been loaded. This is your first chance to execute Javascript on a page (useful for initialization purposes).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.LoadCompleted">
            <summary>
            This event occurs once a page (and all of its sub-frames) has completely finished loading.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.PageContentsReceived">
            <summary>
            This event occurs once the page contents (as text) have been retrieved (usually after the end
            of each page load). This plain text is useful for indexing/search purposes.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.OpenExternalLink">
            <summary>
            This event occurs when an external link is attempted to be opened. An external link
            is any link that normally opens in a new window (for example, links with target="_blank", calls
            to window.open(), and URL open events from Flash plugins). You are responsible for
            creating a new <see cref="T:Awesomium.Core.WebView"/> or <see cref="T:Awesomium.Windows.Controls.WebControl"/> to handle these URLs yourself.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.PluginCrashed">
            <summary>
            This event occurs whenever a plugin crashes on a page (usually Flash).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.TitleReceived">
            <summary>
            This event occurs once we receive the page title.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.Move">
            <summary>
            This event occurs whenever the window is requested to be moved (via Javascript).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.Download">
            <summary>
            This event occurs whenever a URL is requested to be downloaded (you must handle this yourself).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.Crashed">
            <summary>
            This event occurs when the renderer (which is isolated in a separate process) crashes unexpectedly.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.SelectLocalFiles">
            <summary>
            This event occurs whenever a page requests a file chooser dialog to be displayed (usually due
            to an upload form being clicked by a user). You will need to display your own dialog.
            </summary>
            <remarks>
            Assign the selected local file(s) to <see cref="P:Awesomium.Core.SelectLocalFilesEventArgs.SelectedFiles"/>.
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ScrollDataReceived">
            <summary>
            This event fires in response to <see cref="M:Awesomium.Windows.Controls.WebControl.RequestScrollData"/>.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.JSConsoleMessageAdded">
            <summary>
            This event occurs whenever a new message is added to the Javascript Console (usually
            the result of a Javascript error).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.FindResultsReceived">
            <summary>
            This event occurs whenever we receive results back from an in-page find operation
            (<see cref="M:Awesomium.Windows.Controls.WebControl.Find(System.String)"/>).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.SelectionChanged">
            <summary>
            This event occurs when the selection in the current page, changes.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ImeUpdated">
            <summary>
            This event occurs whenever the user does something that changes the 
            position or visibility of the IME Widget. This event is only active when 
            IME is activated (please see <see cref="M:Awesomium.Windows.Controls.WebControl.ActivateIME(System.Boolean)"/>).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ShowContextMenu">
            <summary>
            Occurs in response to a right-click in a web-page.
            </summary>
            <seealso cref="P:Awesomium.Windows.Controls.WebControl.LatestContextData"/>
            <seealso cref="T:Awesomium.Core.WebViewContext"/>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.LoginRequest">
            <summary>
            Occurs whenever a page requests authentication from the user (ex, Basic HTTP Auth, NTLM Auth, etc.).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.HistoryChanged">
            <summary>
            Occurs when the history state has changed. 
            (eg, the state of the back/forward buttons should be updated)
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ResizeComplete">
            <summary>
            Occurs when a web view has finished resizing to a certain size (and has finished repainting the <see cref="T:Awesomium.Core.RenderBuffer"/>).
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ShowJavascriptDialog">
            <summary>
            Occurs when JS code in a web page requests for a Javascript Dialog.
            </summary>
            <remarks>
            WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/> internally handles this by displaying
            predefined <see cref="T:Awesomium.Windows.Controls.WebControlJSDialogLayer"/> instances.
            Read <see cref="P:Awesomium.Core.JavascriptDialogEventArgs.Handled"/> for ways
            to customize this behavior.
            </remarks>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ResourceRequest">
            <summary>
            This event occurs whenever there is a request for a certain resource (URL). You can either modify the request
            before it is sent or immediately return your own custom response. This is useful for implementing your own
            custom resource-loading back-end or for tracking of resource loads.
            </summary>
        </member>
        <member name="E:Awesomium.Windows.Controls.WebControl.ResourceResponse">
            <summary>
            This event occurs whenever a response has been received from a server. This is useful for statistics
            and resource tracking purposes.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.VisualChildrenCount">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.CanRecreateView">
            <summary>
            Gets if this control wraps a previously crashed
            view that can be recreated.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.Layers">
            <summary>
            Gets a list of UI layers currently visible.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ContextMenuResourceKey">
            <summary>
            Gets the resource key for the context menu of a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            This can be used to override the default context menu.
            </remarks>
            <seealso cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ContextMenuPageItemsArrayRecourceKey">
            <summary>
            Gets the resource key for an array of items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when you right-click on a 
            page that has no selection and no keyboard focus.
            </summary>
            <remarks>
            <para>
            You can use this resource key to override the items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when you right-click on a 
            page that has no selection and no keyboard focus.
            </para>
            <note>
            If you only wish to add items to the predefined ones, keep in mind that you
            have to redefine all the items of the array.
            </note>
            </remarks>
            <example>
            The default-predefined array in XAML is:
            <code lang="XAML">
            <![CDATA[
            <x:Array x:Key="{x:Static awe:WebControl.ContextMenuPageItemsArrayRecourceKey}" Type="{x:Type DependencyObject}">
                <MenuItem Command="BrowseBack" />
                <MenuItem Command="BrowseForward" />        
                <MenuItem Command="Refresh" />
                <Separator />
                <MenuItem Command="Print" />
                <Separator />
                <MenuItem Command="SelectAll" />
            </x:Array>
            ]]>
            </code>
            </example>
            <seealso cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ContextMenuInputItemsArrayRecourceKey">
            <summary>
            Gets the resource key for an array of items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when the control has keyboard focus.
            </summary>
            <remarks>
            <para>
            You can use this resource key to override the items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when the control has keyboard focus.
            </para>
            <note>
            If you only wish to add items to the predefined ones, keep in mind that you
            have to redefine all the items of the array.
            </note>
            </remarks>
            <example>
            The default-predefined array in XAML is:
            <code lang="XAML">
            <![CDATA[
            <x:Array x:Key="{x:Static awe:WebControl.ContextMenuInputItemsArrayRecourceKey}" Type="{x:Type DependencyObject}">
                <MenuItem Command="Copy" />
                <MenuItem Command="Cut" />        
                <MenuItem Command="Paste" />
                <Separator />
                <MenuItem Command="SelectAll" />
            </x:Array>
            ]]>
            </code>
            </example>
            <seealso cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ContextMenuSelectionItemsArrayRecourceKey">
            <summary>
            Gets the resource key for an array of items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when a range of content in the page 
            is currently selected.
            </summary>
            <remarks>
            <para>
            You can use this resource key to override the items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when a range of content in the page 
            is currently selected.
            </para>
            <note>
            If you only wish to add items to the predefined ones, keep in mind that you
            have to redefine all the items of the array.
            </note>
            </remarks>
            <example>
            The default-predefined array in XAML is:
            <code lang="XAML">
            <![CDATA[
            <x:Array x:Key="{x:Static awe:WebControl.ContextMenuSelectionItemsArrayRecourceKey}" Type="{x:Type DependencyObject}">
                <MenuItem Command="Copy" />
                <MenuItem Command="{x:Static awe:WebControlCommands.CopyHTML}" />
                <Separator />
            </x:Array>
            ]]>
            </code>
            </example>
            <seealso cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ContextMenuImageItemsArrayRecourceKey">
            <summary>
            Gets the resource key for an array of items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when you right-click on an image in a page.
            </summary>
            <remarks>
            <para>
            You can use this resource key to override the items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when you right-click on an image in a page.
            </para>
            <note>
            If you only wish to add items to the predefined ones, keep in mind that you
            have to redefine all the items of the array.
            </note>
            </remarks>
            <example>
            The default-predefined array in XAML is:
            <code lang="XAML">
            <![CDATA[
            <x:Array x:Key="{x:Static awe:WebControl.ContextMenuImageItemsArrayRecourceKey}" Type="{x:Type DependencyObject}">
                <MenuItem Command="{x:Static awe:WebControlCommands.CopyImage}" />
                <Separator />
            </x:Array>
            ]]>
            </code>
            </example>
            <seealso cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ContextMenuLinkItemsArrayRecourceKey">
            <summary>
            Gets the resource key for an array of items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when you right-click on a link in a page.
            </summary>
            <remarks>
            <para>
            You can use this resource key to override the items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebControl"/>, that are visible when you right-click on a link in a page.
            </para>
            <note>
            If you only wish to add items to the predefined ones, keep in mind that you
            have to redefine all the items of the array.
            </note>
            </remarks>
            <example>
            The default-predefined array in XAML is:
            <code lang="XAML">
            <![CDATA[
            <x:Array x:Key="{x:Static awe:WebControl.ContextMenuLinkItemsArrayRecourceKey}" Type="{x:Type DependencyObject}">
                <MenuItem Command="{x:Static awe:WebControlCommands.CopyLinkAddress}" />
                <Separator />
            </x:Array>
            ]]>
            </code>
            </example>
            <seealso cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.ToolTipResourceKey">
            <summary>
            Gets the resource key for the tool-tip of a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            This can be used to override the default tool-tip.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsLive">
            <summary>
            Gets if the underlying web-view this control wraps, is alive.
            </summary>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating if the underlying web-view this control wraps, 
            is alive. <c>False</c> indicates that the underlying web-view is:
            <list type="bullet">
            <item>
            <description>
            Crashed (see <see cref="P:Awesomium.Windows.Controls.WebControl.IsCrashed"/>).
            <note>
            When crashed, this control will attempt to recreate its underlying view.
            For details, see: <see cref="P:Awesomium.Windows.Controls.WebControl.IsCrashed"/>.
            </note>
            </description>
            </item>
            <item>
            <description>
            Prematurely destroyed (see <see cref="M:Awesomium.Windows.Controls.WebControl.Close"/>).
            </description>
            </item>
            <item>
            <description>
            Not properly instantiated. This means that something went wrong
            during instantiation of either the <see cref="T:Awesomium.Core.WebCore"/> (if this
            is the first <see cref="T:Awesomium.Windows.Controls.WebControl"/> created) or of the
            underlying web-view.
            </description>
            </item>
            </list>
            </returns>
            <remarks>
            Developers should always check this property before calling <see cref="T:Awesomium.Core.IWebView"/>
            members implemented by this <see cref="T:Awesomium.Windows.Controls.WebControl"/>. Trying to access the underlying
            web-view when it is not alive, can throw an <see cref="T:System.InvalidOperationException"/>.
            <p/>
            For more details, refer to the documentation of this control's members.
            <p/>
            <note>
            This property also returns <c>false</c> when the control is shown in a designer.
            The Awesomium <see cref="T:Awesomium.Core.WebCore"/> and the underlying web-view, are only instantiated
            during runtime.
            </note>
            </remarks>
            <example>
            <code>
            private void toolStripButton2_Click( object sender, EventArgs e )
            {
                if ( !webControl.IsLive )
                    return;
                    
                webControl.GoForward();
            }
            </code>
            <code lang="VB">
            Private Sub ToolStripButton2_Click( sender As Object, e As EventArgs ) Handles ToolStripButton2.Click
                If Not m_WebControl.IsLive Then Return
                    
                m_WebControl.GoForward()
            End Sub
            </code>
            </example>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsSourceView">
            <summary>
            Gets if this control displays the HTML source of any web-page loaded.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsDirty">
            <summary>
            Gets if this <see cref="T:Awesomium.Windows.Controls.WebControl"/> needs to be rendered again.
            </summary>
            <remarks>
            Internal changes to this property fire the <see cref="E:Awesomium.Windows.Controls.WebControl.IsDirtyChanged"/>
            and <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> events,
            only if <see cref="P:Awesomium.Core.WebCore.IsAutoUpdateEnabled"/> is true.
            </remarks>
            <seealso cref="E:Awesomium.Windows.Controls.WebControl.IsDirtyChanged"/>
            <seealso cref="M:Awesomium.Core.WebCore.Update"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsResizing">
            <summary>
            Gets if there is a resize operation pending.
            </summary>
            <returns>
            True if we are waiting for the <see cref="T:Awesomium.Windows.Controls.WebControl"/> to
            return acknowledgment of a pending resize operation. False otherwise.
            </returns>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsLoadingPage">
            <summary>
            Gets if a page is currently loading in the <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsNavigating">
            <summary>
            Gets if the <see cref="T:Awesomium.Windows.Controls.WebControl"/> is currently navigating to a Url.
            </summary>
            <remarks>
            Unlike <see cref="P:Awesomium.Windows.Controls.WebControl.IsLoadingPage"/> that updates when the actual contents
            of a page are being downloaded, this property is updated when navigation
            starts and updates again when loading completes.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.DirtyBounds">
            <summary>
            Gets the bounds of the area that has changed since the last rendering.
            </summary>
            <returns>
            An <see cref="T:Awesomium.Core.AweRect"/> representing the bounds of the area that has changed 
            since the last rendering.
            </returns>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.HistoryBackCount">
            <summary>
            Gets the available number of steps back in history.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.HistoryForwardCount">
            <summary>
            Gets the available number of steps forward in history.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.Title">
            <summary>
            Gets the title of the page currently loaded in this <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            This property may also reflect navigation progress.
            For details, see <see cref="P:Awesomium.Windows.Controls.WebControl.NavigationInfo"/>.
            </remarks>
            <seealso cref="P:Awesomium.Windows.Controls.WebControl.NavigationInfo"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.HasTitle">
            <summary>
            Gets if the currently loaded web-page has a title.
            </summary>
            <seealso cref="P:Awesomium.Windows.Controls.WebControl.Title"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.HasKeyboardFocus">
            <summary>
            Gets if this <see cref="T:Awesomium.Windows.Controls.WebControl"/> currently has keyboard focus.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.HasTargetURL">
            <summary>
            Gets if this <see cref="T:Awesomium.Windows.Controls.WebControl"/> is currently indicating a target URL,
            usually as a result of hovering over a link on the page.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.TargetURL">
            <summary>
            Gets the target URL indicated by the <see cref="T:Awesomium.Windows.Controls.WebControl"/>,
            usually as a result of hovering over a link on the page.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsCrashed">
            <summary>
            Gets if the renderer of this <see cref="T:Awesomium.Windows.Controls.WebControl"/> (which is isolated in a separate process) has crashed.
            </summary>
            <remarks>
            When crashed, this control will attempt to recreate its underlying view when any of the following
            methods or properties is called:
            <list type="bullet">
            <item><see cref="M:Awesomium.Windows.Controls.WebControl.GoToHome"/></item>
            <item><see cref="M:Awesomium.Windows.Controls.WebControl.LoadURL(System.String)"/></item>
            <item><see cref="M:Awesomium.Windows.Controls.WebControl.LoadHTML(System.String)"/></item>
            <item><see cref="M:Awesomium.Windows.Controls.WebControl.LoadFile(System.String)"/></item>
            <item><see cref="M:Awesomium.Windows.Controls.WebControl.Reload"/></item>
            <item><see cref="P:Awesomium.Windows.Controls.WebControl.Source"/></item>
            </list>
            <note>
            It is suggested that you avoid using <see cref="M:Awesomium.Windows.Controls.WebControl.Reload"/> since what was there in the current
            page that caused the crash in the first place, may crash the view again.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.PageContents">
            <summary>
            Gets the textual representation of the contents of the page currently loaded.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsDomReady">
            <summary>
            Gets if DOM (Document Object Model) for the page being loaded, is ready.
            </summary>
            <remarks>
            This is very useful for executing Javascript on a page before its content has finished loading.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.HasSelection">
            <summary>
            Gets if the user has selected content in the current page.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.Selection">
            <summary>
            Gets a <see cref="P:Awesomium.Windows.Controls.WebControl.Selection"/> providing information about the current selection range.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.InputController">
            <summary>
            Get's this control's <see cref="P:Awesomium.Windows.Controls.WebControl.InputController"/> that allows manipulation of input processing.
            </summary>
            <returns>
            An <see cref="P:Awesomium.Windows.Controls.WebControl.InputController"/> that allows manipulation of input processing.
            </returns>
            <remarks>
            To create temporary input defer cycles, use <see cref="M:Awesomium.Windows.Controls.WebControl.DeferInput"/>.
            </remarks>
            <seealso cref="M:Awesomium.Windows.Controls.WebControl.DeferInput"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.LatestContextData">
            <summary>
            Gets the latest web view context data updated by a right-click in a web-page.
            </summary>
            <returns>
            A <see cref="T:Awesomium.Core.WebViewContext"/> that represents the latest web view context data.
            </returns>
            <seealso cref="T:Awesomium.Core.WebViewContext"/>
            <seealso cref="E:Awesomium.Windows.Controls.WebControl.ShowContextMenu"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.SelfUpdate">
            <summary>
            Gets or sets if this view should use an independent rendering timer. 
            </summary>
            <remarks>
            <note type="caution">
            Setting this property to <c>true</c> will fail if <see cref="P:Awesomium.Core.WebCore.IsAutoUpdateEnabled"/> is <c>false</c>.
            It is suggested that you check the value of <see cref="P:Awesomium.Core.WebCore.IsAutoUpdateEnabled"/> before attempting
            to activate <see cref="P:Awesomium.Windows.Controls.WebControl.SelfUpdate"/>.
            </note>
            <p/>
            When auto-update is enabled (see <see cref="P:Awesomium.Core.WebCore.IsAutoUpdateEnabled"/>), updating
            <see cref="P:Awesomium.Windows.Controls.WebControl.IsDirty"/> and refreshing WebControls, is controlled by the <see cref="T:Awesomium.Core.WebCore"/>
            using an internal timer, common for all views. The same timer is used to update the <see cref="T:Awesomium.Core.WebCore"/>
            (see <see cref="M:Awesomium.Core.WebCore.Update"/>) and fire events. While this is a light and effective technique, it is
            not ideal when you require high performance quality, such as when video content is displayed in views.
            In these scenarios, setting <see cref="P:Awesomium.Windows.Controls.WebControl.SelfUpdate"/> to <c>true</c> will tell the view to use an
            independent timer for rendering only, that will significantly improve the rendering quality, to the expense
            of CPU resources.
            <p/>
            <note>
            The use of <see cref="P:Awesomium.Windows.Controls.WebControl.SelfUpdate"/> is combined with the use of <see cref="P:System.Windows.UIElement.IsEnabled"/> or <see cref="P:Awesomium.Windows.Controls.WebControl.IsRendering"/>.
            </note>
            <p/>
            <note>
            The default setting for the WPF <see cref="T:Awesomium.Windows.Controls.WebControl"/>, is <c>true</c>.
            This is because in WPF only, we get more detailed notifications of when a control is loaded for presentation and thus
            we can update <see cref="P:Awesomium.Windows.Controls.WebControl.IsRendering"/> internally. However, this property should be set to <c>false</c> 
            if multiple WebControls with content that update too fast, are simultaneously presented to the user.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Controls.WebControl.IsRendering"/>
            <seealso cref="M:Awesomium.Windows.Controls.WebControl.OnIsEnabledChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)"/>
            <seealso cref="P:Awesomium.Core.IWebView.SelfUpdate"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsRendering">
            <summary>
            Gets or sets if internal asynchronous rendering is currently enabled.
            </summary>
            <remarks>
            All rendering is actually done asynchronously in a separate process
            and so the page is usually continuously rendering internally.
            <note>
            This property is automatically updated by monitoring the control's
            enabled status and it should not be manually set.
            The update occurs in <see cref="M:Awesomium.Windows.Controls.WebControl.OnIsEnabledChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </note>
            <note type="inherit">
            Inheritors can override <see cref="M:Awesomium.Windows.Controls.WebControl.OnIsEnabledChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>,
            then set this property manually if they want to <i>disconnect</i> internal asynchronous 
            rendering, from the control's enabled status.
            </note>
            </remarks>
            <seealso cref="P:Awesomium.Windows.Controls.WebControl.SelfUpdate"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.IsTransparent">
            <summary>
            Gets or sets if pages should be rendered with transparency
            preserved (for ex, for pages with style="background-color: transparent;")
            </summary>
            <returns>
            A boolean value indicating whether or not this <see cref="T:Awesomium.Windows.Controls.WebControl"/> is transparent.
            </returns>
            <remarks>
            <note type="caution">
            This property is incompatible with <see cref="P:Awesomium.Windows.Controls.WebControl.FlushAlpha"/>. You need to make sure that <see cref="P:Awesomium.Windows.Controls.WebControl.FlushAlpha"/>
            is set to <c>false</c> in order to set this property to <c>true</c>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.FlushAlpha">
            <summary>
            Gets or sets if we should flush the alpha channel to completely opaque values, during rendering.
            </summary>
            <remarks>
            <note type="caution">
            This property is incompatible with <see cref="P:Awesomium.Windows.Controls.WebControl.IsTransparent"/>. You need to make sure that <see cref="P:Awesomium.Windows.Controls.WebControl.IsTransparent"/>
            is set to <c>false</c> in order to set this property to <c>true</c>.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.Zoom">
            <summary>
            Gets or sets the zoom factor (page percentage).
            </summary>
            <returns>
            An integer value representing the zoom factor (page percentage)
            for the current hostname. The default is 100.
            </returns>
            <remarks>
            Valid range is from 10 to 500.
            <p/>
            This operation is asynchronous: 
            the value may not change for several milliseconds after
            you set this property.
            <note>
            Note that this setting is applied to the current hostname and
            not the control in general. Is it dynamically updated when
            you navigate to another domain with different, or no setting.
            <p/>
            To get the Zoom setting of a given hostname, use <see cref="M:Awesomium.Windows.Controls.WebControl.GetZoomForHost(System.String)"/>.
            </note>
            </remarks>
            <seealso cref="M:Awesomium.Windows.Controls.WebControl.GetZoomForHost(System.String)"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.Source">
            <summary>
            Gets or sets the current URL presented by this <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <returns>
            An absolute <see cref="T:System.Uri"/> representing the current URL presented 
            by this <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </returns>
            <seealso cref="M:Awesomium.Windows.Controls.WebControl.LoadURL(System.String)"/>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControl.NavigationInfo">
            <summary>
            Gets or sets the navigation info level.
            </summary>
            <returns>
            A <see cref="T:Awesomium.Core.NavigationInfo"/> value indicating
            the level of navigation progress info reflected to the
            <see cref="P:Awesomium.Windows.Controls.WebControl.Title"/>. The default is <see cref="F:Awesomium.Core.NavigationInfo.Verbose"/>.
            </returns>
            <remarks>
            Navigation progress information is reflected to the control's
            <see cref="P:Awesomium.Windows.Controls.WebControl.Title"/>:
            <list type="table">
            <listheader>
            <term>Level</term>
            <description>Title Value</description>
            </listheader>
            <item>
            <term><c>"None"</c></term>
            <description><c>Title</c> only reflects the page's title, if any.</description>
            </item>
            <item>
            <term><c>"Normal"</c></term>
            <description><c>Title</c> reflects the page's title as well as "Error" and "Crashed" status.</description>
            </item>
            <item>
            <term><c>"Verbose"</c></term>
            <description>
            <c>Title</c> reflects progress status such as "Navigating..." and "Loading...",
            until the page's title is acquired. Also reflects "Error" and "Crashed" status. (<b>Default</b>)
            </description>
            </item>
            </list>
            <p/>
            <note>
            Progress information can be localized by adding more localization resources
            to the assembly.
            </note>
            </remarks>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebControlCommands">
            <summary>
            Defines routed commands that are common to a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            In addition to the <see cref="T:Awesomium.Windows.Controls.WebControl"/> specific routed UI commands defined in 
            <see cref="T:Awesomium.Windows.Controls.WebControlCommands"/>, the <see cref="T:Awesomium.Windows.Controls.WebControl"/> reuses many of the
            <see cref="T:System.Windows.Input.ApplicationCommands"/> and <see cref="T:System.Windows.Input.NavigationCommands"/> available with
            the .NET Framework. In order to get the text of these commands displayed in your
            system's locale, you may need to download a <a href="http://www.microsoft.com/download/en/details.aspx?id=23067">
            Microsoft .NET Framework 4 Client Language Pack (x86 x64)</a>.
            <p/>
            <note>
            The text of the commands specified in this class, can be localized by adding more 
            localization resources to the assembly.
            </note>
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.LoadURL">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.LoadURL(System.String)"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            When binding to this command, specify the URL as a command parameter.
            The URL can be a <see cref="T:System.Uri"/> instance or a string representing the source URL.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.LoadFile">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.LoadFile(System.String)"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            When binding to this command, specify the file name as a command parameter.
            The file name can be represented by a <see cref="T:System.Uri"/> instance or a string.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.ActivateIME">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.ActivateIME(System.Boolean)"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            When binding to this command, specify a boolean value as a command parameter,
            that indicates whether to activate or deactivate IME.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.AddURLFilter">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.AddURLFilter(System.String)"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            When binding to this command, specify the URL filter (as a string), as a command parameter.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.CancelIMEComposition">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.CancelIMEComposition"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.ClearAllURLFilters">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.ClearAllURLFilters"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.ConfirmIMEComposition">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.ConfirmIMEComposition(System.String)"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            When binding to this command, specify the string to examine, as a command parameter.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.CreateObject">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.CreateObject(System.String)"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            When binding to this command, specify the name of the Javascript object to create, as a command parameter.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.DestroyObject">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.DestroyObject(System.String)"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            When binding to this command, specify the name of the Javascript object to destroy, as a command parameter.
            </remarks>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.ResetZoom">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.ResetZoom"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.StopFind">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.StopFind(System.Boolean)"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.CopyHTML">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.CopyHTML"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.CopyLinkAddress">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.CopyLinkAddress"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebControlCommands.CopyImage">
            <summary>
            Gets a command that invokes <see cref="M:Awesomium.Windows.Controls.WebControl.CopyImageAt(System.Int32,System.Int32)"/> when targeting a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            When executing this command, the <see cref="T:Awesomium.Windows.Controls.WebControl"/> uses the latest right-click coordinates
            as defined in the <see cref="T:Awesomium.Core.WebViewContext"/> provided by 
            <see cref="P:Awesomium.Windows.Controls.WebControl.LatestContextData"/>,
            to locate the image in the web-page.
            </remarks>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebControlContextMenu">
            <summary>
            Predefined stylable context menu used by <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            </summary>
            <remarks>
            There are multiple ways to customize, override or block the context menu of a <see cref="T:Awesomium.Windows.Controls.WebControl"/>.
            These are described in the following list:
            <list type="table">
            <listheader>
            <term>Action</term>
            <description>Result</description>
            </listheader>
            <item>
            <term>Redefine a <see cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/> application resource, 
            using the <see cref="P:Awesomium.Windows.Controls.WebControl.ContextMenuResourceKey"/> as key.</term>
            <description>
            Completely substitutes the default context menu. You should bind the <see cref="P:System.Windows.FrameworkElement.DataContext"/> property
            to the <see cref="P:System.Windows.Controls.ContextMenu.PlacementTarget"/> property, to access the <see cref="T:Awesomium.Windows.Controls.WebControl"/>. You can later use the
            <see cref="T:Awesomium.Core.WebViewContext"/> provided through <see cref="P:Awesomium.Windows.Controls.WebControl.LatestContextData"/> to update the state of the menu's items.
            </description>
            </item>
            <item>
            <term>Assign your own context menu to the <see cref="P:System.Windows.FrameworkElement.ContextMenu"/> property.</term>
            <description>Same as before but in this case you should provide your own display context data.</description>
            </item>
            <item>
            <term>Redefine one or more arrays of menu items in your application resources, 
            using the following keys (depending to the group you wish to substitute or change):
            <p/>
            <see cref="P:Awesomium.Windows.Controls.WebControl.ContextMenuPageItemsArrayRecourceKey"/>
            <br/>
            <see cref="P:Awesomium.Windows.Controls.WebControl.ContextMenuInputItemsArrayRecourceKey"/>
            <br/>
            <see cref="P:Awesomium.Windows.Controls.WebControl.ContextMenuSelectionItemsArrayRecourceKey"/>
            <br/>
            <see cref="P:Awesomium.Windows.Controls.WebControl.ContextMenuImageItemsArrayRecourceKey"/>
            <br/>
            <see cref="P:Awesomium.Windows.Controls.WebControl.ContextMenuLinkItemsArrayRecourceKey"/>
            </term>
            <description>Substitutes or edits specific menu items' groups, that are visible according to the current context.
            For more details, read the documentation of the resource keys.</description>
            </item>
            <item>
            <term>Handle the <see cref="E:Awesomium.Windows.Controls.WebControl.ShowContextMenu"/> event and set the <see cref="P:Awesomium.Core.ContextMenuEventArgs.Handled"/> property
            to <c>true</c>.</term>
            <description>This will block the default context menu from displaying. You can then manually display your own context menu.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebControlLoginLayer">
            <summary>
            Represents a layer added to a <see cref="T:Awesomium.Windows.Controls.WebControl"/> to display an authentication request.
            </summary>
        </member>
        <member name="T:Awesomium.Windows.Controls.WebSourceControl">
            <summary>
            Represents a WPF control that displays the HTML source
            of any web-page loaded using <see cref="M:Awesomium.Windows.Controls.WebControl.LoadURL(System.String)"/>.
            </summary>
        </member>
        <member name="P:Awesomium.Windows.Controls.WebSourceControl.IsSourceView">
            <inheritdoc />
        </member>
        <member name="P:Awesomium.Windows.Controls.WebSourceControl.ContextMenuSourceItemsArrayRecourceKey">
            <summary>
            Gets the resource key for an array of items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebSourceControl"/>.
            </summary>
            <remarks>
            <para>
            You can use this resource key to override the items in the context menu of a 
            <see cref="T:Awesomium.Windows.Controls.WebSourceControl"/>.
            </para>
            <note>
            If you only wish to add items to the predefined ones, keep in mind that you
            have to redefine all the items of the array.
            </note>
            </remarks>
            <example>
            The default-predefined array in XAML is:
            <code lang="XAML">
            <![CDATA[
            <x:Array x:Key="{x:Static awe:WebSourceControl.ContextMenuInputItemsArrayRecourceKey}" Type="{x:Type DependencyObject}">
                <MenuItem Command="Copy" />
                <Separator />
                <MenuItem Command="SelectAll" />
            </x:Array>
            ]]>
            </code>
            </example>
            <seealso cref="T:Awesomium.Windows.Controls.WebControlContextMenu"/>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
